---

# Â© Copyright EnterpriseDB UK Limited 2015-2024 - All rights reserved.

- name: Ensure /etc/pgbouncer exists
  file:
    path: /etc/pgbouncer
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "0700"
    state: directory

- name: Ensure pgbouncer runtime directories exist
  file:
      path: "{{ item.path }}"
      owner: "{{ postgres_user }}"
      group: "{{ postgres_group }}"
      mode: "{{ item.mode }}"
      state: directory
  with_items:
      - {path: /var/log/pgbouncer, mode: "0775"}
      - {path: /var/run/pgbouncer, mode: "0775"}

- name: postgres group can access SSL certs for authentication
  file:
    path: "{{ pgbouncer_home }}"
    group: "{{ postgres_group }}"
    mode: "0750"
    state: directory

- name: Install tmpfiles.d entries for pgbouncer runtime directories
  copy:
   dest: /usr/lib/tmpfiles.d/pgbouncer.conf
   owner: root
   group: root
   mode: "0644"
   content: |
       d /var/run/pgbouncer 0775 {{ postgres_user }} {{ postgres_group }} - -

- name: Install pgbouncer.ini
  template:
    src: pgbouncer.ini.j2
    dest: "/etc/pgbouncer/pgbouncer.ini"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "0640"
  notify:
    - Note pgbouncer restart required
  when: >
    task_selector|permits('pgbouncer-config')

- name: Install pgbouncer.databases.ini
  template:
    src: pgbouncer.databases.ini.j2
    dest: "/etc/pgbouncer/pgbouncer.databases.ini"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "0640"
  notify:
    - Note pgbouncer restart required
  when: >
    task_selector|permits('pgbouncer-config')

# We must find a backend instance that pgbouncer points to, so that we
# can check if vars['pgbouncer_auth_user_password'] is up-to-date when
# compared to roles['pgbouncer_auth_user'].rolpassword from
# hostvars[backend].cluster_facts.
#
# If pgbouncer_backend is 127.0.0.1, we substitute inventory_hostname.
# If the result is in hostvars and is a Postgres instance, we're done.
# Otherwise, if it's an haproxy instance, we can use the first of its
# haproxy_backend_servers. That's as far as we can reasonably go.

- set_fact:
    pgbouncer_backend_instance: "{{
        (pgbouncer_backend == '127.0.0.1')|ternary(
          inventory_hostname, pgbouncer_backend
        )
      }}"

- set_fact:
    pgbouncer_backend_instance: "{{
        hostvars[pgbouncer_backend_instance].haproxy_backend_servers[0]
      }}"
  when:
    - pgbouncer_backend_instance in hostvars
    - "'haproxy' in hostvars[pgbouncer_backend_instance].role"
    - "'postgres' not in hostvars[pgbouncer_backend_instance].role"

- include_tasks: userlist.yml

- name: Enable pgbouncer on boot
  service:
    name: pgbouncer
    enabled: yes
