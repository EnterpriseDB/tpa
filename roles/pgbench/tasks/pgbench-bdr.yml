---

# Copyright Â© 2ndQuadrant Limited <info@2ndquadrant.com>

- set_fact:
    first_primary: "{{ _rw_instances|first }}"
    last_primary: "{{ _rw_instances|last }}"
  vars:
    _rw_instances: "{{
      groups|members_of(bdr_node_group, not_in=['role_readonly','role_replica'])
    }}"

- block:
  - name: Raise both BDR global lock timeouts for pgbench -i
    postgresql_query:
      conninfo: "dbname={{ pgbench_dbname }}"
      autocommit: yes
      queries:
      - text: ALTER SYSTEM SET bdr.global_lock_timeout TO '600s';
      - text: ALTER SYSTEM SET bdr.global_lock_statement_timeout TO '3600s';
      - text: SELECT pg_reload_conf();
    become_user: "{{ postgres_user }}"
    become: yes

  - include_role: name=pgbench/init
    vars:
      pgbench_output: pgbench-bdr-init.txt
    tags: always

  - name: Reset BDR global lock timeouts to defaults after pgbench -i
    postgresql_query:
      conninfo: "dbname={{ pgbench_dbname }}"
      autocommit: yes
      queries:
      - text: ALTER SYSTEM SET bdr.global_lock_statement_timeout TO default;
      - text: ALTER SYSTEM SET bdr.global_lock_timeout TO default;
      - text: SELECT pg_reload_conf();
    become_user: "{{ postgres_user }}"
    become: yes

  when: >
    inventory_hostname == first_primary

- name: Wait for pgbench -i to replicate to BDR instances
  postgresql_query:
    conninfo: "dbname={{ pgbench_dbname }}"
    query: >
      select bdr.wait_slot_confirm_lsn(NULL, NULL)
  become_user: "{{ postgres_user }}"
  become: yes

- name: Run read/write workload
  include_tasks: pgbench.yml
  vars:
    pgbench_opts: -v -c 10 -j 5 -T 180 {{ pgbench_dbname }}
    pgbench_output: pgbench-bdr-rw.txt
  when: >
    inventory_hostname == last_primary
  tags: always

- name: Run read-only workload
  include_tasks: pgbench.yml
  vars:
    pgbench_opts: -n -c 10 -j 5 -T 180 -S {{ pgbench_dbname }}
    pgbench_output: pgbench-bdr-ro.txt
  when: >
    'replica' in role
  tags: always
