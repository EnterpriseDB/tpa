---

# © Copyright EnterpriseDB UK Limited 2015-2023 - All rights reserved.

# By default, we want to use huge pages, but disable transparent huge
# page support.
#
# Transparent huge page support cannot be controlled by a sysctl, unlike
# vm.nr_hugepages, but we can use tunables in /sys to try to control it.
#
# The following is overkill. We only need to «echo 'never' > …/enabled».
# We don't need to touch the other files, and we don't need all of this
# configurability, but it's there as an example of how we can handle a
# series of dependent tunables (e.g., when setting up test scenarios).

- name: Set transparent_hugepage/enabled in /etc/tpa/hugepages
  template:
    src: hugepages.j2
    dest: /etc/tpa/hugepages
    owner: root
    group: root
    mode: "0755"
  register: hugepages
  vars:
    enabled: >-
      {{ transparent_hugepage }}
    defrag: >-
      {{ transparent_hugepage_defrag|default(transparent_hugepage) }}
    kdefrag: >-
      {{ transparent_hugepage_khugepaged_defrag|default((defrag == 'always')|ternary(1, 0)) }}

- name: Ensure /etc/tpa/hugepages is called from /etc/tpa/rc.local
  blockinfile:
    path: /etc/tpa/rc.local
    marker: "## {mark} Transparent huge pages"
    block: |
      /etc/tpa/hugepages
    state: present

- name: Execute /etc/tpa/hugepages to change desired settings immediately
  command: /etc/tpa/hugepages
  when: hugepages is changed

# Overkill or not, controlling transparent huge pages via /sys is not as
# reliable as doing so by appending "transparent_hugepage=never" to the
# kernel command-line.
#
# Likewise, setting vm.nr_hugepages is not a guarantee that the required
# number of pages will be made available (due to memory fragmentation).
# The better way to do it is to set "hugepages=N" on the kernel command
# line, where the request will be processed much earlier, during kernel
# startup rather than via /etc/rc.local.

- include_tasks: "os/{{ ansible_os_family }}.yml"
