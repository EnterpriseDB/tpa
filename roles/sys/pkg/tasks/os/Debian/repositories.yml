---

# Â© Copyright EnterpriseDB UK Limited 2015-2021 - All rights reserved.

- name: Install apt-transport-https to support https repositories
  raw: apt-get -q -y install apt-transport-https
  environment: {}
  register: ath_install
  changed_when: >
    ath_install is successful
    and 'already the newest version' not in ath_install.stdout

- name: Install curl to fetch repository files
  raw: command -v curl >/dev/null 2>&1 || apt-get -q -y install curl; true
  environment: {}
  register: curl_install
  changed_when: >
    curl_install is successful
    and curl_install.stdout.strip() != ''
    and 'already the newest version' not in curl_install.stdout

- name: Install gpg to install apt repository keys
  raw: command -v gpg >/dev/null 2>&1 || apt-get -q -y install gnupg2; true
  environment: {}
  register: gpg_install
  changed_when: >
    gpg_install is successful
    and gpg_install.stdout.strip() != ''
    and 'already the newest version' not in gpg_install.stdout

- set_fact:
    default_apt_repository_list: "{{
      default_apt_repository_list|union(['EDB'])
    }}"
  when:
    postgres_installation_method == 'pkg' and (
      postgresql_flavour == 'epas'
      or failover_manager == 'efm'
    )

- set_fact:
    apt_repository_list: "{{
      apt_repository_list|default(default_apt_repository_list)
    }}"

- assert:
    msg: >
      Export EDB_REPO_CREDENTIALS_FILE to use the EDB repository
      (see https://www.enterprisedb.com/user/ for credentials)
    that:
      lookup('env', 'EDB_REPO_CREDENTIALS_FILE') != ''
  when: >
    'EDB' in apt_repository_list
  tags: public_repos

- name: Ensure repository list is defined
  assert:
    msg: "Repository {{ item }} is not defined in apt_repositories"
    that: item in default_apt_repositories|combine(apt_repositories)
  with_items: "{{ apt_repository_list }}"

- name: Install apt repository signing keys
  apt_key:
    id: "{{ r.key_id }}"
    url: "{{ r.key_url }}"
    state: present
  with_items: "{{ apt_repository_list }}"
  vars:
    repos: "{{ default_apt_repositories|combine(apt_repositories) }}"
    r: "{{ repos[item] }}"

- name: Install apt repositories
  apt_repository:
    repo: "{{ repo_entry }}"
    filename: "{{ r.filename|default(omit) }}"
    mode: "{{ needs_auth|ternary('0600', '0644') }}"
    state: present
    update_cache: no
  with_items: "{{ apt_repository_list }}"
  vars:
    _file: "{{ lookup('env', 'EDB_REPO_CREDENTIALS_FILE') or '' }}"
    _credentials: "{{ _file and lookup('file', _file) or '' }}"
    repos: "{{ default_apt_repositories|combine(apt_repositories) }}"
    r: "{{ repos[item] }}"
    needs_auth: "{{
      item == 'EDB' and ansible_distribution_release in ['jessie', 'stretch']
    }}"
    repo_entry: "{{
      needs_auth|ternary(
        r.repo|regex_replace('https://', 'https://%s@' % _credentials), r.repo
      )
    }}"
  no_log: "{{ needs_auth }}"

- name: Ensure old EDB sources.list.d entry is absent
  file:
    path: "/etc/apt/sources.list.d/apt_enterprisedb_com_{{ ansible_distribution_release }}_edb.list"
    state: absent

- name: Configure authentication for EDB repository
  copy:
    content: >
      machine apt.enterprisedb.com login {{ _credentials[0] }} password {{ _credentials[1] }}
    dest: /etc/apt/auth.conf.d/edb.conf
    owner: root
    group: root
    mode: 0600
  vars:
    _file: "{{ lookup('env', 'EDB_REPO_CREDENTIALS_FILE') }}"
    _credentials: "{{ lookup('file', _file).split(':', 1) }}"
  when: >
    'EDB' in apt_repository_list
    and ansible_distribution_major_version is version('10', '>=')
  no_log: true

- name: Raise pin priority for 2ndQuadrant packages
  template:
    src: 2ndquadrant-pins.j2
    dest: /etc/apt/preferences.d/2ndquadrant-pins
    owner: root
    group: root
    mode: 0644

- set_fact:
    _2q_repositories: []

- name: Enumerate 2ndQuadrant repositories
  set_fact:
    _2q_repositories: "{{
      _2q_repositories|union([{
        'url': url,
        'file': file,
        'repo': item
      }])
    }}"
  with_items:
    - dl/default/release
    - "{{ tpa_2q_repositories|default([]) }}"
  when:
    tpa_2q_repositories is not defined or
    tpa_2q_repositories is not empty
  vars:
    token: "{{ lookup('env', 'TPA_2Q_SUBSCRIPTION_TOKEN') }}"
    volatile: "{{ use_volatile_subscriptions|ternary('/volatile', '') }}"
    urltemplate: "{{
      (item == 'dl/default/release')|ternary(
        'https://access.2ndquadrant.com/api/repository/{label}/deb{volatile}',
        'https://access.2ndquadrant.com/api/repository/{token}/{label}/deb{volatile}'
      )
    }}"
    url: >-
      {{ urltemplate.format(token=token, label=item, volatile=volatile) }}
    file: "/etc/apt/sources.list.d/2ndquadrant-{{ item|replace('/', '-') }}.list"

- name: Install 2ndQuadrant repositories
  shell: >
    curl -sS "{{ item.url }}" | bash
  args:
    executable: /bin/bash
    creates: "{{ use_volatile_subscriptions|ternary(omit, item.file) }}"
  register: reposub
  failed_when: >
    reposub.rc != 0 or 'error: ' in reposub.stdout.lower()
  with_items: "{{ _2q_repositories }}"
  loop_control:
    label: >-
      {{ item.repo }}

- include_tasks: repository-cleanup.yml
  vars:
    repository_path: /etc/apt/sources.list.d
    repository_files: "{{ _2q_repositories|map(attribute='file')|list }}"

- name: Update apt cache
  apt: update_cache=yes
