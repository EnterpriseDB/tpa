---

# Â© Copyright EnterpriseDB UK Limited 2015-2024 - All rights reserved.

# The first time we reach here on a new instance, we know only what
# distribution it is running, but we take nothing else for granted,
# including the presence of a usable Python interpreter.
#
# We invoke sys/bootstrap to check whether the basic requirements are
# satisfied, and install them otherwise; but instances without outside
# network access can't install anything that's missing, so we invoke
# sys/local_repo first (in such an environment, the local-repo must
# provide all packages required during deployment).

- include_role:
    name: sys/local_repo
  when: >
    task_selector|permits('local-repo')

# Now that all instances have a source of packages (either the network
# or the local-repo), we can check what's missing and install it. After
# this stage, we can run any Ansible modules we need.

- include_role:
    name: sys/bootstrap

# As system locale files are required by a substantial amount of software
# that can run after this point, make sure the default or user selected
# locale is available.

- include_role:
    name: sys/locale
  when: >
    task_selector|permits('locale')

# Now we set up package repositories, including {apt,yum}_repositories
# entries mentioned in {apt,yum}_repository_list (e.g., PGDG, EPEL), and
# any EDB/2ndQuadrant repositories we might need (tpa_2q_repositories).

- include_role:
    name: sys/repositories
  when: >
    task_selector|permits('repo')

# Once the repositories are available, we can install any other
# (non-Postgres-related) packages we need.

- include_role:
    name: sys/pkg
  when: >
    task_selector|permits('pkg')

- include_role:
    name: src/req
  when: >
    has_src_install
    and task_selector|permits('pkg')

- name: Set the hostname
  hostname:
    name: "{{ inventory_hostname }}"
    use: systemd
  when:
    platform not in ['docker', 'lxd']
    and target_container_type is not defined
    and task_selector|permits('hostname')

- name: Ensure authorized_keys allows admin access
  authorized_key:
    user: "{{ ansible_user|default('root') }}"
    key: "{{ lookup('file', cluster_dir|abspath_to(ssh_key_file + '.pub')) }}"
  when: ssh_key_file is defined

- include_tasks:
    file: tpa.yml
  when: >
    task_selector|permits('tpa')

# Creates and mounts any additional filesystems required, e.g., any
# postgres_data/barman_data volumes specified for the instance.

- include_role:
    name: sys/fs
  with_items: "{{ volumes }}"
  loop_control:
    loop_var: volume
    label: >-
      {{ volume.device }}
  when: >
    task_selector|permits('fs')

# Now that the any additional volumes have been mounted, we can copy in
# any additional artifacts specified in config.yml
- include_tasks:
    file: artifact.yml
  with_items: "{{ artifacts|default([]) }}"
  loop_control:
    loop_var: artifact
  when: >
    task_selector|permits('artifacts')

- include_role:
    name: sys/sysctl
  when: >
    platform not in ['docker', 'lxd']
    and target_container_type is not defined
    and task_selector|permits('sysctl')

- include_role:
    name: sys/sysstat
  when: >
    task_selector|permits('sysstat')

- include_role:
    name: sys/openvpn
  when: >
    platform not in ['docker', 'vagrant'] and
    'role_openvpn-server' in groups
    and task_selector|permits('openvpn')

- include_role:
    name: sys/hosts
  when: >
    task_selector|permits('hosts')

- include_role:
    name: sys/hostkeys
  when: >
    task_selector|permits('hostkeys')

- include_role:
    name: sys/cloudinit
  when: >
    platform not in ['docker', 'lxd', 'vagrant']
    and task_selector|permits('cloudinit')


# The sys/ssl role is incompatible with the legacy method of generating a
# certificate for postgres. When proper certificate authentication has been
# implemented and roles/postgres/user/tasks/tls.yml is gone this can be
# reactivated.

- include_role:
    name: sys/ssl

- include_role:
    name: sys/rsyslog
  when: >
    task_selector|permits('rsyslog')

- include_role:
    name: sys/logrotate
  when: >
    task_selector|permits('rsyslog')

- include_role:
    name: sys/ntp
  when: >
    task_selector|permits('ntp')

# https://github.com/CentOS/CentOS-Dockerfiles/issues/173
#
# Retained for compatibility with centos/systemd docker containers;
# harmless everywhere else.

- name: Ensure /run/nologin does not exist
  file:
    path: /run/nologin
    state: absent
  when:
    platform in ['docker']
    or target_container_type|default('unknown') == 'docker'

# RemoveIPC=no in logind.conf is necessary for source builds because
# they result in the postgres user having uid > 1000.

- name: Ensure RemoveIPC=no in logind.conf
  block:
    - name: Check whether systemd-logind is active
      command: systemctl is-active systemd-logind
      register: logind_state
      ignore_errors: true
    - name: Set RemoveIPC in logind.conf
      ini_file:
        dest: "/etc/systemd/logind.conf"
        section: "Login"
        option: RemoveIPC
        value: "no"
    - name: Restart logind if necessary
      systemd:
        name: systemd-logind
        state: restarted
      when: >
        logind_state.stdout == 'active'
  when: >
    'postgres' in role and postgres_installation_method == 'src'

- include_role:
    name: sys/paths
