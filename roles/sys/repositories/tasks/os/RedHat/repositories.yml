---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

- set_fact:
    yum_repository_list:
      "{{ yum_repository_list|default(default_yum_repository_list) }}"

# If we install the EDB repository RPM, all subsequent yum operations
# will fail until we add authentication information to the baseurl in
# edb.repo. So if EDB is in the list, we move it to the end, so that
# other repositories can be installed, and the authentication can be
# configured by subsequent tasks.

- set_fact:
    yum_repository_list: "{{
        yum_repository_list
        |reject('equalto', 'EDB')
        |list|union(['EDB'])
      }}"
  when:
    - "'EDB' in yum_repository_list"
    - yum_repository_list|last != 'EDB'

- name: Ensure repository list is defined
  assert:
    msg: "Repository {{ item }} is not defined in yum_repositories"
    that: item in default_yum_repositories|combine(yum_repositories)
  with_items: "{{ yum_repository_list }}"

# We loop over yum_repositories and install each repository definition.
# If the entry specifies an rpm_url, add-repository-rpm will install it;
# otherwise add-repository will create a .repo file using the given
# baseurl/gpgkey entries.

- name: Install YUM repositories
  include_tasks:
    file: "add-repository{{ '-rpm' if repo.rpm_url is defined else '' }}.yml"
  with_items: "{{ yum_repository_list }}"
  loop_control:
    loop_var: r
  vars:
    repos: "{{ default_yum_repositories|combine(yum_repositories) }}"
    repo_name: "{{ r }}"
    repo: "{{ repos[r] }}"

- name: Ensure edb.repo is not world-readable
  file:
    path: /etc/yum.repos.d/edb.repo
    owner: root
    group: root
    mode: "0600"
  when: >
    'EDB' in yum_repository_list

# We edit only the [edb] repo entry, because lineinfile will change only
# one line matching the regexp. The edb-testing repo is disabled anyway.

- name: Configure authentication for EDB repository
  lineinfile:
    path: /etc/yum.repos.d/edb.repo
    regexp: '^baseurl=https://([^:]*):([^@]*)@yum.enterprisedb.com(/edb/.*)$'
    line: >-
      baseurl=https://{{ _credentials }}@yum.enterprisedb.com\3
    backrefs: yes
    state: present
  vars:
    _file: "{{ lookup('env', 'EDB_REPO_CREDENTIALS_FILE') }}"
    _contents: "{{ lookup('file', _file) }}"
    _parts: "{{ _contents.split(':', 1) }}"
    _credentials: "{{ _parts[0]|urlencode }}:{{ _parts[1]|urlencode }}"
  when: >
    'EDB' in yum_repository_list
  no_log: true

# Following the instructions in
# https://wiki.postgresql.org/wiki/YUM_Installation, we exclude
# postgresql from the base repositories.

- name: Exclude postgresql packages from the base repository
  ini_file:
    dest: /etc/yum/pluginconf.d/rhnplugin.conf
    create: no
    section: main
    option: exclude
    value: "postgresql* barman* repmgr*"
  register: _task
  failed_when: _task is not successful and _task.rc != 257
  when: ansible_distribution_id == "rhel"

- name: Exclude postgresql packages from CentOS base repositories
  ini_file:
    dest: "/etc/yum.repos.d/{{ item.0.file }}"
    create: no
    section: "{{ item.1 }}"
    option: exclude
    value: "postgresql* barman* repmgr*"
  with_nested_dependents:
  - base_repos[ansible_distribution_major_version|int]
  - item.0.sections
  when: ansible_distribution_id == "centos"
  register: exclude
  failed_when:
    exclude is not successful and exclude.rc != 257
  vars:
    base_repos:
      7:
      - file: CentOS-Base.repo
        sections:
        - base
        - updates
      8:
      - file: CentOS-Base.repo
        sections:
        - BaseOS
      - file: CentOS-AppStream.repo
        sections:
        - AppStream
      - file: CentOS-Linux-BaseOS.repo
        sections:
        - baseos
      - file: CentOS-Linux-AppStream.repo
        sections:
        - appstream

# The pgbouncer package from EPEL depends on python-psycopg2, which
# conflicts with our python2-psycopg2 package.

- name: Exclude pgbouncer package from the EPEL repository
  ini_file:
    dest: /etc/yum.repos.d/epel.repo
    create: no
    section: epel
    option: exclude
    value: "pgbouncer* barman* python2-barman python3-barman"
  when: >
    'EPEL' in yum_repository_list

- name: Disable builtin postgresql module for DNF
  shell: >
    if [[ -d /etc/dnf/modules.d ]]; then
      if ! grep -qx state=disabled {{ _module }}; then
        dnf -qy module disable postgresql;
        echo ok;
      fi;
    fi
  args:
    executable: /bin/bash
  vars:
    _module: /etc/dnf/modules.d/postgresql.module
  register: dnfmod
  changed_when: >
    dnfmod.stdout.strip() == 'ok'

# The PGDG repo RPM installs a pgdg-redhat-all.repo file that contains
# entries for all available repositories for every version of Postgres,
# with multiple repositories enabled by default.
#
# This is, unsurprisingly, a bad idea. We want to enable the entries
# relevant to our desired Postgres version, and disable other entries,
# without knowing in advance which entries there are or which ones are
# enabled already, and preferably without doing too much redudant work
# (because loops are expensive).
#
# We fetch a list of all entries that are enabled (some of which we may
# want to disable) as well as all pgdgNN repositories for the version we
# want to enable.

- name: Retrieve list of PGDG repository entries
  shell: >
    set -o pipefail &&
    test -f {{ _repo }} &&
    awk 'match($0, /^\[(.*)\]$/, t) { repo = t[1] }
    match($0, /^\[({{ _wanted }}.*)\]$/, t) { print t[1] }
    /^enabled *= *1$/ { print repo }' {{ _repo }}|sort -u
  args:
    executable: /bin/bash
  register: interesting_pgdg_repos
  changed_when: false
  when: >
    'PGDG' in yum_repository_list
  vars:
    _repo: /etc/yum.repos.d/pgdg-redhat-all.repo
    _wanted: "pgdg{{ postgres_versionNN }}"
  check_mode: no

- name: Disable PGDG repos for versions other than {{ postgres_version }}
  ini_file:
    dest: /etc/yum.repos.d/pgdg-redhat-all.repo
    create: no
    section: "{{ item }}"
    option: enabled
    value: "{{ (item in all_wanted_pgdg_repos|flatten)|ternary('1', '0') }}"
  with_items: "{{ enable_repos|flatten }}"
  when: >
    'PGDG' in yum_repository_list
  vars:
    rhel_extras: "{{
        (ansible_distribution_major_version|int > 7)
        |ternary(
          'pgdg-rhel' + ansible_distribution_major_version|string + '-extras',
          []
        )
      }}"
    enable_repos:
      - "{{ interesting_pgdg_repos.stdout_lines }}"
      - pgdg-common
      - "{{ rhel_extras }}"
    wanted_pgdg_repo: "pgdg{{ postgres_versionNN }}"
    all_wanted_pgdg_repos:
      - "{{ wanted_pgdg_repo }}"
      - "{{ wanted_pgdg_repo }}-debuginfo"
      - pgdg-common
      - "{{ rhel_extras }}"

- name: Determine if PGDG is being used by itself or with EDB repositories
  set_fact:
    edb_repos_in_use:
      "{{ (edb_repositories is not empty
            and 'community360' not in edb_repositories) }}"

- name: Exclude barman-related packages from PGDG-common repos
  ini_file:
    dest: /etc/yum.repos.d/pgdg-redhat-all.repo
    create: no
    section: pgdg-common
    option: exclude
    value: "barman* python3-barman"
  when: >
    'PGDG' in yum_repository_list
    and postgres_version is version('9.6', '>')
    and edb_repos_in_use

- name: Find existing EDB repositories
  find:
    paths: /etc/yum.repos.d/
    patterns: 'enterprisedb-*.repo'
    file_type: "file"
  register: existing_edb_repos

- name: Remove unwanted EDB repositories
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ existing_edb_repos.files }}"
  loop_control:
    label: "{{ item.path | basename }}"
  vars:
    # enterprisedb-repo.repo => [enterprisedb, repo]
    repo: "{{ item.path|basename|split('.')|first|split('-') }}"
  when: >
    repo[1] not in edb_repositories

- name: Find remaining EDB repositories after removing unwanted ones
  find:
    paths: /etc/yum.repos.d/
    patterns: 'enterprisedb-*.repo'
    file_type: "file"
  register: remaining_edb_repos

- name: Create list of EDB repositories that are already set up
  set_fact:
    resulting_edb_repos: "{{ resulting_edb_repos|default([])|union([repo]) }}"
  loop: "{{ remaining_edb_repos.files }}"
  loop_control:
    label: "{{ item.path|basename }}"
  vars:
    repo: "{{ item.path|basename|split('.')|first|split('-')|last }}"

- name: Set up new EDB repositories
  include_tasks: add-edb-repository.yml
  loop: "{{ repos_to_install }}"
  when: repos_to_install != []
  vars:
    repos_to_install: "{{ edb_repositories|difference(resulting_edb_repos|default([])) }}"
    repository: "{{ item }}"
    package_format: rpm

- name: Exclude psycopg2 packages from PGDG repos
  ini_file:
    dest: /etc/yum.repos.d/pgdg-redhat-all.repo
    create: no
    section: "pgdg{{ postgres_versionNN }}"
    option: exclude
    value: python-psycopg2 python2-psycopg2 python3-psycopg2
  when: >
    'PGDG' in yum_repository_list
    and postgres_version is version('9.6', '>')
    and edb_repos_in_use

- name: Exclude psycopg2 packages from PGDG-common repos
  ini_file:
    dest: /etc/yum.repos.d/pgdg-redhat-all.repo
    create: no
    section: "pgdg-common"
    option: exclude
    value: "python-psycopg2 python2-psycopg2 python3-psycopg2 barman* python2-barman python3-barman"
  when: >
    'PGDG' in yum_repository_list
    and postgres_version is version('9.6', '<=')
    and edb_repos_in_use

# The extras repo on RHEL 7 supplies etcd packages for patroni

- name: Enable the RHEL 7 RHUI extras repo if available
  ini_file:
    dest: "/etc/yum.repos.d/{{ _repo_path }}.repo"
    create: no
    section: "{{ _section }}"
    option: enabled
    value: '1'
  vars:
    _repo_path: "{{
        rhel_7_extras_repo_path|default(
          (ansible_distribution_id == 'centos')|ternary(
            'CentOS-Base',
            'redhat-rhui'
          )
        )
      }}"
    _section: "{{
        rhel_7_extras_repo_section|default(
          (ansible_distribution_id == 'centos')|ternary(
            'extras',
            'rhel-7-server-rhui-extras-rpms'
          )
        )
      }}"
  when:
    ansible_distribution_major_version|int == 7
    and failover_manager == 'patroni'

# Some extension packages require extra repositories to be set up to install dependencies

- include_tasks: extension-repositories.yml
