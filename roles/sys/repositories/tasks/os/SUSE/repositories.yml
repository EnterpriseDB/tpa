---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

- set_fact:
    suse_repository_list:
      "{{ suse_repository_list|default(default_suse_repository_list) }}"

# no need to worry about the repository called "EDB"

- name: Ensure repository list is defined
  assert:
    msg: "Repository {{ item }} is not defined in suse_repositories"
    that: item in default_suse_repositories|combine(suse_repositories)
  with_items: "{{ suse_repository_list }}"

- name: Add PGDG keys if required
  shell: >
    rpm --import https://zypp.postgresql.org/keys/PGDG-RPM-GPG-KEY-SLES{{ ansible_distribution_major_version }}
  when: >
    'PGDG' in suse_repository_list|default(default_suse_repository_list)

- name: Install SUSE repositories
  shell: zypper --non-interactive install -y {{ repo.rpm_url }}
  with_items: "{{ suse_repository_list }}"
  loop_control:
    loop_var: r
  vars:
    repos: "{{ default_suse_repositories|combine(suse_repositories) }}"
    repo_name: "{{ r }}"
    repo: "{{ repos[r] }}"
  ignore_errors: true

- name: Find existing EDB repositories
  find:
    paths: /etc/zypp/repos.d/
    patterns: 'enterprisedb-*.repo'
    file_type: "file"
  register: existing_edb_repos

- name: Remove unwanted EDB repositories
  file:
    name: "{{ item.path }}"
    state: absent
  loop: "{{ existing_edb_repos.files }}"
  loop_control:
    label: "{{ item.path | basename }}"
  vars:
    # enterprisedb-repo-arch.repo => [enterprisedb, repo, arch]
    repo: "{{ item.path|basename|split('.')|first|split('-') }}"
  when: >
    repo[1] not in edb_repositories

- name: Install EDB repositories for {{ ansible_architecture }}
  zypper_repository:
    name: "{{ repo.name }}"
    repo: "{{ repo.uri }}"
    runrefresh: true
    auto_import_keys: true
    priority: 50
  with_items: "{{ edb_repositories}} "
  loop_control:
    loop_var: repository
  vars:
    repo:
      uri: https://downloads.enterprisedb.com/{{ edb_repos_token }}/{{ repository }}/rpm/sles/{{ ansible_distribution_major_version }}/{{ ansible_architecture }}/
      name: enterprisedb-{{ repository }}-{{ ansible_architecture }}

- name: Install EDB repositories for noarch
  zypper_repository:
    name: "{{ repo.name }}"
    repo: "{{ repo.uri }}"
    runrefresh: true
    auto_import_keys: true
    priority: 50
  with_items: "{{ edb_repositories}} "
  loop_control:
    loop_var: repository
  vars:
    repo:
      uri: https://downloads.enterprisedb.com/{{ edb_repos_token }}/{{ repository }}/rpm/sles/{{ ansible_distribution_major_version }}/noarch/
      name: enterprisedb-{{ repository }}-noarch

  # Some extension packages require extra repositories to be set up to install dependencies

- include_tasks: extension-repositories.yml

- when: postgres_flavour == 'epas'
  block:
  - name: Install SUSEConnect
    zypper:
      name: SUSEConnect
      state: present

  - name: Check registration status
    command:
      cmd: SUSEConnect --status-text
    register: registration_status

  - when: >
      "Not Registered" in registration_status.stdout
    block:
    - name: Check registration code is available
      assert:
        that: lookup('env', 'SLES_REG_TOKEN') != ""
        msg: "A SLES registration code is required to use EPAS on this system"

    - name: Register system with SUSEConnect
      command:
        cmd: SUSEConnect -r {{ lookup('env', 'SLES_REG_TOKEN') }}


  - name: Install extra repositories from PackageHub
    command:
      cmd: SUSEConnect -p {{ repo }}
    vars:
      repo: "PackageHub/{{ ansible_distribution_version }}/{{ ansible_architecture }}"
    when:
      repo not in registration_status.stdout
