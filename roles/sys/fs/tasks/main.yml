---

# Copyright Â© 2ndQuadrant Limited <info@2ndquadrant.com>

# Given a block device name and a mountpoint, does everything required
# to make the volume available for use immediately and after subsequent
# reboots.

- name: Ensure filesystem configuration is specified
  assert:
    msg: "Please specify at least the device name and mountpoint"
    that:
      - volume is defined
      - volume.device is defined
      - volume.mountpoint is defined

- block:
  - include_role: name=secret
    vars:
      secret_name: "{{ encryption }}_passphrase"

  - name: Set up encryption on {{ _device }}
    include_tasks: "{{ encryption }}.yml"
    vars:
      luks_device: "{{ _device }}"
      luks_volume: "{{ volume.luks_volume|default(_device|basename) }}"

  - name: Set noauto in mount options for {{ _device }}
    set_fact:
      _mountopts: "noauto{% if _mountopts %},{{ _mountopts }}{% endif -%}"
    when: >
      'noauto' not in _mountopts
  when: volume.encryption|default('none') != 'none'

- name: Set readahead on {{ _device }} to {{ '%d' % ((_readahead|int)/2048) }}MB
  shell: >
    blockdev --getra "{{ _device }}" &&
    blockdev --setra "{{ _readahead }}" "{{ _device }}"
  args:
    executable: /bin/bash
  register: setra
  changed_when: >
    setra is successful and setra.stdout != _readahead|string

- name: Set readahead on {{ _device }} at startup
  lineinfile:
    path: /etc/tpa/rc.local
    line: >-
      blockdev --setra "{{ _readahead }}" "{{ _device }}"
    state: present
    insertafter: EOF

- name: Create filesystem on {{ _device }}
  filesystem:
    dev: "{{ _device }}"
    fstype: "{{ _fstype }}"
    opts: "{{ volume.fsopts|default(omit) }}"

- name: Mount {{ _device }} under {{ volume.mountpoint }}
  mount:
    src: "{{ _device }}"
    name: "{{ volume.mountpoint }}"
    fstype: "{{ _fstype }}"
    opts: "{{ _mountopts }}"
    state: mounted

- name: Ensure {{ volume.mountpoint }} has the correct ownership and mode
  file:
    path: "{{ volume.mountpoint }}"
    owner: "{{ volume.owner|default(omit) }}"
    group: "{{ volume.group|default(omit) }}"
    mode: "{{ volume.mode|default(omit) }}"
    state: directory
  when:
    volume.owner is defined or volume.group is defined
    or volume.mode is defined
