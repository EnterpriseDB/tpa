---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

# Replication set configuration:
#
# - publication_sets defines the replication sets that must exist (these
# are configured on the first_bdr_primary and replicated to other nodes)
# - subscription_sets defines the replication sets that each node wants
# to subscribe to
#
# (We handle these together because we want to alter node subscriptions
# before dropping unsed replication sets from publications.)
#
# The first_bdr_primary will now fetch existing replication sets and
# create or alter replication sets to match publication_sets.

- include_tasks: bdr3/replication-set-define.yml
  when:
    inventory_hostname == first_bdr_primary

# Now each node can check and alter, if required, which replication sets
# it subscribes to. We must always subscribe to the default replication
# set for the group, because DDL replication won't work otherwise. Note
# that the first time this happens is before the group join.

- name: Fetch current subscription details
  postgresql_query:
    conninfo: "{{ dsn|dbname(bdr_database) }}"
    queries:
    - text: >
        SELECT coalesce({{ _repsets }}, '{}'::text[]) as replication_sets
        FROM bdr.local_node_summary N JOIN bdr.node_local_info I USING (node_id)
        WHERE node_name = %s
      args:
      - "{{ bdr_node_name }}"
  register: subscribed
  become_user: "{{ postgres_user }}"
  become: yes
  vars:
    _repsets: "{{
        (bdr_version_num >= 30700)|ternary('N.sub_repsets', 'replication_sets')
      }}"

- name: Alter subscription to include desired replication sets
  postgresql_query:
    conninfo: "{{ dsn|dbname(bdr_database) }}"
    queries:
      - text: SELECT bdr.alter_node_replication_sets(node_name := %s, set_names := %s)
        args:
          - "{{ bdr_node_name }}"
          - "{{ wanted_sets }}"
  vars:
    default_repsets: >-
      {{ [bdr_node_group, bdr_child_group]|select('defined')|list }}
    maybe_default_repsets: >-
      {{ ('witness' in role)|ternary([], default_repsets) }}
    wanted_sets: >-
      {{ subscription_sets|union(maybe_default_repsets) }}
    subscribed_sets: >-
      {{ subscribed.replication_sets|default([])|union(maybe_default_repsets) }}
  when:
    subscribed_sets|symmetric_difference(wanted_sets) is not empty
    and (bdr_version_num < 50000 or 'witness' not in role)
  changed_when: true
  become_user: "{{ postgres_user }}"
  become: yes

# Finally, we can now remove any replication sets that exist but are not
# mentioned in publication_sets (except the default replication set).

- include_tasks: bdr3/replication-set-remove.yml
  when:
    inventory_hostname == first_bdr_primary
