---

# © Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

- name: Configure BDR commit scopes (v4.1+ only)
  include_tasks:
    file: commit-scopes.yml
  when:
    bdr_commit_scopes|default([]) is not empty
    and inventory_hostname == first_bdr_primary
    and task_selector|permits('commit-scopes')

# XXX We don't handle setting default_commit_scope for groups in BDRv4
# at present, since bdr.alter_node_group_option() is not available.

- assert:
    msg: All CAMO pairs must be symmetric in BDR4+
    that:
      - hostvars[bdr_node_camo_partner].bdr_node_camo_partner is defined
      - hostvars[bdr_node_camo_partner].bdr_node_camo_partner == inventory_hostname
  when:
    bdr_node_camo_partner is defined

- assert:
    that:
      - hostvars[bdr_node_camo_partner].bdr_camo_use_raft_for_local_mode is defined
      - hostvars[bdr_node_camo_partner].bdr_camo_use_raft_for_local_mode
        == bdr_camo_use_raft_for_local_mode
    msg: >
      CAMO pairs must set bdr_camo_use_raft_for_local_mode to the same
      value on both instances
  when:
    - bdr_node_camo_partner is defined
    - bdr_camo_use_raft_for_local_mode is defined

# This function returns the name of the current CAMO partner when
# executed on a node that has a CAMO partner, i.e., a node that was
# mentioned in a previous .add_camo_pair() call. If there is no CAMO
# partner, it returns NULL.

- name: Fetch current CAMO partner, if any
  postgresql_query:
    conninfo: "{{ dsn|dbname(bdr_database) }}"
    query: >
      SELECT bdr.get_configured_camo_partner() as partner
  register: _camo_query
  become_user: "{{ postgres_user }}"
  become: yes

# If we currently have a CAMO partner, but expect to have no partner or
# a different partner, we must call bdr.remove_camo_pair() to remove the
# association. We must call this function only once per CAMO pair, so we
# must ensure that only one partner in the symmetric pair executes it.

- name: Remove unwanted CAMO pair
  postgresql_query:
    conninfo: "{{ dsn|dbname(bdr_database) }}"
    queries:
      - text: >
          SELECT bdr.remove_camo_pair(node_group := %s, left_node := %s, right_node := %s)
        args:
          - "{{ bdr_node_group }}"
          - "{{ inventory_hostname }}"
          - "{{ _camo_query.partner }}"
  become_user: "{{ postgres_user }}"
  become: yes
  when:
    _camo_query.partner != None
    and (bdr_node_camo_partner is not defined
      or bdr_node_camo_partner != _camo_query.partner)
    and inventory_hostname == [inventory_hostname, _camo_query.partner]|sort|first

# If bdr_node_camo_partner is set, we expect to have a CAMO partner; but
# if we have no partner or a different partner (which the previous task
# would have removed), we must call bdr.add_camo_pair() to create the
# association—but again, only once per CAMO pair.

- name: Add configured CAMO pair
  postgresql_query:
    conninfo: "{{ dsn|dbname(bdr_database) }}"
    queries:
      - text: >
          SELECT bdr.add_camo_pair({{ argument_string }})
        args:
          "{{ argument_values|flatten }}"
  vars:
    have_bcurflm:
      "{{ bdr_version_num >= 40100 and bdr_camo_use_raft_for_local_mode is defined }}"
    argument_keys:
      - node_group
      - left_node
      - right_node
      - "{{ 'require_raft' if have_bcurflm else [] }}"
    argument_string: >
      {{ argument_keys|flatten|map('apply_format', '{0} := %s')|list|join(', ') }}
    argument_values:
      - "{{ bdr_node_group }}"
      - "{{ inventory_hostname }}"
      - "{{ bdr_node_camo_partner }}"
      - "{{ bdr_camo_use_raft_for_local_mode if have_bcurflm else [] }}"
  become_user: "{{ postgres_user }}"
  become: yes
  when:
    bdr_node_camo_partner is defined
    and (_camo_query.partner == None
      or _camo_query.partner != bdr_node_camo_partner)
    and inventory_hostname == [inventory_hostname, bdr_node_camo_partner]|sort|first

# We must alter the CAMO configuration if bdr.camo_pairs.require_raft is
# different from bdr_camo_use_raft_for_local_mode.

- name: Update CAMO pair configuration if required
  block:
  - name: Fetch current require_raft setting for this CAMO pair
    postgresql_query:
      conninfo: "{{ dsn|dbname(bdr_database) }}"
      queries:
        - text: >
            SELECT require_raft
              FROM bdr.camo_pairs p
              LEFT JOIN bdr.node l ON p.left_node_id = l.node_id
              LEFT JOIN bdr.node r ON p.right_node_id = r.node_id
              WHERE (l.node_name = %(myself)s AND r.node_name = %(partner)s)
                 OR (r.node_name = %(myself)s AND l.node_name = %(partner)s)
          named_args:
            myself: "{{ inventory_hostname }}"
            partner: "{{ bdr_node_camo_partner }}"
    register: bcurflm_check
    failed_when:
      bcurflm_check is not successful
      or bcurflm_check.rowcount == 0

  - name: Update require_raft setting for this CAMO pair
    postgresql_query:
      conninfo: "{{ dsn|dbname(bdr_database) }}"
      queries:
        - text: >
            SELECT bdr.alter_camo_pair(
              node_group := %s, left_node := %s, right_node := %s,
              require_raft := %s
            )
          args:
            - "{{ bdr_node_group }}"
            - "{{ inventory_hostname }}"
            - "{{ bdr_node_camo_partner }}"
            - "{{ bdr_camo_use_raft_for_local_mode }}"
    changed_when: true
    when:
      bcurflm_check.require_raft != bdr_camo_use_raft_for_local_mode

  become_user: "{{ postgres_user }}"
  become: yes
  when:
    - bdr_version_num >= 40100
    - bdr_node_camo_partner is defined
    - bdr_camo_use_raft_for_local_mode is defined
    - inventory_hostname == [inventory_hostname, bdr_node_camo_partner]|sort|first

- name: Ensure that all BDR nodes have an appropriate node_kind set
  postgresql_query:
    conninfo: "{{ bdr_node_dsn }}"
    queries:
      - text: >
          SELECT bdr.alter_node_kind(node_name := %s, node_kind := %s)
            FROM bdr.node where node_name = %s and node_kind = 0;
        args:
          - "{{ this_bdr_node_name }}"
          - "{{ bdr_node_role|bdr_node_kind }}"
          - "{{ this_bdr_node_name }}"
  become_user: "{{ postgres_user }}"
  become: yes
  with_items: "{{ groups['role_bdr'] }}"
  loop_control:
    loop_var: bdr_node
    label: >-
      {{ bdr_node }}:{{ bdr_node_role|bdr_node_kind }}
  vars:
    this_bdr_node_name: "{{ hostvars[bdr_node].bdr_node_name }}"
    bdr_node_role: "{{ hostvars[bdr_node].role }}"
  when:
    - inventory_hostname == first_bdr_primary
    - bdr_version_num >= 40300

