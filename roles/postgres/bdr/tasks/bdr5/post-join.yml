---

# Â© Copyright EnterpriseDB UK Limited 2015-2023 - All rights reserved.

- name: Configure BDR commit scopes (v4.1+ only)
  include_tasks:
    file: bdr4/commit-scopes.yml
    apply:
      tags: commit-scopes
  when:
    bdr_commit_scopes|default([]) is not empty
    and inventory_hostname == first_bdr_primary

# Set the default commit_scope for any groups that need it, now that the
# commit scopes have been set up. (Note that setting the default commit
# scope for a group is a CAMO-specific action, even though commit scopes
# themselves are not.)

- name: Set default commit scope for BDR node groups, if necessary
  include_tasks: bdr5/alter_node_group_option.yml
  with_items: "{{ bdr_node_groups }}"
  loop_control:
    label: >-
      {{ item.name }}:{{ scope_name }}
  vars:
    node_group_name: "{{ item.name }}"
    config_key: default_commit_scope
    catalog_key: commit_scope
    config_value: "{{ scope_name }}"
    scope_name:
      "{{ item|try_subkey('options.default_commit_scope') }}"
    this_group_facts:
      "{{ bdr_database_facts.bdr.node_group_summary
          |selectattr('node_group_name', 'equalto', item.name)
          |list }}"
  when:
    - inventory_hostname == first_bdr_primary
    - "'default_commit_scope' in item.options|default({})"
    - this_group_facts is empty
      or this_group_facts[0][catalog_key] != scope_name

# Process any entries in bdr_node_groups for which 'enable_raft' is set.
# Now that the group joins have been completed, we can enable subgroup
# raft. (Disabling it once it's enabled is not supported by BDR.)

- name: Enable subgroup raft for BDR node groups, if necessary
  include_tasks: bdr5/alter_node_group_option.yml
  with_items: "{{ bdr_node_groups }}"
  loop_control:
    label: >-
      {{ item.name }}:{{ enable_raft }}
  vars:
    node_group_name: "{{ item.name }}"
    config_key: enable_raft
    config_value: "{{ enable_raft }}"
    enable_raft:
      "{{ item|try_subkey('options.enable_raft', False)|bool }}"
    this_group_facts:
      "{{ bdr_database_facts.bdr.node_group_summary
          |selectattr('node_group_name', 'equalto', item.name)
          |list }}"
  when:
    - inventory_hostname == first_bdr_primary
    - item.name != bdr_node_group
    - enable_raft is true
    - this_group_facts is empty
      or this_group_facts[0].enable_raft is false

# We would like to set node options immediately after creating the node,
# but that currently doesn't work, so we do it here.

- name: Set BDR node options, if required
  include_tasks: bdr5/alter_node_option.yml
  vars:
    _default_options:
      route_dsn: "{{ bdr_node_route_dsn }}"
  with_dict:
    "{{ _default_options|combine(bdr_node_options) }}"
  loop_control:
    loop_var: node_option
    label: >
      {{ node_option.key }}:{{ node_option.value }}

- name: Perform pgd_proxy setup
  include_tasks:
    file: "bdr{{ bdr_major_version }}/pgd-proxy-config.yml"
    apply:
      tags: pgd-proxy
  when:
    bdr_major_version >= 5
    and inventory_hostname == first_bdr_primary
    and groups['role_pgd-proxy']|default([]) is not empty
  tags: pgd-proxy

# Finally, we can `enable_proxy_routing` for those groups where it's
# desired and for which subgroup RAFT is also enabled.

- name: Enable or disable proxy routing for BDR node groups, if necessary
  include_tasks: bdr5/alter_node_group_option.yml
  with_items: "{{ bdr_node_groups }}"
  loop_control:
    label: >-
      {{ item.name }}:{{ enable_proxy_routing }}
  vars:
    node_group_name: "{{ item.name }}"
    config_key: enable_proxy_routing
    config_value: "{{ enable_proxy_routing }}"
    enable_raft:
      "{{ item|try_subkey('options.enable_raft', False)|bool }}"
    enable_proxy_routing:
      "{{ item|try_subkey('options.enable_proxy_routing', False)|bool }}"
    this_group_facts:
      "{{ bdr_database_facts.bdr.node_group_summary
          |selectattr('node_group_name', 'equalto', item.name)
          |list }}"
  when:
    - inventory_hostname == first_bdr_primary
    - enable_raft is true
      or item.name == bdr_node_group
    - this_group_facts is empty
      or this_group_facts[0].enable_proxy_routing != enable_proxy_routing
