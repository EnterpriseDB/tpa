---

# © Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

# We are here because this instance has bdr+primary in its role. BDR
# packages have been installed, shared_preload_libraries contains 'bdr',
# BDR configuration has been installed, Postgres is running, and the BDR
# extension has been created (in template1).
#
# We don't need to handle bdr+replica instances here (they are ordinary
# streaming replicas and don't need BDR-specific initialisation anyway),
# but we do handle "logical standby" instances with bdr+primary+readonly
# in role.

- include_tasks: validate.yml

# Now one node must create a BDR group, and the other nodes must join
# the group. It doesn't matter which node creates the group, so long as
# all the nodes make the same decision about which one should create it.
#
# Every BDR instance has "bdr_node_group" set in config.yml to indicate
# which BDR group it should be a member of. In roles/platform/common, we
# created Ansible inventory groups based on the value of bdr_node_group
# for each instance, and designated the first host in each group as the
# "first_bdr_primary".
#
# On each BDR instance, groups[bdr_node_group] now evaluates to a list
# of the members of the BDR node group, and first_bdr_primary evaluates
# to the arbitrarily chosen "leader" of that group. (Since each instance
# uses its own value of bdr_node_group to compute this information, this
# scheme works even when config.yml specifies disjoint BDR groups, i.e.,
# when all the instances do not have the same value for bdr_node_group.)
#
# BDR1/BDR2 do not support group names, but we set bdr_node_group anyway
# to enable the behaviour described above. The name just isn't used for
# anything else.
#
# The commands to create and join the group are version-dependent.
#
## BDR1, BDR2
#
# First host:
#     bdr.bdr_group_create(local_node_name := '…',
#                          node_external_dsn := '…')
#     bdr.bdr_node_join_wait_for_ready()
#
# Other hosts:
#     bdr.bdr_group_join(local_node_name := '…',
#                        node_external_dsn := '…',
#                        join_using_dsn := '…')
#     bdr.bdr_node_join_wait_for_ready()
#
## BDR3, BDR4
#
# All hosts:
#     bdr.create_node(node_name := '…', local_dsn := '…')
#
# First host:
#     bdr.create_node_group(node_group_name := '…')
#
# Other hosts:
#     bdr.join_node_group(join_target_dsn := '…')
#     -- bdr.wait_for_join_completion() is no longer required because
#     -- bdr.join_node_group() will wait for completion by default, but
#     -- it does no harm to leave it in (it will return immediately if
#     -- the join has completed).

- block:
    - include_tasks: "bdr{{ bdr_major_version }}/init.yml"
    - include_tasks: "bdr{{ bdr_major_version }}/join.yml"
      when:
        inventory_hostname == first_bdr_primary
    - include_tasks: "bdr{{ bdr_major_version }}/post-join.yml"
  vars:
    bdr_database_facts: "{{ cluster_facts.databases[bdr_database] }}"

- name: Change Postgres configuration if required
  include_tasks:
    file: postgres-reconfig.yml
  when: >
    task_selector|permits('config')

