---

# Copyright © 2ndQuadrant Limited <info@2ndquadrant.com>

# We are here because this instance has role bdr+primary (as opposed to
# bdr+replica, which is a read-only streaming replica of a bdr+primary
# node). BDR packages have been installed, shared_preload_libraries
# contains 'bdr', BDR configuration has been installed, and the BDR
# extension has been created (in template1).
#
# First, each node needs a BDR database.

- name: Create BDR database
  postgresql_db:
    port: "{{ postgres_port }}"
    name: "{{ bdr_database }}"
    owner: "{{ postgres_user }}"
    state: present
  become_user: "{{ postgres_user }}"
  become: yes

# Next, we need to decide which flavour of BDR we're working with.
#
# BDR1: BDR-Postgres 9.4 only
# BDR2: BDR-Postgres 9.4, plus
#       {,2ndQ}Postgres 9.6
# BDR3: {,2ndQ}Postgres 10 only
#
# https://access.2ndquadrant.com/kb/a/comparison-of-logical-replication-solutions/
#
# We don't try to second-guess the decision taken by postgres/pkg about
# which versions of Postgres and BDR to install. We just detect what is
# available and do our best to work with it. Things will break if the
# installed combination is not sensible.
#
# Note: unfortunately, there do exist versions of BDR that do not have
# bdr_version_num(), but we choose not to support them, as they are of
# little or no practical importance (e.g., no customers use them).

- include_tasks: version.yml
  tags: always

# Now one node must create a BDR group, and the other nodes must join
# the group. It doesn't matter which node creates the group, so long as
# all the nodes make the same decision about which one should create it.
#
# We set the "bdr_node_group" host var for every node (in config.yml),
# so we can use that value to create a new Ansible inventory group of
# the nodes with the same value of bdr_node_group. Then we pick the
# first node in the host group to create the BDR group.
#
# There are two points to note here:
#
# 1. The common case is that all of the bdr+primary nodes have the same
#    value for bdr_node_group; we will create a single group containing
#    all of these nodes.
#
#    However, if some nodes have different values of bdr_node_group, we
#    will create multiple groups here, but each node looks at the group
#    based on its own value of bdr_node_group, so we can set up disjoint
#    BDR groups in parallel if necessary.
#
# 2. BDR1/BDR2 do not actually support group names, but we require that
#    all nodes that are intended to belong to the same BDR group have
#    the same value set for bdr_node_group (to enable the behaviour
#    described above). The name just isn't used for anything else.

# The commands to create and join the group are version-dependent.
#
## BDR1, BDR2
#
# First host:
#     bdr.bdr_group_create(local_node_name := '…',
#                          node_external_dsn := '…')
#     bdr.bdr_node_join_wait_for_ready()
#
# Other hosts:
#     bdr.bdr_group_join(local_node_name := '…',
#                        node_external_dsn := '…',
#                        join_using_dsn := '…')
#     bdr.bdr_node_join_wait_for_ready()
#
## BDR3
#
# All hosts:
#     bdr.create_node(node_name := '…', local_dsn := '…')
#
# First host:
#     bdr.create_node_group(node_group_name := '…')
#
# Other hosts:
#     bdr.join_node_group(join_target_dsn := '…')
#     -- bdr.wait_for_join_completion() is no longer required because
#     -- bdr.join_node_group() will wait for completion by default, but
#     -- it does no harm to leave it in (it will return immediately if
#     -- the join has completed).

- name: BDR setup
  include_tasks:
    file: "bdr{{ bdr_major_version }}.yml"
    apply:
      tags: bdr

- name: Perform CAMO setup if required
  include_tasks:
    file: camo.yml
    apply:
      tags: camo
  when: bdr_node_camo_partner is defined
