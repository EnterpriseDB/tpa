---

# Â© Copyright EnterpriseDB UK Limited 2015-2023 - All rights reserved.

- name: Enumerate foreign servers required
  set_fact:
    foreign_servers:
    - name: bdr_server
      type: bdr
      fdw: postgres_fdw

# For now, we don't bother to look at any server that aren't using
# postgres_fdw.

- name: Find existing foreign servers
  postgresql_query:
    conninfo: "{{ dsn|dbname(bdr_database) }}"
    queries:
    - text: >
        SELECT coalesce(array_agg(srvname),'{}'::text[]) as existing_servers
        FROM pg_catalog.pg_foreign_server pfs
        JOIN pg_catalog.pg_foreign_data_wrapper pfdw ON (pfs.srvfdw=pfdw.oid)
        WHERE fdwname='postgres_fdw' AND srvname = ANY(%s)
      args:
      - "{{ foreign_servers|map(attribute='name')|list }}"
  register: pfs
  become_user: "{{ postgres_user }}"
  become: yes

- name: Create foreign servers if required
  postgresql_query:
    conninfo: "{{ dsn|dbname(bdr_database) }}"
    queries:
    - text: >
        CREATE SERVER {{ item.name }}
        {% if item.type is defined %}TYPE '{{ item.type }}'{% endif %}
        FOREIGN DATA WRAPPER {{ item.fdw }}
        {% if item.options is defined %}OPTIONS ('{{ item.options }}'){% endif %}
  become_user: "{{ postgres_user }}"
  become: yes
  with_items: "{{ foreign_servers }}"
  when:
    item.name not in pfs.existing_servers

- name: Find existing foreign server user mappings
  postgresql_query:
    conninfo: "{{ dsn|dbname(bdr_database) }}"
    queries:
    - text: >
        SELECT coalesce(array_agg(srvname),'{}'::text[]) as existing_mappings
        FROM pg_catalog.pg_user_mapping pum
        JOIN pg_catalog.pg_foreign_server pfs ON (pum.umserver=pfs.oid)
        JOIN pg_catalog.pg_foreign_data_wrapper pfdw ON (pfs.srvfdw=pfdw.oid)
        WHERE fdwname='postgres_fdw' AND srvname = ANY(%s)
      args:
      - "{{ foreign_servers|map(attribute='name')|list }}"
  register: pum
  become_user: "{{ postgres_user }}"
  become: yes

- name: Create user mappings if required
  postgresql_query:
    conninfo: "{{ dsn|dbname(bdr_database) }}"
    query: >
      CREATE USER MAPPING FOR PUBLIC SERVER {{ item.name }}
  become_user: "{{ postgres_user }}"
  become: yes
  with_items: "{{ foreign_servers }}"
  when:
    item.name not in pum.existing_mappings
