---

# © Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

# We process an entry from ``publications`` with ``type: pglogical`` and
# either create a new publication (i.e., a pglogical node and attendant
# replication sets) or alter an existing one. Here's an example of how
# to define a pglogical publication:
#
# publications:
# - type: pglogical
#   database: somedb
#   name: pglogical_node_name
#   replication_sets:
#   - name: replication_set_name
#     replicate_insert: true
#     replicate_update: true
#     replicate_delete: true
#     replicate_truncate: true
#     autoadd_tables: false
#     autoadd_sequences: false
#     autoadd_existing: false
#     tables:
#     - name: '"schema-name".sometable'
#       columns: [a, b, c]
#       row_filter: 'a > 42'
#       synchronize_data: true
#     sequences:
#     - name: someseq
#       synchronize_data: true
#
# The type and database name are required. The pglogical node name is
# optional, and defaults to hostname-dbname. The list of replication
# sets is optional, and within the replication set configuration,
# everything but the replication set name is optional.

- assert:
    msg: Publication must specify name, database, and type pglogical
    that:
    - pub.name is defined
    - pub.database is defined
    - pub.type|default('') == 'pglogical'

- assert:
    msg: >-
      Publication {{ pub.name }} must specify valid keys
      (got: {{ unrecognised_keys|join(',') }})
    that:
      unrecognised_keys is empty
  vars:
    unrecognised_keys: >
      {{ pub.keys()|list|difference(publication_keys) }}

- assert:
    msg: >-
      Publication {{ pub.name }} must specify a name for every
      entry in replication_sets
    that:
      pub.replication_sets is empty
      or unnamed_replication_sets is empty
  vars:
    unnamed_replication_sets: >
      {{ pub.replication_sets|map(attribute='name')|reject('defined')|list }}

- assert:
    msg: >-
      Replication set {{ set.name }} in publication {{ pub.name }}
      must specify valid keys (got: {{ unrecognised_keys|join(',') }})
    that:
      unrecognised_keys is empty
  vars:
    recognised_keys: >
      {{ replication_set_keys|union(replication_set_optional_arguments) }}
    unrecognised_keys: >
      {{ set.keys()|list|difference(recognised_keys) }}
  with_items: "{{ pub.replication_sets }}"
  loop_control:
    loop_var: set
    label: >-
      {{ set.name }}

# If the node does not exist in the given database, we create it now.
# (There can be only one pglogical node in any given database.)

- name: Ensure pglogical node exists
  include_tasks: node.yml
  vars:
    database: "{{ pub.database }}"
    node_name: "{{ pub.name }}"

# We fetch the names and attributes of all existing replication sets in
# the database in order to compare them with the desired configuration.

- name: Retrieve existing replication sets
  postgresql_query:
    conninfo: "{{ dsn|dbname(pub.database) }}"
    queries:
    - text: SELECT * FROM pglogical.replication_set WHERE set_nodeid = %s
      args:
        - "{{ pglogical_node_id }}"
  register: pub_repset_tuples
  become_user: "{{ postgres_user }}"
  become: yes

# We create any replication set that is named in pub.replication_sets
# but does not occur in pub_repset_tuples.results.
#
# We alter any replication set that is named in pub.replication_sets and
# is also in pub_repset_tuples, but whose attributes in the database are
# different from the configuration.
#
# Both create_replication_set() and alter_replication_set() accept the
# same arguments, except that ``autoadd_existing`` can be set only when
# the replication set is created.
#
# So we iterate over pub.replication_sets, check if the set name occurs
# in pub_repset_tuples, decide whether to create or alter the set, and
# assemble a string like "set_name := %s, p1 := %s, p2 := %s, …" and a
# corresponding list of values to pass to the function.
#
# The autoadd_* parameters are supported only in pglogical3. Don't
# specify them if you are using pglogical2, or the query will fail.

- name: Create or alter replication sets
  postgresql_query:
    conninfo: "{{ dsn|dbname(pub.database) }}"
    queries:
    - text: >-
        SELECT pglogical.{{ op }}_replication_set({{ argument_string }})
      args: "{{ argument_values }}"
  become_user: "{{ postgres_user }}"
  become: yes
  vars:
    match: >
      {{
        pub_repset_tuples.results
        |json_query("[?set_name=='%s']" % set.name)
        |first|default({})
      }}
    op: >-
      {{ (match is empty)|ternary('create', 'alter') }}
    required_keys:
      - set_name
    required_values:
      - "{{ set.name }}"
    optional_arguments: "{{
        set|remove_keys(replication_set_keys)
        |remove_keys(['autoadd_existing'] if op == 'alter' else [])
      }}"
    argument_keys: >
      {{ required_keys + optional_arguments.keys()|list }}
    argument_values: >
      {{ required_values + optional_arguments.values()|list }}
    argument_string: >
      {{ argument_keys|map('apply_format', '{0} := %s')|list|join(', ') }}
  with_items: "{{ pub.replication_sets }}"
  loop_control:
    loop_var: set
    label: >-
      {{ set.name }}
  when: >
    match is empty
    or set.replicate_insert|default(match.replicate_insert) != match.replicate_insert
    or set.replicate_delete|default(match.replicate_delete) != match.replicate_delete
    or set.replicate_update|default(match.replicate_update) != match.replicate_update
    or set.replicate_truncate|default(match.replicate_truncate) != match.replicate_truncate
    or (
      'set_autoadd_tables' in match
      and set.autoadd_tables|default(match.set_autoadd_tables) != match.set_autoadd_tables
    )
    or (
      'set_autoadd_seqs' in match
      and set.autoadd_sequences|default(match.set_autoadd_seqs) != match.set_autoadd_seqs
    )
  changed_when: true

# We remove any existing replication sets that are not mentioned in the
# publication, with the exception of the default replication sets that
# are created when the node is created.

- name: Remove unwanted replication_sets
  postgresql_query:
    conninfo: "{{ dsn|dbname(pub.database) }}"
    queries:
    - text: SELECT pglogical.drop_replication_set(set_name := %s)
      args:
      - "{{ item.set_name }}"
  become_user: "{{ postgres_user }}"
  become: yes
  with_items: "{{ pub_repset_tuples.results }}"
  loop_control:
    label: >-
      {{ item.set_name }}
  when:
    item.set_name not in pub.replication_sets|json_query('[*].name')
    and item.set_name not in ['default', 'default_insert_only', 'ddl_sql']
  changed_when: true

# Now that all the desired replication sets exist, we must deal with any
# tables and sequences assigned to each one.

- name: Adjust table membership for replication sets
  include_tasks:
    file: replication-set-tables.yml
  with_items: "{{ pub.replication_sets }}"
  loop_control:
    loop_var: set
    label: >-
      {{ set.name }}
  when:
    set.tables|default([]) is not empty

- name: Adjust sequence membership for replication sets
  include_tasks:
    file: replication-set-sequences.yml
  with_items: "{{ pub.replication_sets }}"
  loop_control:
    loop_var: set
    label: >-
      {{ set.name }}
  when:
    set.sequences|default([]) is not empty
