---

# Copyright Â© 2ndQuadrant Limited <info@2ndquadrant.com>

# We process an entry from ``publications`` with ``type: pglogical`` and
# either create a new publication (i.e., a pglogical node and attendant
# replication sets) or alter an existing one. Here's an example of how
# to define a pglogical publication:
#
# publications:
# - type: pglogical
#   database: somedb
#   name: pglogical_node_name
#   replication_sets:
#   - name: replication_set_name
#     replicate_insert: true
#     replicate_update: true
#     replicate_delete: true
#     replicate_truncate: true
#     autoadd_tables: false
#     autoadd_sequences: false
#     autoadd_existing: false
#     tables:
#     - name: '"schema-name".sometable'
#       columns: [a, b, c]
#       row_filter: 'a > 42'
#       synchronize_data: true
#     sequences:
#     - name: someseq
#       synchronize_data: true
#
# The type and database name are required. The pglogical node name is
# optional, and defaults to hostname-dbname. The list of replication
# sets is optional, and within the replication set configuration,
# everything but the replication set name is optional.
#
# If the node does not exist in the given database, we create it now.
# (There can be only one pglogical node in any given database.)

- assert:
    msg: "Publication must specify name and database"
    that:
    - pub.name is defined
    - pub.database is defined

- assert:
    msg: >-
      Publication {{ pub.name }}: expected valid keys,
      got: {{ unrecognised_keys|join(',') }}
    that:
      unrecognised_keys is empty
  vars:
    unrecognised_keys: >
      {{ pub.keys()|list|difference(publication_keys) }}

- name: Ensure pglogical node exists
  include_tasks: node.yml
  vars:
    database: "{{ pub.database }}"
    node_name: "{{ pub.name }}"

# We fetch all existing replication sets in the database, so that we can
# create, alter, or remove them according to the configuration.

- name: Retrieve existing replication sets
  postgresql_query:
    conninfo: "{{ node_dsn|dbname(pub.database) }}"
    queries:
    - text: SELECT * FROM pglogical.replication_set WHERE set_nodeid = %s
      args:
        - "{{ pglogical_node_id }}"
  register: pglogical_set_tuples
  become_user: "{{ postgres_user }}"
  become: yes

# Now we create any replication set that is mentioned in the publication
# but does not exist in the database.

- name: Create new replication sets
  postgresql_query:
    conninfo: "{{ node_dsn|dbname(pub.database) }}"
    queries:
    - text: >
        SELECT pglogical.create_replication_set(
          set_name := %s,
          replicate_insert := %s, replicate_delete := %s,
          replicate_update := %s, replicate_truncate := %s,
          autoadd_tables := %s, autoadd_sequences := %s,
          autoadd_existing := %s
        )
      args:
      - "{{ set.name }}"
      - "{{ set.replicate_insert }}"
      - "{{ set.replicate_delete }}"
      - "{{ set.replicate_update }}"
      - "{{ set.replicate_truncate }}"
      - "{{ set.autoadd_tables }}"
      - "{{ set.autoadd_sequences }}"
      - "{{ set.autoadd_existing }}"
  become_user: "{{ postgres_user }}"
  become: yes
  vars:
    set: "{{ replication_set_defaults|combine(item) }}"
    existing_sets: >
      {{ pglogical_set_tuples.results|json_query('[*].set_name') }}
  with_items: "{{ pub.replication_sets }}"
  loop_control:
    label: >-
      {{ item.name }}
  when:
    set.name not in existing_sets
  changed_when: True

# We modify any existing replication sets whose parameters are different
# from the configuration. (Note: autoadd_existing cannot be altered, it
# applies only when the replication set is created.)

- name: Alter existing replication sets if required
  postgresql_query:
    conninfo: "{{ node_dsn|dbname(pub.database) }}"
    queries:
    - text: >
        SELECT pglogical.alter_replication_set(
          set_name := %s,
          replicate_insert := %s, replicate_delete := %s,
          replicate_update := %s, replicate_truncate := %s,
          autoadd_tables := %s, autoadd_sequences := %s
        )
      args:
      - "{{ set.name }}"
      - "{{ set.replicate_insert }}"
      - "{{ set.replicate_delete }}"
      - "{{ set.replicate_update }}"
      - "{{ set.replicate_truncate }}"
      - "{{ set.autoadd_tables }}"
      - "{{ set.autoadd_sequences }}"
  become_user: "{{ postgres_user }}"
  become: yes
  vars:
    set: "{{ replication_set_defaults|combine(item) }}"
    matches: >
      {{ pglogical_set_tuples.results|json_query("[?set_name=='%s']" % item.name) }}
    match: >
      {{ matches[0]|default({}) }}
  with_items: "{{ pub.replication_sets }}"
  loop_control:
    label: >-
      {{ item.name }}
  when:
    match is not empty
    and [match.replicate_insert, match.replicate_delete,
         match.replicate_update, match.replicate_truncate,
         match.set_autoadd_tables, match.set_autoadd_seqs] !=
        [set.replicate_insert, set.replicate_delete,
         set.replicate_update, set.replicate_truncate,
         set.autoadd_tables, set.autoadd_sequences]
  changed_when: True

# We remove any existing replication sets that are not mentioned in the
# publication, with the exception of the default replication sets that
# are created when the node is created.

- name: Remove unwanted replication_sets
  postgresql_query:
    conninfo: "{{ node_dsn|dbname(pub.database) }}"
    queries:
    - text: SELECT pglogical.drop_replication_set(set_name := %s)
      args:
      - "{{ item.set_name }}"
  become_user: "{{ postgres_user }}"
  become: yes
  with_items: "{{ pglogical_set_tuples.results }}"
  loop_control:
    label: >-
      {{ item.set_name }}
  when:
    item.set_name not in pub.replication_sets|json_query('[*].name')
    and item.set_name not in ['default', 'default_insert_only', 'ddl_sql']
  changed_when: True

# Now that all the desired replication sets exist, we must deal with any
# tables and sequences assigned to each one.

- name: Adjust table membership for replication sets
  include_tasks:
    file: replication-set-tables.yml
  with_items: "{{ pub.replication_sets }}"
  loop_control:
    loop_var: set
    label: >-
      {{ set.name }}
  when:
    set.tables|default([]) is not empty

- name: Adjust sequence membership for replication sets
  include_tasks:
    file: replication-set-sequences.yml
  with_items: "{{ pub.replication_sets }}"
  loop_control:
    loop_var: set
    label: >-
      {{ set.name }}
  when:
    set.sequences|default([]) is not empty
