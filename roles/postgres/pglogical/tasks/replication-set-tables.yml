---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

- name: Retrieve tables currently in replication set {{ set.name }}
  postgresql_query:
    conninfo: "{{ dsn|dbname(pub.database) }}"
    queries:
    - text: SET search_path TO ''
    - text: >
        SELECT set_reloid, set_att_list
          FROM pglogical.replication_set_table rst
          JOIN pglogical.replication_set rs USING (set_id)
          WHERE rs.set_name = %s
      args:
      - "{{ set.name }}"
  register: table_tuples
  become_user: "{{ postgres_user }}"
  become: yes
  changed_when: false

# Any table mentioned in set.tables that is not already in table_tuples
# needs to be added to the replication set.

- name: Add tables to replication set {{ set.name }}
  postgresql_query:
    conninfo: "{{ dsn|dbname(pub.database) }}"
    queries:
    - text: >
        SELECT pglogical.replication_set_add_table(
          set_name := %s, relation := %s, synchronize_data := %s,
          columns := %s, row_filter := %s
        )
      args:
      - "{{ set.name }}"
      - "{{ rel.name }}"
      - "{{ rel.synchronize_data|default(false) }}"
      - "{{ rel.columns|default(omit) }}"
      - "{{ rel.row_filter|default(omit) }}"
  become_user: "{{ postgres_user }}"
  become: yes
  vars:
    rel_name: "{{
        'public.%s' % rel.name
          if '.' not in rel.name else rel.name
      }}"
    existing_tables: "{{
        table_tuples.results[1]|json_query('[*].set_reloid')
      }}"
  with_items: "{{ set.tables }}"
  loop_control:
    loop_var: rel
    label: >-
      {{ rel.name }}
  when:
    rel_name not in existing_tables
  changed_when: true

# For now, we ignore the possibility that the table is already a member
# of the replication set, but with a different configuration. In theory,
# we could remove the table and re-add it with the new configuration in
# the same transaction, but it's not clear if this is always a sensible
# thing to do.

# Any table that's in table_tuples but not in set.tables needs to be
# removed from the replication set.

- name: Remove unwanted tables from replication set {{ set.name }}
  postgresql_query:
    conninfo: "{{ dsn|dbname(pub.database) }}"
    queries:
    - text: >
        SELECT pglogical.replication_set_remove_table(
          set_name := %s, relation := %s
        )
      args:
      - "{{ set.name }}"
      - "{{ rel.set_reloid }}"
  become_user: "{{ postgres_user }}"
  become: yes
  with_items: "{{ table_tuples.results[1] }}"
  loop_control:
    loop_var: rel
    label: >-
      {{ rel.set_reloid }}
  vars:
    set_tables: >
      {{ set.tables|json_query('[*].name') }}
  when:
    rel.set_reloid not in set_tables
    and rel.set_reloid|regex_replace('^public\.', '') not in set_tables
  changed_when: true
