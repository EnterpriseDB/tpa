---

# © Copyright EnterpriseDB UK Limited 2015-2024 - All rights reserved.

- assert:
    msg: "Please define postgres_user (usually done by roles/facts)"
    that:
      - postgres_user is defined

# Distribution packages will almost certainly want to create the user
# and group, so this role should not be run before postgres/pkg. Any
# time after it (or without it) is fine, though.

- name: Create Postgres group {{ postgres_group }}
  group:
    state: present
    name: "{{ postgres_group }}"

- name: Ensure efm group/user exist if required
  block:
    - name: Create efm group
      group:
        name: efm
        state: present

    - name: Create efm user
      user:
        name: efm
        group: efm
        shell: /bin/bash
        home: /var/efm
        state: present
  when:
    failover_manager == 'efm'

- name: Create Postgres user {{ postgres_user }}
  user:
    state: present
    name: "{{ postgres_user }}"
    home: "{{ postgres_home }}"
    group: "{{ postgres_group }}"
    groups: "{{ extra_groups }}"
    append: yes
    shell: /bin/bash
  vars:
    extra_groups: "{{
        (failover_manager == 'efm')|ternary(['efm'], [])
      }}"

- name: Ensure {{ postgres_home }} has correct permissions
  file:
    state: directory
    mode: "0700"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    path: "{{ postgres_home }}"

- name: Enhance soft/hard system limits for user {{ postgres_user }}
  blockinfile:
    path: /etc/security/limits.conf
    block: |
      {{ postgres_user }}  -      core     {{ (ansible_os_family == 'SUSE')|ternary('0', 'unlimited') }}
      {{ postgres_user }}  soft   nofile   4096
      {{ postgres_user }}  hard   nofile   32768

# We want a sensible environment set up for the postgres user, so we
# install our own .bashrc (read by interactive non-login shells).

- name: Install ~{{ postgres_user }}/.bashrc
  template:
    src: bashrc.j2
    dest: "~{{ postgres_user }}/.bashrc"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "0644"

# We also refer to that .bashrc from .profile (read by login shells).

- name: Install ~{{ postgres_user }}/.profile
  copy:
    content: >
      . "$HOME/.bashrc"
    dest: "~{{ postgres_user }}/.profile"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "0644"

# That should be enough, right? Alas, no. The PGDG RPMs install a
# .bash_profile, which has priority over .profile. We could overwrite
# it, but a comment says we run the risk of a future update overwriting
# our changes:
#
#   «If you want to customize your settings,
#   Use the file below. This is not overridden
#   by the RPMS.»
#
# This comment is followed by a bafflingly commented-out line:
#
# #[ -f /var/lib/pgsql/.pgsql_profile ] && source /var/lib/pgsql/.pgsql_profile"
#
# So if you follow the advice and put your settings in .pgsql_profile,
# you would still have to uncomment that line; and when you do so, you
# become vulnerable to upstream changes again. Six of one, half a dozen
# of the other. We don't engage in the contortions required to cope with
# this odd scheme. If a .bash_profile exists at all, we'll just make it
# read our .bashrc.

- name: Make .bash_profile read .bashrc too
  lineinfile:
    path: "~{{ postgres_user }}/.bash_profile"
    create: no
    state: present
    insertafter: EOF
    line: >-
      . "$HOME/.bashrc"
  ignore_errors: true

- name: Ensure ~{{ postgres_user }}/.ssh exists
  file:
    path: "~{{ postgres_user }}/.ssh"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "0700"
    state: directory

- name: Install .ssh/config file
  copy:
    dest: "~{{ postgres_user }}/.ssh/config"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "0644"
    content: |
      ConnectTimeout 5s


# Allow postgres_user to run various Postgres-related systemctl commands
# as root using sudo.

- name: Collect a list of postgres commands to allow in sudoers
  set_fact:
    postgres_commands: "{{
        postgres_commands|default([])|union([
          '/bin/systemctl ' ~ item.1 ~ ' ' ~ item.0
        ])
      }}"
  with_nested:
    - ['{{ postgres_service_name }}', 'repmgr']
    - [start, stop, reload, restart, status]

- name: Add postgres to sudoers
  blockinfile:
    path: /etc/sudoers
    state: present
    insertafter: EOF
    validate: 'visudo -cf %s'
    block: |
      Cmnd_Alias POSTGRES_COMMANDS = {{ postgres_commands|join(", ") }}
      {{ postgres_user }} ALL=(ALL) NOPASSWD: POSTGRES_COMMANDS

# Finally, we generate the TLS certificates needed by Postgres.
# Note: this is legacy tech, we're adding cert authentication just for pgbouncer
# at the moment but eventually this shall get deprecated.

- include_tasks:
    file: tls.yml

- include_role:
    name: sys/ssh
  vars:
    ssh_username: "{{ postgres_user }}"
    ssh_usergroup: "{{ postgres_group }}"
