---

# The secure way for us to install TLS certificates would be to generate
# the keypair in situ and submit a CSR through some automated interface
# to a CA (e.g., Letsencrypt), and install the resulting certificate.
#
# For now, if the cluster directory contains a keypair, we install it.

- name: Install TLS certificates (if provided)
  copy:
    src: "{{ item }}"
    dest: "/etc/tpa/{{ item }}"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: 0600
  with_items:
    - "{{ cluster_name }}.key"
    - "{{ cluster_name }}.crt"
  notify:
    - Note Postgres restart required
  when: >
    tlsfiles != [] and tlsfiles.split(',')|length == 2
  vars:
    tlsfiles: "{{
      lookup('fileglob',
             '%s/%s.key' % (cluster, cluster_name),
             '%s/%s.crt' % (cluster, cluster_name))
    }}"

- name: Generate self-signed TLS key and certificate
  shell: >
    umask 077 &&
    /bin/echo -e "--\nState\nCity\nOrganization\nOrganizationalUnit\nlocalhost.localdomain\nroot@localhost.localdomain\n" |
    /usr/bin/openssl req -newkey rsa:2048 -keyout "{{ cluster_name }}.key" -nodes -x509 -days 365 -out "{{ cluster_name }}.crt"
  args:
    chdir: /etc/tpa
    creates: "{{ cluster_name }}.crt"
    executable: /bin/bash
  notify:
    - Note Postgres restart required

- name: Set correct ownership and mode on key/certificate files
  file:
    path: "{{ item }}"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: 0600
  with_items:
    - "/etc/tpa/{{ cluster_name }}.key"
    - "/etc/tpa/{{ cluster_name }}.crt"
