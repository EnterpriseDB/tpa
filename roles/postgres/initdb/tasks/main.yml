---

# Copyright Â© 2ndQuadrant Limited <info@2ndquadrant.com>

- name: Include pre-initdb hook
  include_tasks: "{{ hook }}"
  when:
    lookup('first_found', dict(files=hook, skip=True))
  vars:
    hook: "{{ cluster_dir }}/hooks/pre-initdb.yml"
  tags: always

- name: Ensure postgres directories exist and have the right permissions
  file:
    path: "{{ item }}"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: 0700
    state: directory
  with_items:
    - "{{ postgres_home }}"
    - "{{ postgres_data_dir }}"
    - "{{ postgres_conf_dir if postgres_conf_dir != postgres_data_dir else [] }}"

# https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/SELinux_Users_and_Administrators_Guide/sect-Managing_Confined_Services-PostgreSQL-Configuration_Examples.html

- name: Set correct SELinux context for {{ postgres_data_dir }}
  shell: >
    if $(type -p selinuxenabled); then
    semanage fcontext -a -t postgresql_db_t "{{ postgres_data_dir }}(/.*)?" &>/dev/null;
    restorecon -R -v "{{ postgres_data_dir }}"|wc -l;
    fi
  args:
    executable: /bin/bash
  register: restorecon
  failed_when:
    restorecon is not successful
  changed_when: >
    restorecon.stdout.strip() != '0'
  when:
    postgres_data_dir != default_postgres_data_dirs[ansible_os_family] and
    platform not in ['docker']

- name: Initialise PGDATA={{ postgres_data_dir }}
  block:
    - name: Run initdb to initialise data directory
      command: >
        {{ postgres_bin_dir }}/initdb -D {{ postgres_data_dir }} \
          {% for x in postgres_initdb_opts %}{{ x|quote }} {% endfor %}
      vars:
        _task_environment:
          TZ: UTC
      environment: "{{ target_environment|combine(_task_environment) }}"
      become_user: "{{ postgres_user }}"
      become: yes
    - set_fact: pgdata_initialised=True
  when:
    not pgdata_initialised and 'replica' not in role
