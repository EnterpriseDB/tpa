---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

# We take it for granted that we can connect to localhost as postgres to
# gather cluster facts.

- name: Collect facts about the Postgres cluster
  cluster_discovery:
    conninfo: "{{ postgres_dsn }}"
  become_user: "{{ postgres_user }}"
  become: yes
  when: >
    pgdata_initialised

- name: Ensure cluster_facts is set for all hosts
  set_fact:
    cluster_facts: "{{ ansible_facts.cluster_facts|default({}) }}"

# If the role or upstream of the server has changed from what it was
# initially set to in config.yml, we override it here.

- name: Override instance role if required
  set_fact:
    role: "{{
        role
        |reject('in', ['primary', 'replica'])
        |list|union([cluster_facts.role])
      }}"
  when: >
    'role' in cluster_facts and
    (('primary' in role and 'replica' in cluster_facts) or
     ('replica' in role and 'replica' not in cluster_facts))

- name: Record where this instance is configured to stream from
  set_fact:
    streaming_from: "{{ primary_conninfo|parse_conninfo('host') }}"
  when: >
    primary_conninfo != ''
  vars:
    primary_conninfo: "{{ cluster_facts|try_subkey('replica.primary_conninfo', '') }}"

# We expect primary_conninfo to refer to the upstream host by a name we
# recognise, but recovery.conf may have been changed to specify another
# hostname (e.g., to use a faster link for replication). We can try to
# translate based on hostname_aliases or IP addresses.

- name: Translate unrecognised primary_conninfo host to instance name
  set_fact:
    streaming_from: "{{ item }}"
  with_items: "{{ groups['role_postgres'] }}"
  vars:
    _aliases: "{{ hostvars[item].hostname_aliases.keys() }}"
    _addresses:
      "{{
        (hostvars[item]|extract_keys(hostvars[item].ip_addresses)).values()|list
      }}"
  when:
    - streaming_from is defined
    - streaming_from not in hostvars
    - (streaming_from in _aliases or streaming_from in _addresses)

- assert:
    msg: "Unrecognised host={{ streaming_from }} in primary_conninfo"
    that:
    - streaming_from in hostvars
  when:
    streaming_from is defined

- name: Override upstream if required
  set_fact:
    upstream: "{{ streaming_from }}"
  when:
    streaming_from is defined and
    (upstream is not defined or upstream != streaming_from)

- name: Create role-based groups
  group_by:
    key: "{{
        ('primary' in role)|ternary('primary',
          ('replica' in role)|ternary('replica',
            'other'))
      }}"
  changed_when: false
