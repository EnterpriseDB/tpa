---

# Copyright Â© 2ndQuadrant Limited <info@2ndquadrant.com>

# This role is applied to every postgres instance with a valid PGDATA.
#
# We aspire to the following configuration layout:
#
# postgres_conf_dir/  (== postgres_data_dir by default)
#   pg_hba.conf
#   postgresql.conf
#   conf.d/
#     0000-tpa.conf
#     0001-tpa_restart.conf
#     1111-extensions.conf
#     8888-{{ variable_name }}*.conf
#     9900-role-settings.conf
#     9999-override.conf
#
# On every instance, we create pg_hba.conf and postgresql.conf, make the
# latter include conf.d, and create the various files inside conf.d. On
# a replica, the configuration will be cloned from a primary, and then
# updated with any values specific to the instance.
#
# Although it is possible to set up pg_hba.conf differently on different
# instances, any such differences may interfere with switchover/failover
# operations, and should be avoided.

- include_tasks: defaults.yml

- name: Ensure postgres_conf_dir has the right ownership and permissions
  file:
    path: "{{ postgres_conf_dir }}"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: 0700
    state: directory
  when:
    postgres_conf_dir != postgres_data_dir

# First, we generate pg_hba.conf. There are several options here:
#
# 1. You can leave the existing pg_hba.conf alone. To do this, just set
#    postgres_hba_template to '' explicitly.
# 2. You can set postgres_hba_template to 'pg_hba.lines.j2' and specify
#    an array of lines in postgres_hba_settings; then pg_hba.conf will
#    contain the lines you specify, and no other rules.
# 3. The default postgres_hba_template 'pg_hba.conf.j2' will generate a
#    sensible configuration for the cluster. Any extra lines you specify
#    in postgres_hba_settings will be appended to these defaults.
# 4. You can set postgres_hba_template to something else and do whatever
#    you want in the custom template.

- name: Install pg_hba.conf
  template:
    src: "{{ hba }}"
    dest: "{{ postgres_conf_dir }}/pg_hba.conf"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: 0644
  when:
    hba != ''
  notify:
    - Note Postgres reload required
  vars:
    tmpl: pg_hba.conf.j2
    hba: "{{ postgres_hba_template|default(tmpl) }}"

# Next, we generate postgresql.conf if the caller specifies a template.
# Otherwise, we leave the default postgresql.conf alone. Any changes to
# this file require a Postgres restart, because we don't know what might
# have been changed.

- name: Install postgresql.conf from postgres_conf_template (optional)
  template:
    src: "{{ postgres_conf_template }}"
    dest: "{{ postgres_conf_dir }}/postgresql.conf"
  when:
    postgres_conf_template != ''
  notify:
    - Note Postgres restart required

# No matter where the config file lives (and where it came from), we
# make it include a config dir in PGDATA.

- name: Create include_dir for extra configuration settings
  file:
    path: "{{ _include_dir }}"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: 0700
    state: directory

- name: Enable include_dir in postgresql.conf
  lineinfile:
    path: "{{ postgres_conf_dir }}/postgresql.conf"
    regexp: >
      ^include_dir = '[^']*conf.d'$
    line: >-
      include_dir = '{{ _include_dir|relpath(postgres_data_dir) }}'
    insertafter: EOF
    state: present
  notify:
    - Note Postgres restart required

# Now we put any desired settings into conf.d, where they will override
# the defaults. We know that tpa.conf.j2 only contains settings that do
# not require a postgres restart.

- name: Install TPA configuration file
  template:
    src: tpa.conf.j2
    dest: "{{ _include_dir }}/0000-tpa.conf"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: 0644
  when:
    postgres_conf_template == ''
  notify:
    - Note Postgres reload required

- name: Install TPA restart-only configuration file
  template:
    src: tpa_restart.conf.j2
    dest: "{{ _include_dir }}/0001-tpa_restart.conf"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: 0644
  when:
    postgres_conf_template == ''
  notify:
    - Note Postgres restart required

# If 3333-bdr.conf exists and contains settings for CAMOv1 (based on
# synchronous replication), we move it to 3334-camo.yml without either
# reload or restart, and leave it to postgres/bdr to sort it out later.
# This is to maintain backwards compatibility.

- name: Move CAMO settings to 3334-camo.conf if required
  shell: >
    test -f {{ old }} || exit 0;
    test -f {{ new }} && exit 1;
    if grep -q synchronous_replication_availability {{ old }} &>/dev/null; then
      mv {{ old }} {{ new }} && exit 99;
    fi
  register: move
  changed_when: move.rc == 99
  vars:
    old: "{{ _include_dir }}/3333-bdr.conf"
    new: "{{ _include_dir }}/3334-camo.conf"

# If any settings were specified in postgres_conf_settings, we put that
# into a separate configuration file. Note that we expect values in this
# hash to be quoted properly; we don't try to quote them when writing
# out the configuration.

- name: Generate configuration based on postgres_conf_settings (optional)
  template:
    src: settings.conf.j2
    dest: "{{ _include_dir }}/9900-role-settings.conf"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: 0644
  when: postgres_conf_settings
  notify:
    - Note Postgres restart required

# And here's a file where anyone can add extra settings that will have
# priority over our defaults, and will never be overwritten.

- name: Create empty configuration override file
  template:
    force: no
    src: override.conf.j2
    dest: "{{ _include_dir }}/9999-override.conf"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: 0644
  notify:
    - Note Postgres restart required

- include_tasks:
    file: extensions.yml

- include_tasks:
    file: syslog.yml
  when:
    log_destination == 'syslog'

- include_tasks:
    file: log_stderr.yml
  when:
    log_destination == 'stderr'

- include_role:
    name: postgres/createuser
  vars:
    username: postgres
    role_attrs: [superuser]
  tags: always

- name: Include postgres-config hook
  include_tasks: "{{ hook }}"
  when:
    lookup('first_found', dict(files=hook, skip=True))
  vars:
    hook: "{{ cluster_dir }}/hooks/postgres-config.yml"
  tags: always
