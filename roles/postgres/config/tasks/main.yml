---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

# This role is applied to every postgres instance with a valid PGDATA.
#
# We aspire to the following configuration layout:
#
# postgres_conf_dir/  (== postgres_data_dir by default)
#   pg_hba.conf
#   postgresql.conf
#   conf.d/
#     0000-tpa.conf
#     0001-tpa_restart.conf
#     1111-extensions.conf
#     8888-{{ variable_name }}*.conf
#     9900-tpa_postgres_conf_settings.conf
#     9999-override.conf
#
# On every instance, we create pg_hba.conf and postgresql.conf, make the
# latter include conf.d, and create the various files inside conf.d. On
# a replica, the configuration will be cloned from a primary, and then
# updated with any values specific to the instance.
#
# Although it is possible to set up pg_hba.conf differently on different
# instances, any such differences may interfere with switchover/failover
# operations, and should be avoided.
#
# First, we generate pg_hba.conf. There are several options here:
#
# 1. You can leave the existing pg_hba.conf alone. To do this, just set
#    postgres_hba_template to '' explicitly.
# 2. You can set postgres_hba_template to 'pg_hba.lines.j2' and specify
#    an array of lines in postgres_hba_settings; then pg_hba.conf will
#    contain the lines you specify, and no other rules.
# 3. The default postgres_hba_template 'pg_hba.conf.j2' will generate a
#    sensible configuration for the cluster. Any extra lines you specify
#    in postgres_hba_settings will be appended to these defaults.
# 4. You can set postgres_hba_template to something else and do whatever
#    you want in the custom template.
#
# The variables `_postgres_create_hba_file` and `_postgres_create_ident_file`
# are used internally by TPA to optionally disable the creation of the
# `pg_hba.conf` and `pg_ident.conf` files respectively, whilst still
# allowing for a user supplied HBA template to be set. Instead of creating
# the file, the contents is stored in a fact so that this can be used by
# other roles that are responsible for managing the creation of this file,
# for example Patroni HA failover manager. Thus allowing users to supply
# their own templates and continue to use TPA's configuration interface in
# `config.yml`.

- block:
  - name: Install pg_hba.conf
    template:
      src: "{{ hba }}"
      dest: "{{ postgres_conf_dir }}/pg_hba.conf"
      owner: "{{ postgres_user }}"
      group: "{{ postgres_group }}"
      mode: "0644"
    when: _postgres_create_hba_file
    notify:
      - Note Postgres reload required

  - name: Set a fact for contents of pg_hba.conf
    set_fact:
      postgres_pg_hba_config: "{{
          lookup('ansible.builtin.template', hba)
          |split('\n')
          |reject('match', '#')
          |list
        }}"
  when:
    hba != ''
  vars:
    tmpl: pg_hba.conf.j2
    hba: "{{ postgres_hba_template|default(tmpl) }}"

# If postgres_ident_template is set, we use it to install pg_ident.conf.
# Otherwise, we leave the file alone.

- block:
  - name: Install pg_ident.conf
    template:
      src: "{{ postgres_ident_template }}"
      dest: "{{ postgres_conf_dir }}/pg_ident.conf"
      owner: "{{ postgres_user }}"
      group: "{{ postgres_group }}"
      mode: "0644"
    notify:
      - Note Postgres reload required
    when: _postgres_create_ident_file

  - name: Set a fact for contents of pg_ident.conf
    set_fact:
      postgres_pg_ident_config: "{{
          lookup('ansible.builtin.template', postgres_ident_template)
          |split('\n')
          |reject('match', '#')
          |list
        }}"
  when:
    postgres_ident_template|default('') != ''

# Next, we generate postgresql.conf if the caller specifies a template.
# Otherwise, we leave the default postgresql.conf alone. Any changes to
# this file require a Postgres restart, because we don't know what might
# have been changed.

- name: Install postgresql.conf from postgres_conf_template (optional)
  template:
    src: "{{ postgres_conf_template }}"
    dest: "{{ postgres_conf_dir }}/postgresql.conf"
  when:
    postgres_conf_template != ''
  notify:
    - Note Postgres restart required

# Next, we must make postgres_conf_dir/postgresql.conf include the
# postgres_conf_dir/conf.d directory.
#
# If postgres_conf_dir is the same as postgres_data_dir, or if we copied
# postgresql.conf to postgres_conf_dir after initdb, or if we generated
# postgresql.conf based on postgres_conf_template above, then the file
# will exist in the expected location, and we can edit it.
#
# If, however, we are re-deploying with the value of postgres_conf_dir
# changed, postgresql.conf and the other configuration files may not
# exist. If Postgres is still running with the old value, we can copy
# the files (but we don't try to remove them from their old locations).

- name: Copy configuration files to new location if required
  command: >
    cp "{{ current_path }}" "{{ new_path }}"
  become_user: "{{ postgres_user }}"
  become: yes
  args:
    creates: "{{ new_path }}"
  vars:
    current_path: "{{
        cluster_facts.pg_settings.get(item.key)
          if cluster_facts.pg_settings is defined
      }}"
    new_path: >-
      {{ postgres_conf_dir }}/{{ item.value }}
  with_dict: "{{ postgres_conf_files }}"
  when:
    current_path is defined
    and current_path != new_path

- name: Create include_dir for extra configuration settings
  file:
    path: "{{ _include_dir }}"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "0700"
    state: directory

- name: Enable include_dir in postgresql.conf
  lineinfile:
    path: "{{ postgres_conf_dir }}/postgresql.conf"
    regexp: >
      ^include_dir = '[^']*conf.d'$
    line: >-
      include_dir = '{{ _include_dir|relpath(postgres_data_dir) }}'
    insertafter: EOF
    state: present
  when: _postgres_config_split
  notify:
    - Note Postgres restart required

# Setup postgres_config fact with the desired settings so it can be used
# by anything that needs them, usually coupled with `_postgres_config_split: false`.
# Note: the postgres conf.d include files do not use these facts

- include_tasks: set_tpa_facts.yml
- include_tasks: set_tpa_restart_facts.yml

# Now we put any desired settings into conf.d, where they will override
# the defaults. We know that tpa.conf.j2 only contains settings that do
# not require a postgres restart.

- name: Install TPA configuration file
  template:
    src: tpa.conf.j2
    dest: "{{ _include_dir }}/0000-tpa.conf"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "0644"
  when:
    postgres_conf_template == ''
    and _postgres_config_split
  notify:
    - Note Postgres reload required

- name: Install TPA restart-only configuration file
  template:
    src: tpa_restart.conf.j2
    dest: "{{ _include_dir }}/0001-tpa_restart.conf"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "0644"
  when:
    postgres_conf_template == ''
    and _postgres_config_split
  notify:
    - Note Postgres restart required

# If synchronous_standby_names is not set, we must ensure that any old
# 8888-synchronous_standby_names.conf file is removed. (If it is set,
# even if the value has changed, postgres/cleanup will deal with it
# appropriately.)

- name: Remove synchronous_standby_names setting if unused
  file:
    path: "{{ _include_dir }}/8888-synchronous_standby_names.conf"
    state: absent
  when:
    synchronous_standby_names is not defined
  notify:
    - Note Postgres reload required

# If 3333-bdr.conf exists and contains settings for CAMOv1 (based on
# synchronous replication), we move it to 3334-camo.conf without either
# reload or restart, and leave it to postgres/bdr to sort it out later.
# This is to maintain backwards compatibility.

- name: Move CAMO settings to 3334-camo.conf if required
  shell: >
    test -f "{{ old }}" || exit 0;
    test -f "{{ new }}" && exit 1;
    if grep -q synchronous_replication_availability "{{ old }}" &>/dev/null; then
      mv "{{ old }}" "{{ new }}" && exit 99;
    fi
  register: move
  changed_when: move.rc == 99
  failed_when: move.rc != 99 and move.rc != 1 and move.rc != 0
  vars:
    old: "{{ _include_dir }}/3333-bdr.conf"
    new: "{{ _include_dir }}/3334-camo.conf"

# With BDR3, we need to install a CAMO configuration file and restart
# the server in postgres/bdr/tasks/postgres-reconfig.yml. BDR4 doesn't
# need the restart, so we can just install the configuration file here
# and avoid restarting later.

- include_tasks:
    file: camo.yml
  when: >
    'bdr' in role
    and bdr_version is version('4', '>=')
    and bdr_node_camo_partner is defined

# If we are using repmgr to clone replicas, it takes care of writing the
# recovery configuration (recovery.conf or postgresql.auto.conf) as part
# of the cloning process. When using postgres/replica for v12+ instead,
# we have to write the equivalent recovery configuration ourselves.
#
# Note that we don't use pg_basebackup -R, which would write a recovery
# configuration too, but not necessarily the one we want when we're
# setting up cascading replication.
#
# TODO: This code doesn't permit a non-streaming replica to be set up
# (i.e., one that depends entirely on log shipping).

# If efm or patroni are used, we generate a primary_slot_name on the 
# primary and replica nodes for use during switchover to ensure the 
# old primary uses a physical slot for replication. Both efm and patroni
# use pg_basebackup which, contrary to repmgr, does not configure a 
# primary_slot_name on the primary node when creating a replica.
- name: Configure primary_slot_name on primary
  copy:
    content: >
      primary_slot_name = '{{ primary_slot_name }}'
    dest: "{{ _include_dir }}/8901-primary_slot_name.conf"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "0644"
  when: >
    ('primary' in role or 'replica' in role)
    and failover_manager in ['efm', 'patroni']
    and postgres_version is version('12', '>=')
  notify:
    - Note Postgres reload required

- name: Write recovery configuration for replicas, if required
  when: >
    'replica' in role
    and failover_manager != 'repmgr'
    and postgres_version is version('12', '>=')
  block:
  - name: Configure primary_conninfo
    copy:
      content: >
        primary_conninfo = '{{ primary_conninfo }}'
      dest: "{{ _include_dir }}/8901-primary_conninfo.conf"
      owner: "{{ postgres_user }}"
      group: "{{ postgres_group }}"
      mode: "0644"
    vars:
      primary_conninfo: "{{ hostvars[upstream].replication_node_dsn }} passfile={{ _pgpassfile }}"
    notify:
      - Note Postgres reload required


  - name: Set restore_command to point to a Barman server, if available
    set_fact:
      restore_command: "{{ restore_command|default(barman_command) }}"
    vars:
      _backup: "{{ hostvars[upstream_backedup].backup }}"
      barman_server:
        "{{ ([_backup] if _backup is string else _backup)|list|first }}"
      barman_command: >-
        /usr/bin/barman-wal-restore -U {{ barman_user }} -z -p 8 --port {{ cluster_ssh_port|default(22)|int }}
        {{ barman_server }} {{ hostvars[upstream_backedup].backup_name }} %f %p
    when:
      upstream_backedup != ''

  - name: Configure restore_command
    copy:
      content: >
        restore_command = '{{ restore_command }}'
      dest: "{{ _include_dir }}/8901-restore_command.conf"
      owner: "{{ postgres_user }}"
      group: "{{ postgres_group }}"
      mode: "0644"
    when:
      restore_command is defined
    notify:
      - Note Postgres reload required

  - name: Ensure that $PGDATA/standby.signal exists
    copy:
      content: ""
      dest: "{{ postgres_data_dir }}/standby.signal"
      owner: "{{ postgres_user }}"
      group: "{{ postgres_group }}"
      mode: "0644"
      force: no

# If 9900-role-settings.conf (old config file for storing settings specified via
# postgres_conf_settings, new name 9900-tpa_postgres_conf_settings.conf) exists,
# we move it to 9900-tpa_postgres_conf_settings.conf without either a reload or a
# restart before writing 9900-tpa_postgres_conf_settings.conf in the next task.

- name: Move 9900-role-settings.conf to 9900-tpa_postgres_conf_settings.conf if required
  shell: >
    test -f "{{ old }}" || exit 0;
    test -f "{{ new }}" && exit 1;
    mv "{{ old }}" "{{ new }}" && exit 99;
  register: move
  changed_when: move.rc == 99
  failed_when: move.rc != 99 and move.rc != 1 and move.rc != 0
  vars:
    old: "{{ _include_dir }}/9900-role-settings.conf"
    new: "{{ _include_dir }}/9900-tpa_postgres_conf_settings.conf"

# If any settings were specified in postgres_conf_settings, we put that
# into a separate configuration file. Note that we expect values in this
# hash to be quoted properly; we don't try to quote them when writing
# out the configuration.

- include_tasks: set_postgres_conf_settings_facts.yml

- name: Generate configuration based on postgres_conf_settings (optional)
  template:
    src: settings.conf.j2
    dest: "{{ _include_dir }}/9900-tpa_postgres_conf_settings.conf"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "0644"
  when:
    postgres_conf_settings
    and _postgres_config_split
  notify:
    - Note Postgres restart required

# And here's a file where anyone can add extra settings that will have
# priority over our defaults, and will never be overwritten.

- name: Create empty configuration override file
  template:
    force: no
    src: override.conf.j2
    dest: "{{ _include_dir }}/9999-override.conf"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "0644"
  when: _postgres_config_split
  notify:
    - Note Postgres restart required

- include_tasks:
    file: extensions.yml

- include_tasks:
    file: syslog.yml
  when: >
    task_selector|selects('rsyslog')

- include_role:
    name: postgres/createuser
  vars:
    username: "{{ postgres_user }}"
    role_attrs: [superuser]

- include_role: name=postgres/createuser
  vars:
    username: "{{ replication_user }}"
    role_attrs: [replication]

- name: Include postgres-config hook
  include_tasks: "{{ hook }}"
  when: >
    lookup('first_found', dict(files=hook, skip=True))
    and task_selector|selects('postgres-config')
  vars:
    hook: "{{ cluster_dir }}/hooks/postgres-config.yml"
