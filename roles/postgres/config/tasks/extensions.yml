---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

# Here we install any configuration required for the extensions to be
# installed. The "CREATE EXTENSION" commands will be issued later, via
# postgres/config/final. The list of postgres_extensions was determined
# earlier in roles/facts.

# We install a default configuration for the extensions we care about.
# We don't need to have conditional logic in this template, because the
# configuration will be ignored if we aren't installing a particular
# extension after all.

- include_tasks: set_extensions_facts.yml

- name: Install default extension configuration file
  template:
    src: extensions.conf.j2
    dest: "{{ _include_dir }}/1111-extensions.conf"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "0644"
  when: _postgres_config_split
  notify:
    - Note Postgres restart required

# Some extensions need entries in shared_preload_libraries.

# Any extensions for which TPA knows the corresponding
# shared_preload_libraries entry name (captured in the
# default_postgres_extensions_dictionary) is added to the
# shared_preload_libraries list

- name: Automatically add shared_preload_libraries entries for recognized extensions
  set_fact:
    shared_preload_libraries:
      "{{ shared_preload_libraries|default([])|union([item.value.spl]) }}"
  loop: "{{ lookup('dict', postgres_extensions_dictionary) }}"
  when: >
    'spl' in item.value
    and
    (item.key in postgres_extensions
    or item.key in postgres_databases|json_query('[*].extensions[*].name|[]'))

- name: Add shared_preload_libraries entries for extensions
  set_fact:
    shared_preload_libraries:
      "{{ shared_preload_libraries|default([])|union([item]) }}"
  with_items: "{{ _preload_extensions }}"
  when:
    item in postgres_extensions
    or (item == 'bdr' and 'bdr' in role)
    or item in postgres_databases|json_query('[*].extensions[*].name|[]')

- name: Add repmgr to shared_preload_libraries if required
  set_fact:
    shared_preload_libraries:
      "{{ shared_preload_libraries|union(['repmgr']) }}"
  when: >
    failover_manager == 'repmgr'
    and groups|members_of('role_replica') is not empty

- name: Add entries to shared_preload_libraries
  include_tasks: preload-library.yml

- include_tasks: set_preload_library_facts.yml

- name: Create list of modules from recognized extensions
  set_fact:
    modules: "{{ modules|default([])|union([item.key]) }}"
    db_format_modules:
      "{{ db_format_modules|default([])|union([{'name': item.key}]) }}"
  loop: "{{ lookup('dict', postgres_extensions_dictionary) }}"
  when: "'module' in item.value and item.value.module"

- name: Remove modules from postgres_extensions
  set_fact:
    postgres_extensions:
      "{{ postgres_extensions|difference(modules) }}"
