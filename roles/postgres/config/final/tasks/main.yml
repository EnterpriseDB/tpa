---

# Copyright Â© 2ndQuadrant Limited <info@2ndquadrant.com>

# Now that Postgres is up and running, we can perform additional tasks
# like creating users, databases, and extensions.

# First, we ensure that the users in postgres_users exist and have the
# desired attributes.
#
# The entries in postgres_users may be specified in config.yml, or come
# from invocations of postgres/createuser by other roles in TPAexec (to
# create, for example, the users required by repmgr or barman). We now
# generate passwords for any entries where postgres/createuser has not
# already generated one.
#
# postgres_users:
# - username: xyzzy
#   generate_password: true
#   role_attrs:
#   - superuser
#   - replication
#
# If an entry in postgres_users specifies ``generate_password: false``,
# we neither generate nor set a password for that user.

- name: Generate missing passwords
  include_role: name=secret
  vars:
    secret_name: "{{ item.username }}_password"
  with_items: "{{ postgres_users }}"
  when:
    secret_name not in vars
    and item.generate_password|default(true)

- name: Create Postgres users
  postgresql_user:
    port: "{{ postgres_port }}"
    name: "{{ item.username }}"
    password: "{{
      encrypted_password if generated_password is defined else omit
    }}"
    encrypted: yes
    role_attr_flags: "{{
      item.role_attrs|default([])|join(',') or omit
    }}"
  vars:
    secret_name: >-
      {{ item.username }}_password
    generated_password: >-
      {{ vars.get(secret_name) }}
    existing_password: >-
      {{ cluster_facts.roles[item.username].rolpassword|default('unknown') }}
    encrypted_password: "{{
      item.password_encryption|default(password_encryption)|encrypted_password(
        generated_password, item.username, existing_password=existing_password
      )
    }}"
  with_items: "{{ postgres_users }}"
  become_user: "{{ postgres_user }}"
  become: yes

# We act on "granted_roles" after the extensions are created, because
# some of the roles we want to grant may not exist until then (e.g.,
# bdr_application).

# We've already installed configuration files for any extensions that we
# care about; now it's time to issue CREATE EXTENSION commands.

- name: Install default Postgres extensions
  postgresql_ext:
    port: "{{ postgres_port }}"
    state: present
    db: "{{ item.0 }}"
    name: "{{ item.1 }}"
  with_nested:
    - [postgres, template1]
    - "{{ postgres_extensions }}"
  become_user: "{{ postgres_user }}"
  become: true
  when:
    item.1 not in cluster_facts.databases[item.0].extensions|default({})

# Now that extensions have been initialised, we can complete the task of
# granting roles to the appropriate users.

- name: Grant roles to Postgres users if required
  postgresql_membership:
    port: "{{ postgres_port }}"
    groups: "{{ item.granted_roles }}"
    target_role: "{{ item.username }}"
    state: present
  with_items: "{{ postgres_users }}"
  become_user: "{{ postgres_user }}"
  become: yes
  when:
    item.granted_roles|default([]) is not empty

# Now that all required roles exist, we can create databases specified
# in postgres_databases with the correct owners. If you do not specify
# any template, it uses template1 and inherits all the extensions that
# were created above. If you don't want that, use template0 explicitly
# and create extensions in the postgres-config-final hook.

- name: Create Postgres databases
  postgresql_db:
    port: "{{ postgres_port }}"
    name: "{{ db.name }}"
    owner: "{{ db.owner|default(omit) }}"
    encoding: "{{ db.encoding|default(omit) }}"
    lc_collate: "{{ db.lc_collate|default(omit) }}"
    lc_ctype: "{{ db.lc_ctype|default(omit) }}"
    template: "{{ db.template|default(omit) }}"
    state: present
  with_items: "{{ postgres_databases }}"
  loop_control:
    loop_var: db
    label: >-
      {{ db.name }}
  become_user: "{{ postgres_user }}"
  become: yes

# Since we may have changed the Postgres configuration, we repeat the
# cluster discovery process that was done at the beginning (roles/init).

- include_role: name=postgres/facts

# If there's an entry for pgbouncer_auth_user in postgres_users (which
# means the pgbouncer role was applied earlier), we must ensure that a
# pgbouncer_get_auth() function is available in every database.

- include_tasks:
    file: pgbouncer.yml
    apply:
      tags: pgbouncer
  when: >
    postgres_users|json_query("[?username=='%s']" % pgbouncer_auth_user) != []
  tags: pgbouncer

- name: Include postgres-config-final hook
  include_tasks: "{{ hook }}"
  when:
    lookup('first_found', dict(files=hook, skip=True))
  vars:
    hook: "{{ cluster_dir }}/hooks/postgres-config-final.yml"
  tags: always
