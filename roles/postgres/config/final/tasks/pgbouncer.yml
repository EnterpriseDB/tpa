---

# Copyright Â© 2ndQuadrant Limited <info@2ndquadrant.com>

- name: Create pg_catalog.pgbouncer_get_auth function
  postgresql_query:
    conninfo: "{{ dsn|dbname(item) }}"
    queries:
      - SELECT proname FROM pg_catalog.pg_proc p JOIN pg_namespace n ON (p.pronamespace=n.oid) WHERE nspname='pg_catalog' AND proname = 'pgbouncer_get_auth'
      - >
        CREATE OR REPLACE FUNCTION pg_catalog.pgbouncer_get_auth(p_usename TEXT)
        RETURNS TABLE(username TEXT, password TEXT) AS $$
        BEGIN
          RETURN QUERY
          SELECT usename::TEXT, passwd::TEXT FROM pg_catalog.pg_shadow
          WHERE usename = p_usename;
        END;
        $$ LANGUAGE plpgsql SECURITY DEFINER
      - REVOKE ALL ON FUNCTION pg_catalog.pgbouncer_get_auth(p_usename TEXT) FROM PUBLIC
      - GRANT EXECUTE ON FUNCTION pg_catalog.pgbouncer_get_auth(p_usename TEXT) TO pgbouncer
  register: create_function
  changed_when:
    create_function is successful and create_function.rowcounts[0] == 0
  become_user: "{{ postgres_user }}"
  become: yes
  with_items: "{{ cluster_facts.databases.keys()|list }}"
  when: >
    item not in ['template0', 'bdr_supervisordb']
