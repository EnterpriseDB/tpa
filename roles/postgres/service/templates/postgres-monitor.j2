#!/usr/bin/env python
#
# This script waits until Postgres is accepting connections and returns
# success as quickly as possible after this happens, or fails if it is
# convinced that it will not happen.
#
# In an ideal world, it would wait only when an attempt to connect to
# Postgres returns a FATAL 'the database system is starting up' error,
# and it can observe that the startup process is not stalled (even if
# the progress is slow).
#
# Instead, we just run pg_isready and accept any 'rejecting connections'
# error (not only 'is starting up') and do not attempt to establish that
# recovery is making progress. We skip the first rc==2 status because it
# is entirely likely that postgres has not yet started listening on 5432
# at all when we first invoke pg_isready.

from __future__ import absolute_import, division, print_function

import sys, time
import psycopg2

def main():
    first = 1

    while True:
        err = None

        try:
            psycopg2.connect('').close()
        except Exception as e:
            err = str(e).strip()
            if not recoverable(err) and not first:
                print('exiting: %s' % err)
                sys.exit(1)
        else:
            print('ok')
            sys.exit(0)

        print('retrying: %s' % err)
        time.sleep(10)
        first = 0

def recoverable(err):
    return err.startswith('FATAL: ') and \
        (err.endswith('the database system is starting up') or \
        err.endswith('the database system is in recovery mode'))

if __name__ == '__main__':
    main()
