#!/usr/bin/env {{ python }}
# -*- coding: utf-8 -*-
# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.
#
# This script waits until Postgres is accepting connections and returns
# success as quickly as possible after this happens, or fails if it is
# convinced that it will not happen during the full length of test time.
#
# We try to connect (and must ignore connections errors, because although
# we were invoked after postgres, it's entirely likely that it has not
# yet started listening on 5432 when we first check), and keep trying
# periodically so long as we receive only 'database is starting up'
# errors that we expect to go away eventually.
#
# In an ideal world, we would stop trying if we could establish that the
# recovery was not making progress, but for now, we resign ourselves to
# waiting for a few seconds.

import sys, time
import psycopg2

WAIT_RETRY_TIME_BETWEEN_ATTEMPTS = 3 #seconds

def connection_error_only(err):
    return True if err.pgcode is None else False

def recoverable(err):
    return (err.endswith('the database system is starting up') or \
        err.endswith('the database system is not yet accepting connections') or \
        err.endswith('Consistent recovery state has not been yet reached.') or \
        err.endswith('the database system is in recovery mode'))

def main():
    conninfo = ''
    first = 1
    max_network_errors_allowed = 10
    return_code = 1

    if len(sys.argv) == 2:
        conninfo = sys.argv[1]

    while max_network_errors_allowed > 0 and return_code == 1:
        err = None

        try:
            print('Trying to connect....')
            psycopg2.connect(conninfo).close()
        except Exception as e:
            err = str(e).strip()
            if type(e) == psycopg2.OperationalError and connection_error_only(e):
                max_network_errors_allowed -= 1
                print(f"Connection error detected... {max_network_errors_allowed} retries left.")
            elif not recoverable(err):
                print('exiting: %s' % err)
                break

            print('retrying: %s' % err)
            time.sleep(WAIT_RETRY_TIME_BETWEEN_ATTEMPTS)
        else:
            print('ok')
            return_code = 0

    return return_code


if __name__ == '__main__':
    sys.exit(main())
