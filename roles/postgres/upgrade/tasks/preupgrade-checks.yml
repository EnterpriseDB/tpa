---

- name: Skip this node if already upgraded and running
  shell: |
    ps -ef | grep {{ new_postgres_data_dir }} | grep -v grep | wc -l
  register: upgraded_postgres_running

# TBD: May not need the 2nd variable now that the code has been broken out
- set_fact:
    upgraded_postgres_running: "{{ upgraded_postgres_running.stdout|int > 0 }}"
    already_upgraded: "{{ upgraded_postgres_running }}"

# If Postgres is down, we may have already upgraded; so we
# compare the service PGDATA to the config PGDATA for this node.
- block:
  - name: Get Service Status
    systemd:
      name: postgres
    register: pg_service_status

  - set_fact:
      service_pgdata: "{{ pg_service_status.status.Environment.split(' ')|select('match', 'PGDATA')|first|split('=')|last }}"

  - command:
      cat {{ service_pgdata }}/PG_VERSION
    register: service_pgversion

  - set_fact:
      service_pgversion: "{{ service_pgversion.stdout|int }}"

  - set_fact:
      already_upgraded: "{{ new_postgres_version is version(service_pgversion, 'eq') }}"
  when: >
    not upgraded_postgres_running

# We directly query the node here and assess what Postgres
# version and data directory that the service is running under.
- name: Get Server Status
  shell: |
    ps -ef | grep {{ service_pgdata }} | grep -v grep | wc -l
  register: old_postgres_running

- set_fact:
    old_postgres_running: "{{ old_postgres_running.stdout|int > 0 }}"

- assert:
    that: "{{ pg_service_status.status.ActiveState == 'active' or old_postgres_running }}"
    msg: "FAILED: the old Postgres instance must be running, exiting."

- set_fact:
    old_postgres_data_dir: "{{ service_pgdata }}"

- name: Find old PGVERSION (and can we connect w/o issue)
  postgresql_query:
    conninfo: "{{ dsn|dbname('postgres') }}"
    query: SELECT current_setting('server_version') AS version
  register: old_postgres_version
  become: yes
  become_user: "{{ postgres_user }}"

- set_fact:
    old_postgres_version: "{{ old_postgres_version.results[0].version.split('.')[0] }}"

# We perform a number of checks to ensure that we can upgrade
# successfully. One of those conditions is to restrict the process
# to only allow upgrading to the next major version.
- assert:
    that: "{{ old_postgres_version is version('11', 'ge') }}"
    msg: "FAILED: the old Postgres version must be at least version 11, exiting."

- assert:
    that: "{{ new_postgres_version is version(old_postgres_version, 'gt') }}"
    msg: "FAILED: the new Postgres version must be higher than the old Postgres version, exiting."

- assert:
    that: "{{ new_postgres_version is version(old_postgres_version|int + 1, 'eq') }}"
    msg: "FAILED: the new Postgres version must be only one major version higher than the old Postgres version, exiting."
  when: new_postgres_version is version(old_postgres_version, 'ne') 

- debug:
    msg: "Skipping major upgrade of {{ inventory_hostname }}; the running instance is already version {{ new_postgres_version }}."
  when: new_postgres_version is version(old_postgres_version, 'eq') 

