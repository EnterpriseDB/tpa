---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

# Configure systemd unit files for Postgres services.

- include_role:
    name: postgres/service
  when: >
    task_selector|permits('service')

# Start, reload, or restart Postgres services based on
# postgres_service_end_state.

- include_role:
    name: postgres/restart
  when: >
    task_selector|permits('service')

# If we just started Postgres, and it was not running during the initial
# fact collection, we need to run cluster_discovery now to discover the
# state of the running instance.

- include_role: name=postgres/facts
  when:
    not postgres_running

# Postgres is now running.

- include_role:
    name: postgres/pgpass
  when: >
    task_selector|permits('pgpass')

# now we have established everything we need to write pg_ident.conf

# Populating pg_ident_entries is incompatible with using
# postgres_ident_template; this is enforced by an assert when the
# entries are added

- name: write pg_ident entries on primary
  block:
    - set_fact:
        all_pg_ident_entries: "{{ all_pg_ident_entries|default({})|combine(hostvars[item]['pg_ident_entries']|default({}), list_merge='append_rp') }}"
      with_items:
        "{{ groups[cluster_tag] }}"

    - name: Add pg_ident.conf entries
      lineinfile:
        path: "{{ postgres_data_dir }}/pg_ident.conf"
        line: >-
          {{ hba_cert_authentication_map }} {{ item.0 }} {{ item.1 }}
      with_nested_dependents:
        - all_pg_ident_entries.keys()
        - all_pg_ident_entries[item.0]

    - name: Add general-purpose pg_ident.conf entry
      lineinfile:
        path: "{{ postgres_data_dir }}/pg_ident.conf"
        line: >-
          {{ hba_cert_authentication_map }} /^(.*)$ \1
  when: >
    'replica' not in role
    and hba_cert_authentication_map|default('') != ''


# Now we can perform configuration tasks that require Postgres to be
# running (unlike the configuration-file changes in postgres/config),
# such as creating users, databases, and extensions.

- include_role:
    name: postgres/config/final
  when: >
    'replica' not in role
    and task_selector|permits('config')

# Since we may have changed the Postgres configuration, we repeat the
# cluster discovery process that was done at the beginning (roles/init)
# for replicas (because postgres/config/final above will have done it
# for primary instances already).

- include_role: name=postgres/facts
  when: >
    'replica' in role
