---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

# If we haven't already done so, we must run some SQL scripts to set up
# the contents of the pem_database.

- name: Check the supported schema version
  shell:
    "{{ pem_agent_base_dir }}/bin/pemagent --version | awk -F: '/Schema Supported:/ {print $2+0}'"
  register: supported_schema_version_check

- name: Set the supported PEM schema-version
  set_fact:
    pem_supported_schema_version: "{{ supported_schema_version_check.stdout }}"

- name: Check PEM schema version in database
  postgresql_query:
    conninfo: "{{ dsn|dbname(pem_database) }}"
    query: SELECT pem.schema_version()
  become_user: "{{ postgres_user }}"
  become: yes
  register: pem_schema_version_check

- name: Set the current PEM schema-version
  set_fact:
    current_pem_schema_version: "{{ pem_schema_version_check.results[0].schema_version }}"

- name: Upgrade the PEM schema
  block:
    - name: Copy the list-pem-schema.py on pem-server
      template:
        src: list_upgrade_schema.py.j2
        dest: "{{ pem_base_dir }}/resources/list_upgrade_schema.py"

    - name: List the schema to be upgraded
      command: >
        "{{ pem_python_executable }}" "{{ pem_base_dir }}/resources/list_upgrade_schema.py" -s "{{ current_pem_schema_version }}"
      register: list_upgrades

    - name: Upgrading the schema
      community.postgresql.postgresql_script:
        connect_params: "{{ dsn|dbname(pem_database) }}"
        path: "{{ item }}"
      become_user: "{{ postgres_user }}"
      become: yes
      with_items: "{{ list_upgrades.stdout_lines|list }}"

  when: >
    current_pem_schema_version != pem_supported_schema_version
