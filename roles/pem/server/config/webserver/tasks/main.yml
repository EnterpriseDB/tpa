---

# Â© Copyright EnterpriseDB UK Limited 2015-2024 - All rights reserved.
- package_facts:
    manager: auto

- set_fact:
    pem_version: "{{ ansible_facts.packages['edb-pem'][0]['version']|split('-')|first }}"

- include_tasks: configure_httpd_module.yml

- include_role: name=postgres/createuser
  vars:
    username: "{{ pem_db_user }}"
    role_attrs: [superuser]

- include_role: name=postgres/pgpass
  vars:
    pgpassfile: ~root/.pgpass
    pgpass_owner: root
    pgpass_group: root
    pgpass_users:
      - "{{ pem_db_user }}"

- name: Set pem_base_dir folder ownership
  ansible.builtin.file:
    path: "{{ pem_base_dir }}"
    state: directory
    recurse: yes
    owner: pem
    group: pem
    mode: "0755"

- name: Copy pem.wsgi.in to pem.wsgi
  copy:
    src: "{{ pem_base_dir }}/web/pem.wsgi.in"
    dest: "{{ pem_base_dir }}/web/pem.wsgi"
    owner: root
    group: root
    mode: "0644"
    backup: yes
    remote_src: yes
  notify: Restart apache for pem

- name: Generating PEM Cookie Name
  shell: hexdump -n 4 -e '4/4 "%08X" 1 "\n"' /dev/random | head -c 6
  register: session_cookie_hexstring

- name: Generate config_setup.py
  template:
    src: config_setup.py.j2
    dest: "{{ pem_base_dir }}/web/config_setup.py"
    owner: root
    group: root
    mode: "0644"

- name: Copy over user-provided pem server SSL certificate
  copy:
    src: "{{ cluster_dir }}/ssl/pemserver/{{ pem_server_ssl_certificate }}"
    dest: "{{ pem_base_dir }}/resources/{{ pem_server_ssl_certificate }}"
    owner: root
    group: root
    mode: "0644"
    force: false
  when: >
    pem_server_ssl_certificate is defined

- name: Copy over user-provided pem server SSL key
  copy:
    src: "{{ cluster_dir }}/ssl/pemserver/{{ pem_server_ssl_key }}"
    dest: "{{ pem_base_dir }}/resources/{{ pem_server_ssl_key }}"
    owner: root
    group: root
    mode: "0644"
    force: false
  when: >
    pem_server_ssl_key is defined

- name: Check if web-server certificate already exists
  stat:
    path: "{{ pem_base_dir }}/resources/{{ certificate }}"
  vars:
    certificate: "{{ pem_server_ssl_certificate | default('server-pem.crt')}}"
  register: pem_web_server_certificate

# We don't want to generate a new set of TLS key/certificate pair
# for each run of deploy, so therefore we check if the certificate
# already exists to determine whether or not a new one is needed.
# In addition, we also provide 'pem_web_server_renew_tls_certificates'
# configuration setting that allows users to override the default
# behavior and force regeneration of certificates primarily for the
# purposes of renewal should the certificates expire and for forcing
# a renewal when deemed appropriate. Config setting can be placed
# under cluster_vars or instance vars.
- name: Generate self-signed TLS key and certificate
  shell: >
    umask 077 &&
    /bin/echo -e "US\nMA\nBedford\n{{ pem_branding_company_name_wl }}\n{{ pem_branding_edb_wl|upper }} Postgres Manager - HTTPD Server\n{{ pem_server }}\n{{ pem_support_email }}\n" |
    /usr/bin/openssl req -newkey rsa:4096 -keyout "server-pem.key" -nodes -x509 -days 365 -out "server-pem.crt"
  args:
    chdir: "{{ pem_base_dir }}/resources"
    executable: /bin/bash
  when: >
    (pem_web_server_renew_tls_certificates|default(false) and pem_server_ssl_certificate is not defined) 
    or (not pem_web_server_certificate.stat.exists)
  notify: Restart apache for pem

- name: "Install {{ pem_branding_edb_wl }}-pem.conf"
  template:
    src: edb-pem.conf.j2
    dest: "{{ pem_web_config_file[ansible_os_family] }}"
    owner: root
    group: root
    mode: "0644"
  notify: Restart apache for pem

- include_tasks: pem_sites.yml

- name: Run setup.py to create pem.db
  command: "{{ pem_python_executable }} /usr/edb/pem/web/setup.py"
  become_user: pem
  become: yes

- name: Configure SELinux security policy for PEM
  command: "{{ pem_base_dir }}/bin/configure-selinux.sh"

- name: Ensure web server is started on boot
  service:
    name: "{{ pem_web_server_service_name[ansible_os_family] }}"
    enabled: yes
    state: started

- name: Webserver configured
  debug:
    msg: >
      Configured the webserver for "{{ pem_branding_edb_wl }}" Postgres
      Enterprise Manager (PEM) Server on port "{{ pem_server_ssl_port }}"

- name: PEM server access info
  debug:
    msg: >
      PEM server can be accessed at
      https://"{{ pem_db_host }}":"{{ pem_server_ssl_port }}" pem at your
      browser
