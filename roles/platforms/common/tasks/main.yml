---

# Copyright Â© EnterpriseDB Corporation

- name: Set role=[] if no role is defined
  set_fact:
    role: []
  when:
    role is not defined

# Add 'postgres' to role when any of 'primary' or 'replica' or 'witness'
# is given, just as a convenience.

- name: Add implicit postgres role if needed
  set_fact:
    role: "{{ role|union(['postgres']) }}"
  when: >
    role|intersect(['primary', 'replica', 'witness', 'bdr']) is not empty

- set_fact:
    role: "{{ role|union(['readonly']) }}"
  when: >
    bdr_node_pause_in_standby|default(false)|bool

- name: Create role-based groups
  group_by: key="role_{{ item }}"
  with_items: "{{ role }}"

- name: Create group(s) based on the value of bdr_node_group
  group_by:
    key: "{{ bdr_node_group }}"
  when:
    role|contains('bdr', 'primary')

- name: Enumerate instances eligible to become first_bdr_primary
  set_fact:
    first_bdr_primary_candidates: "{{
      first_bdr_primary_candidates|default(_primary_candidates)
    }}"
  vars:
    ro_groups:
    - role_replica
    - role_readonly
    _primary_candidates: >
      {{ groups|members_of(bdr_node_group, not_in=ro_groups) }}
  when: >
    'bdr' in role

- name: Designate arbitrary r/w instance as first_bdr_primary
  set_fact:
    first_bdr_primary: "{{
      preferred_first_bdr_primary|default(first_bdr_primary_candidates|first)
    }}"
  when: >
    'bdr' in role

# If any instance is tagged with 'log-server', make every other instance
# log to it. This can be overriden by setting 'log_server' for any
# instance.

- name: Set common log_server for the entire cluster
  set_fact:
    log_server: "{{ groups[ls][0] }}"
  when: >
    log_server is not defined and
    ls in groups and groups[ls] is not empty and
    inventory_hostname != groups[ls][0]
  vars:
    ls: 'role_log-server'

# If any instance is tagged with 'monitoring-server', make every other
# instance use it as its monitoring server. This can be overriden by
# setting 'monitoring_server' for any instance.

- name: Set common monitoring_server for the entire cluster
  set_fact:
    monitoring_server: "{{ groups[ms][0] }}"
  when: >
    monitoring_server is not defined and
    ms in groups and groups[ms] is not empty and
    inventory_hostname != groups[ms][0]
  vars:
    ms: 'role_monitoring-server'

# If any instance is tagged with 'openvpn-server', make every other
# instance use it as its openvpn server. This can be overriden by
# setting 'openvpn_server' for any instance.

- name: Set common openvpn_server for the entire cluster
  set_fact:
    openvpn_server: "{{ groups[os][0] }}"
  when: >
    openvpn_server is not defined and
    os in groups and groups[os] is not empty and
    inventory_hostname != groups[os][0]
  vars:
    os: 'role_openvpn-server'

# If there's anything tagged as an openvpn server, we have to make sure
# vpn_network is defined.

- assert:
    msg: "Please define vpn_network to use sys/openvpn"
    that:
      - vpn_network is defined
  when: >
    'openvpn-server' in role

- include_tasks: hostvars.yml

- include_tasks: volumes.yml
