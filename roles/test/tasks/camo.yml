---

# Copyright Â© 2ndQuadrant Limited <info@2ndquadrant.com>

# We set "camo_node_group" (like "bdr_node_group") based on the sorted
# hostnames of CAMO partners, and create inventory groups based on the
# value, such that partners a and b will be in a group named camo_a_b.

- set_fact:
    camo_node_group: "camo_{{ [inventory_hostname,bdr_node_camo_partner]|sort|join('_') }}"
  when: bdr_node_camo_partner is defined

- name: Create group(s) based on the value of camo_node_group
  group_by:
    key: "{{ camo_node_group }}"
  when: camo_node_group is defined

# For now, we want to run tests only against one CAMO pair from another
# BDR instance (we want a BDR instance so that it has bdr_camo_client
# installed; other than that, any instance would do).

- set_fact:
    all_camo_groups: "{{ groups.keys()|select('startswith', 'camo_')|list }}"

- set_fact:
    possible_testers: "{{ groups|members_of('role_bdr', not_in=all_camo_groups)|list }}"

- set_fact:
    pair:
      - "{{ groups[all_camo_groups|first]|first }}"
      - "{{ groups[all_camo_groups|first]|last }}"
  when:
    all_camo_groups is not empty

- set_fact:
     via_haproxy: "{{ via_haproxy|default(False) }}"

- block:
  - name: Check test validity
    fail:
      msg: "Test cluster is unsupported. Requires haproxy node"
    when: groups['role_haproxy'] is undefined or groups['role_haproxy']|length == 0

  - name: Build haproxy backend list
    set_fact:
      haproxy_backend_list: "{{
        haproxy_backend_list|default([])|union([{
          'name': item,
          'backends': hostvars[item].haproxy_backends,
        }])
      }}"
    with_items: "{{ groups['role_haproxy'] }}"

  - set_fact:
      pair:
       - "{{ item['backends'][0] }}"
       - "{{ item['backends'][1] }}"
      haproxy_node: "{{ item['name'] }}"
    with_items:  "{{ haproxy_backend_list }}"
    when: hostvars[item.backends[0]]['bdr_node_camo_partner'] == item.backends[1] 

  - fail:
     msg: "Test cluster is unsupported. Requires haproxy backends to be camo pairs"
    when: haproxy_node is undefined
  when: via_haproxy

- name: Check if bdr_camo_client is available
  find:
    paths:
      - /usr/bin
      # includes old paths used by rpm and deb packages
      - "{{ postgres_bin_dir }}"
      - /usr/pgsql-11/bin
      - /usr/lib/postgresql/11/bin
    recurse: no
    patterns: bdr_camo_client
  register: client
  when:
    inventory_hostname in possible_testers

- name: Exclude possible_testers without bdr_camo_client installed
  set_fact:
    testers_with_client: "{{ testers_with_client|default([])|union([item]) }}"
  with_items: "{{ possible_testers }}"
  when:
    hostvars[item].client.files|default([]) is not empty

# If we have a suitable camo group and tester instance, we now run
# bdr_camo_client against the CAMO partners from the tester_instance,
# and cause the first partner to undergo various failures during the
# run. Otherwise we skip this test.

- debug:
    msg: "{{ groups[bdr_node_group] }}"
- debug:
    msg: "{{ all_camo_groups }}"
- debug:
    msg: "{{ testers_with_client }}"
  with_items: "{{ possible_testers }}"
  when:
    hostvars[item].client.files|default([]) is not empty

- name: Run bdr_camo_client tests
  block:
    - include_tasks: camo/bdr_camo_client.yml
      with_items: "{{ failures }}"
      loop_control:
        loop_var: failure
      vars:
        bdr_camo_client_path: "{{ (hostvars[item].client.files|first).path }}"
        tester_instance: "{{ testers_with_client|first }}"
        nondestructive_failures:
          - none
        destructive_failures:
          - none
          - partition
          - powerfail
        failures: "{{
          destroy_cluster|default(False)|ternary(destructive_failures, nondestructive_failures)
        }}"
      when:
        inventory_hostname in groups[bdr_node_group] or
        inventory_hostname == tester_instance
  when:
    all_camo_groups is not empty and
    testers_with_client|default([]) is not empty
