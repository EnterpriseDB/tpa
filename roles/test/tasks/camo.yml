---

# Copyright Â© 2ndQuadrant Limited <info@2ndquadrant.com>

# We set "camo_node_group" (like "bdr_node_group") based on the sorted
# hostnames of CAMO partners, and create inventory groups based on the
# value, such that partners a and b will be in a group named camo_a_b.

- set_fact:
    camo_node_group: "camo_{{ [inventory_hostname,bdr_node_camo_partner]|sort|join('_') }}"
  when: bdr_node_camo_partner is defined

- name: Create group(s) based on the value of camo_node_group
  group_by:
    key: "{{ camo_node_group }}"
  when: camo_node_group is defined

# For now, we want to run tests only against one CAMO pair from another
# BDR instance (we want a BDR instance so that it has bdr_camo_client
# installed; other than that, any instance would do).

- set_fact:
    all_camo_groups: "{{ groups.keys()|select('startswith', 'camo_')|list }}"

- set_fact:
    possible_testers: "{{ groups|members_of('role_bdr', not_in=all_camo_groups)|list }}"

- name: Check if bdr_camo_client is available
  stat:
    path: "{{ postgres_bin_dir }}/bdr_camo_client"
  register: client
  when:
    inventory_hostname in possible_testers

- name: Exclude possible_testers without bdr_camo_client installed
  set_fact:
    testers_with_client: "{{ testers_with_client|default([])|union([item]) }}"
  with_items: "{{ possible_testers }}"
  when:
    hostvars[item].client.stat.exists

# If we have a suitable camo group and tester instance, we now run
# bdr_camo_client against the CAMO partners from the tester_instance,
# and cause the first partner to undergo various failures during the
# run. Otherwise we skip this test.

- debug:
    msg: "{{ groups[bdr_node_group] }}"
- debug:
    msg: "{{ all_camo_groups }}"
- debug:
    msg: "{{ testers_with_client }}"

- name: Run bdr_camo_client tests
  block:
    - include_tasks: camo/bdr_camo_client.yml
      with_items: "{{ failures }}"
      loop_control:
        loop_var: failure
      vars:
        camo_test_group: "{{ all_camo_groups|first }}"
        tester_instance: "{{ testers_with_client|first }}"
        nondestructive_failures:
          - none
        destructive_failures:
          - none
          - partition
        failures: "{{
          destroy_cluster|default(False)|ternary(destructive_failures, nondestructive_failures)
        }}"
      when:
        inventory_hostname in groups[bdr_node_group] or
        inventory_hostname == tester_instance
  when:
    all_camo_groups is not empty and
    testers_with_client|default([]) is not empty
