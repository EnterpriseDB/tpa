---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

# For now, we want to run tests only against one CAMO pair from another
# BDR instance (we want a BDR instance so that it has bdr_camo_client
# installed; other than that, any instance would do).

- set_fact:
    possible_testers: "{{ groups|members_of('role_bdr', not_in=all_camo_groups)|list }}"

- set_fact:
    pair:
      - "{{ groups[all_camo_groups|first]|first }}"
      - "{{ groups[all_camo_groups|first]|last }}"
  when:
    all_camo_groups is not empty

- set_fact:
     via_haproxy: "{{ via_haproxy|default(False) }}"

- block:
  - name: Check test validity
    fail:
      msg: "Test cluster is unsupported. Requires haproxy node"
    when: groups['role_haproxy'] is undefined or groups['role_haproxy']|length == 0

  - name: Build haproxy backend list
    set_fact:
      haproxy_backend_list: "{{
        haproxy_backend_list|default([])|union([{
            'name': item,
            'backends': hostvars[item].haproxy_backend_servers,
          }])
        }}"
    with_items: "{{ groups['role_haproxy'] }}"

  - set_fact:
      haproxy_node: "{{ item['name'] }}"
      pgbouncer_port: "{{ pgbouncer_port|default('6432') }}"
    with_items: "{{ haproxy_backend_list }}"
    when:
      hostvars[item.backends[0]]['bdr_node_camo_partner'] is defined and
      hostvars[item.backends[0]]['bdr_node_camo_partner'] == item.backends[1]

  - fail:
      msg: "Test cluster is unsupported. Requires haproxy backends to be camo pairs"
    when: haproxy_node is undefined

  - name: Get haproxy_backend name
    postgresql_query:
      conninfo: "host={{ haproxy_node }} port={{ pgbouncer_port }}  dbname={{bdr_database}} user={{postgres_user}}"
      queries:
        - text: select interface_name from bdr.local_node_summary;
    register: interface
    become_user: "{{ postgres_user }}"
    become: yes
  - debug:
      var: interface.interface_name

  - set_fact:
      pair:
       - "{{ interface.interface_name }}"
       - "{{ hostvars[interface.interface_name]['bdr_node_camo_partner'] }}"
  - debug:
      var: pair
  when: via_haproxy

- name: Check if bdr_camo_client is available
  find:
    paths:
      - /usr/bin
      # includes old paths used by rpm and deb packages
      - "{{ postgres_bin_dir }}"
      - /usr/pgsql-11/bin
      - /usr/lib/postgresql/11/bin
    recurse: no
    patterns: bdr_camo_client
  register: client
  when:
    inventory_hostname in possible_testers

- set_fact:
    bdr_camo_client_path: "{{ client.files[0]['path'] }}"
  when:
    inventory_hostname in possible_testers
    and client.files is not empty

- name: Exclude possible_testers without bdr_camo_client installed
  set_fact:
    testers_with_client: "{{ testers_with_client|default([])|union([item]) }}"
  with_items: "{{ possible_testers }}"
  when:
    hostvars[item].client.files|default([]) is not empty

# If we have a suitable camo group and tester instance, we now run
# bdr_camo_client against the CAMO partners from the tester_instance,
# and cause the first partner to undergo various failures during the
# run. Otherwise we skip this test.

- debug:
    msg: "{{ groups[bdr_node_group] }}"
- debug:
    msg: "{{ all_camo_groups }}"
- debug:
    msg: "{{ testers_with_client }}"
  with_items: "{{ possible_testers }}"
  when:
    hostvars[item].client.files|default([]) is not empty

- name: Run tests
  block:
    - name: Run bdr_camo_client crash tests
      include_tasks: camo/crash_test.yml
      with_items: "{{ failures }}"
      loop_control:
        loop_var: failure
      vars:
        tester_instance: "{{ testers_with_client|first }}"
        stop_mode: "immediate"
        nondestructive_failures:
          - none
        destructive_failures:
          - none
          - partition
          - powerfail
          - postgres-down
        failures:
          "{{ destroy_cluster|default(False)
              |ternary(destructive_failures, nondestructive_failures) }}"
      when:
        ( inventory_hostname in groups[bdr_node_group] or inventory_hostname == tester_instance )
         and task_selector|permits('crash_test')
    - name: Run bdr rolling upgrade tests
      include_tasks: camo/upgrade_test.yml
      vars:
        tester_instance: "{{ testers_with_client|first }}"
        failure: "upgrade"
        tpa_2q_repositories: "{{ update_from_repo }}"
        pglogical_package_version: "{{ pgl_new_version }}"
        postgres_package_version: "{{ pg_new_version}}"
        bdr_package_version: "{{ bdr_new_version }}"
        extra_postgres_packages:
          common:
          - "postgresql11-bdr-test-{{ bdr_new_version }}"
      when:
        ( inventory_hostname in groups[bdr_node_group] or inventory_hostname == tester_instance )
         and 'upgrade_test' in task_select.includes
  when:
    all_camo_groups is not empty and
    testers_with_client|default([]) is not empty
