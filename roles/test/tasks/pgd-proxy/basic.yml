---

# Â© Copyright EnterpriseDB UK Limited 2015-2024 - All rights reserved.

- assert:
    msg: "This test may be applied only to pgd-proxy instances"
    that:
    - role|contains('pgd-proxy')

- include_role:
    name: test
    tasks_from: psycopg2.yml

# First, we check that connections through pgd-proxy to the backend
# database are TLS-protected from end-to-end (as a side effect, we
# ensure that we can connect and issue queries too).

- name: Ensure that connections through pgd-proxy are TLS-protected
  postgresql_query:
    conninfo: "{{ bdr_node_route_dsn|dbname('postgres', user=postgres_user, port= pgd_proxy_options['listen_port']) }}"
    query: >
      SELECT ssl
      FROM pg_stat_activity sa JOIN pg_stat_ssl ss USING (pid)
      WHERE pid = pg_backend_pid()
  register: q
  failed_when:
    q is not successful or not q.ssl
  vars:
    _task_environment:
      PGPASSWORD: "{{ vars['%s_password' % postgres_user] }}"
  environment: "{{ target_environment|combine(_task_environment) }}"

# check that configuration matches
# register the config summary

- name: gather current pgd-proxy configuration
  postgresql_query:
    conninfo: "{{ bdr_node_route_dsn|dbname(bdr_database, user=postgres_user, port=pgd_proxy_options['listen_port']) }}"
    query: >
      SELECT proxy_name, node_group_name,listen_addresses, listen_port, read_listen_port, max_client_conn, max_server_conn,
      cast(server_conn_timeout as text), cast(server_conn_keepalive as text), node_group_enable_proxy_routing,
      node_group_location, fallback_groups, cast(fallback_group_timeout as text)
      FROM bdr.proxy_config_summary
  register: proxy_config
  vars:
    _task_environment:
      PGPASSWORD: "{{ vars['%s_password' % postgres_user] }}"
  environment: "{{ target_environment|combine(_task_environment) }}"
  run_once: true

# use registered info to compare to node configuration.

# check existing fallback_groups configuration, compare to expected configuration.
# for fallback we check both empty and existing content to ensure that it's unset
# if no value is expected.

- name: Assert that fallback_groups matches expected configuration (when defined)
  assert:
    that: pgd_proxy_options['fallback_groups'] == this_proxy_config[0]['fallback_groups']
    msg: >
      Fallback groups does not match expected configuration for {{ inventory_hostname }}.
      got {{ this_proxy_config[0]['fallback_groups'] }}, expected {{ pgd_proxy_options['fallback_groups'] }}.
  vars:
    this_proxy_config: "{{ proxy_config.results|selectattr('proxy_name', 'equalto', inventory_hostname)|list }}"
  when:
    pgd_proxy_options['fallback_groups'] is defined

- name: Assert that fallback_groups matches expected configuration (when not defined)
  assert:
    that: this_proxy_config[0]['fallback_groups'] == None
    msg: >
      Fallback groups does not match expected configuration for {{ inventory_hostname }}.
      got {{ this_proxy_config[0]['fallback_groups'] }}, expected None.
      you might want to drop the proxy manually using bdr functions bdr.drop_proxy(proxy_name)
      and run deploy (or add it back using bdr.create_proxy(proxy_name, group)).
  vars:
    this_proxy_config: "{{ proxy_config.results|selectattr('proxy_name', 'equalto', inventory_hostname)|list }}"
  when:
    pgd_proxy_options["fallback_groups"] is not defined

# Ensure that fallback_groups doesn't loop to the same group

- name: Assert that fallback_groups does not loop.
  assert:
    that: this_proxy_config[0]['node_group_name'] == this_proxy_config[0]['fallback_groups']
    msg: >
      fallback_groups can't be the same as node_group_name,
      check group {{ this_proxy_config[0]['fallback_groups'] }}'s configuration.
  vars:
    this_proxy_config: "{{ proxy_config.results|selectattr('proxy_name','equalto', inventory_hostname)|list }}"
  when:
    pgd_proxy_options['fallback_groups'] is defined

# for other config keys we simply check if value match when defined in expected config
# otherwise we assume that default is set or that value is

- name: Assert that {{ item }} matches expected configuration
  assert:
    that: this_proxy_config[0][item] == pgd_proxy_options[item]
    msg: >
      {{ item }} does not match expected configuration for {{ inventory_hostname }}.
      got {{ this_proxy_config[0][item] }}, expected {{ pgd_proxy_options[item] }}.
  with_items: "{{ pgd_proxy_options.keys()|list }}"
  vars:
    this_proxy_config: "{{ proxy_config.results|selectattr('proxy_name', 'equalto', inventory_hostname)|list }}"
  when:
    item != 'fallback_groups'
