---

# Â© Copyright EnterpriseDB UK Limited 2015-2023 - All rights reserved.

- set_fact:
    ping: "{{ pair[0] }}"
    pong: "{{ pair[1] }}"
    camo_transactions: "{{ camo_transactions|default(10000) }}"
    camo_clients: "{{ camo_clients|default(50) }}"
    bdr_camo_client_args: "{{ bdr_camo_client_args|default('') }}"
    scope: "{{ scope|default('local') }}"
    sync_rep: "{{ sync_rep|default('async') }}"
    camo_mode: "{{ sync_rep|default('remote_commit_flush') }}"

- set_fact:
    bdr_dsn: "{{ ping }},{{ pong }}"
    haproxy_dsn: "{{ haproxy_node|default('') }} -p {{ pgbouncer_port|default(6432) }}"

- set_fact:
    bdr_camo_client_host_arg: "{{ via_haproxy|ternary(haproxy_dsn,bdr_dsn) }}"


- block:
  - name: Set sync rep availability
    postgresql_query:
      conninfo: "{{ hostvars[item].bdr_node_dsn }}"
      queries:
        - text: ALTER SYSTEM SET synchronous_replication_availability=%s;
          args:
            - "{{ sync_rep }}"
        - text: SELECT pg_reload_conf();
      autocommit: yes
    with_items:
        - "{{ ping }}"
        - "{{ pong }}"
    become_user: "{{ postgres_user }}"
    become: yes
  - name: Set camo mode
    postgresql_query:
      conninfo: "{{ hostvars[item].bdr_node_dsn }}"
      queries:
        - text: ALTER SYSTEM SET {{ _guc_prefix }}.enable_camo=%s;
          args:
            - "{{ camo_mode }}"
        - text: SELECT pg_reload_conf();
      autocommit: yes
    with_items:
        - "{{ ping }}"
        - "{{ pong }}"
    become_user: "{{ postgres_user }}"
    become: yes
    vars:
      _guc_prefix: >-
        {%- if bdr_version_num >= 30703 -%}bdr
        {%- else -%}pg2q
        {%- endif -%}
  - name: Create bdr_camo_client test table
    postgresql_query:
      conninfo: "{{ ping_conninfo }}"
      queries:
        - text: DROP TABLE IF EXISTS camo_test
        - text: >
            CREATE TABLE camo_test
            (key bigint NOT NULL
            , attempt_no bigint NOT NULL
            , ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            , node text
            , xact_id bigint
            , PRIMARY KEY (key, attempt_no))
    become_user: "{{ postgres_user }}"
    become: yes

  - name: Wait for DDL to replicate to BDR instances
    postgresql_query:
      conninfo: "{{ ping_conninfo }}"
      query: >
        select bdr.wait_slot_confirm_lsn(NULL, NULL)
    become_user: "{{ postgres_user }}"
    become: yes

  - set_fact:
      bdr_camo_client_output: "{{ postgres_home }}/bdr-camo-client-{{ failure }}.txt"
      run_time_output: "{{ postgres_home }}/camo_statistics-{{ failure }}.csv"

  - name: Run bdr_camo_client
    shell: >
      {{ bdr_camo_client_path }}
      -h {{ bdr_camo_client_host_arg }}
      -c 'INSERT INTO public.camo_test(key,attempt_no,node,xact_id) VALUES ($1, $2, (select node_name from bdr.local_node_summary), (select txid_current()));'
      -i {{ camo_transactions }} -j {{ camo_clients }}
      -s {{ scope }}
      {{ bdr_camo_client_args }}
      {{ bdr_database }} > {{ bdr_camo_client_output }} 2>&1
    register: client_run
    become_user: "{{ postgres_user }}"
    become: yes
    async: 7200
    poll: 0


  - name: Install run_time_check.py
    template:
      src: run_time_check.py.j2
      dest: "{{ postgres_home }}/run_time_check.py"
      owner: "{{ postgres_user }}"
      group: "{{ postgres_group }}"
      mode: "0755"
    become_user: "{{ postgres_user }}"
    become: yes

  - name: Start run_time_check script
    shell: >
      ./run_time_check.py
      "{{ hostvars[ping].bdr_node_dsn }}"
      "{{ hostvars[pong].bdr_node_dsn }}"
      "{{ bdr_node_dsn }}"
      "{{ run_time_output }}"
      'camo_test'  "{{ camo_transactions|int * camo_clients|int }}" > output.txt 2>&1
    args:
      chdir: "{{ postgres_home }}"
    register: check_run
    become_user: "{{ postgres_user }}"
    become: yes
    async: 7200
    poll: 0


  - name: Check that each thread has inserted at least one row
    postgresql_query:
      conninfo: "{{ ping_conninfo }}"
      queries:
      - text: >
          SELECT COUNT(1) FROM camo_test WHERE key < %s
        args:
        - "{{ camo_clients }}"
    register: done
    until: done.count >= camo_clients|int
    retries: 100
    become_user: "{{ postgres_user }}"
    become: yes
  vars:
    ping_conninfo: "{{ hostvars[ping].bdr_node_dsn }}"
    bdr_camo_client: "{{ postgres_bin_dir }}/bdr_camo_client"
  when:
    inventory_hostname == tester_instance
