---

# Copyright Â© 2ndQuadrant Limited <info@2ndquadrant.com>

- set_fact:
    ping: "{{ groups[camo_test_group]|first }}"
    pong: "{{ groups[camo_test_group]|last }}"
    camo_transactions: "{{ camo_transactions|default(1000) }}"
    camo_clients: "{{ camo_threads|default(200) }}"

- block:
  - name: Create bdr_camo_client test table
    postgresql_query:
      conninfo: "{{ ping_conninfo }}"
      queries:
        - text: DROP TABLE IF EXISTS camo_test
        - text: >
            CREATE TABLE camo_test
            (key bigint NOT NULL
            , attempt_no bigint NOT NULL
            , PRIMARY KEY (key, attempt_no))
    become_user: "{{ postgres_user }}"
    become: yes

  - name: Wait for DDL to replicate to BDR instances
    postgresql_query:
      conninfo: "{{ ping_conninfo }}"
      query: >
        select bdr.wait_slot_confirm_lsn(NULL, NULL)
    become_user: "{{ postgres_user }}"
    become: yes

  - set_fact:
      bdr_camo_client_output: /tmp/bdr-camo-client-{{ failure }}.txt

  - name: Run bdr_camo_client
    shell: >
      {{ bdr_camo_client }}
      -h {{ ping }},{{ pong }}
      -c 'INSERT INTO camo_test VALUES ($1, $2);'
      -i {{ camo_transactions }} -j {{ camo_clients }}
      {{ bdr_camo_client_args|default('') }}
      {{ bdr_database }} > {{ bdr_camo_client_output }} 2>&1
    register: client_run
    become_user: "{{ postgres_user }}"
    become: yes
    async: 7200
    poll: 0

  - name: Check that each thread has inserted at least one row
    postgresql_query:
      conninfo: "{{ bdr_node_dsn }}"
      queries:
      - text: >
          SELECT COUNT(1) FROM camo_test WHERE key < %s
        args:
        - "{{ camo_transactions }}"
    register: done
    until: done.count >= camo_clients|int
    retries: 3
    become_user: "{{ postgres_user }}"
    become: yes
  vars:
    ping_conninfo: "{{ hostvars[ping].bdr_node_dsn }}"
    bdr_camo_client: "{{ postgres_bin_dir }}/bdr_camo_client"
  when:
    inventory_hostname == tester_instance

- block:
  - name: Cause failure {{ failure }} on CAMO partner {{ ping }}
    include_role: name=test tasks_from="failures/{{ failure }}.yml"
  when:
    inventory_hostname == ping

- block:
  - name: Wait for bdr_camo_client to complete
    async_status: jid="{{ client_run.ansible_job_id }}"
    register: client
    until: client.finished
    retries: 600
    ignore_errors: yes
    become_user: "{{ postgres_user }}"
    become: yes

  - name: Save bdr_camo_client output
    fetch:
      src: "{{ bdr_camo_client_output }}"
      dest: "{{ output_dir }}/{{ inventory_hostname }}/{{ bdr_camo_client_output|basename }}"
      flat: yes

  - name: Fail if bdr_camo_client failed
    fail:
      msg: "bdr_camo_client failed"
    when: client is not successful
    tags: [camo, fail]
  vars:
    ping_conninfo: "{{ hostvars[ping].bdr_node_dsn }}"
  when: >
    inventory_hostname == tester_instance

- block:
  - name: Wait for DDL to replicate to BDR instances
    postgresql_query:
      conninfo: "{{ bdr_node_dsn }}"
      query: >
        select bdr.wait_slot_confirm_lsn(NULL, NULL)
    become_user: "{{ postgres_user }}"
    become: yes

  - name: Check that there are no duplicates or omissions
    postgresql_query:
      conninfo: "{{ bdr_node_dsn }}"
      query: >
        SELECT s, camo_test.key, COUNT(attempt_no)
          FROM generate_series(0, {{ camo_transactions }}*{{ camo_clients }}-1) AS s
          LEFT JOIN camo_test
            ON camo_test.key = s
          GROUP BY s, camo_test.key
          HAVING COUNT(attempt_no) <> 1
    register: dups
    become_user: "{{ postgres_user }}"
    become: yes
    failed_when:
      dups is not successful or dups.rowcount > 0
  when:
    inventory_hostname in groups[bdr_node_group]

- block:
  - name: Drop bdr_camo_client test table
    postgresql_query:
      conninfo: "{{ ping_conninfo }}"
      query: DROP TABLE camo_test
    become_user: "{{ postgres_user }}"
    become: yes
  vars:
    ping_conninfo: "{{ hostvars[ping].bdr_node_dsn }}"
  when: >
    inventory_hostname == tester_instance
