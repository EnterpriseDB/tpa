---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

- set_fact:
    ping: "{{ pair[0] }}"
    pong: "{{ pair[1] }}"
    camo_transactions: "{{ camo_transactions|default(1000) }}"
    camo_clients: "{{ camo_clients|default(200) }}"
    bdr_camo_client_args: "{{ bdr_camo_client_args|default('') }}"
    scope: "{{ scope|default('local') }}"

- set_fact:
    bdr_dsn: "{{ ping }},{{ pong }}"
    haproxy_dsn: "{{ haproxy_node|default('') }} -p {{ haproxy_port|default(6432) }}"

- set_fact:
    bdr_camo_client_host_arg: "{{ via_haproxy|ternary(haproxy_dsn,bdr_dsn) }}"

- block:
  - name: Create bdr_camo_client test table
    postgresql_query:
      conninfo: "{{ ping_conninfo }}"
      queries:
        - text: DROP TABLE IF EXISTS camo_test
        - text: >
            CREATE TABLE camo_test
            (key bigint NOT NULL
            , attempt_no bigint NOT NULL
            , PRIMARY KEY (key, attempt_no))
    become_user: "{{ postgres_user }}"
    become: yes

  - name: Wait for DDL to replicate to BDR instances
    postgresql_query:
      conninfo: "{{ ping_conninfo }}"
      query: >
        select bdr.wait_slot_confirm_lsn(NULL, NULL)
    become_user: "{{ postgres_user }}"
    become: yes

  - set_fact:
      bdr_camo_client_output: /tmp/bdr-camo-client-{{ failure }}.txt

  - name: Run bdr_camo_client
    shell: >
      {{ bdr_camo_client_path }}
      -h {{ bdr_camo_client_host_arg }}
      -c 'INSERT INTO camo_test VALUES ($1, $2);'
      -i {{ camo_transactions }} -j {{ camo_clients }}
      -s {{ scope }}
      {{ bdr_camo_client_args }}
      {{ bdr_database }} > {{ bdr_camo_client_output }} 2>&1
    register: client_run
    become_user: "{{ postgres_user }}"
    become: yes
    async: 7200
    poll: 0

  - name: Check that each thread has inserted at least one row
    postgresql_query:
      conninfo: "{{ ping_conninfo }}"
      queries:
      - text: >
          SELECT COUNT(1) FROM camo_test WHERE key < %s
        args:
        - "{{ camo_clients }}"
    register: done
    until: done.count >= camo_clients|int
    retries: 30
    become_user: "{{ postgres_user }}"
    become: yes
  vars:
    ping_conninfo: "{{ hostvars[ping].bdr_node_dsn }}"
    bdr_camo_client: "{{ postgres_bin_dir }}/bdr_camo_client"
  when:
    inventory_hostname == tester_instance

- debug:
    msg: "ping {{ ping }}"

- block:
  - name: Cause failure {{ failure }} on CAMO partner {{ pong }}
    include_role: name=test tasks_from="failures/{{ failure }}.yml"
  when:
      inventory_hostname == pong

- name: Upgrade host ping of the CAMO pair
  block:
  - include_role: name=sys/pkg tasks_from="os/{{ ansible_distribution }}/repositories.yml"

  - set_fact:
      all_postgres_packages: []

  - include_role:
      name: postgres/pkg
      tasks_from: list-packages.yml
    vars:
      list_varname: all_postgres_packages

  - debug:
      msg: "{{ all_postgres_packages }}"

  - name: Install latest Postgres packages
    package:
      name: "{{ all_postgres_packages }}"
      state: latest

  - include_role: name=postgres/restart
    vars:
      postgres_service_end_state: restarted
    become: yes

  - name: Wait for the CAMO partner to be connected and ready after restart
    postgresql_query:
      conninfo: "{{ ping_conninfo }}"
      queries:
      - text: >
          SELECT bdr.is_camo_partner_connected() AS connected, bdr.is_camo_partner_ready() AS ready
    register: status
    until: "status.results[0].connected and status.results[0].ready"
    retries: 180
    become_user: "{{ postgres_user }}"
    become: yes
    vars:
      ping_conninfo: "{{ hostvars[ping].bdr_node_dsn }}"
  when: inventory_hostname == ping

- name: Upgrade host pong of the CAMO pair
  block:
  - include_role: name=sys/pkg tasks_from="os/{{ ansible_distribution }}/repositories.yml"

  - set_fact:
      all_postgres_packages: []

  - include_role:
      name: postgres/pkg
      tasks_from: list-packages.yml
    vars:
      list_varname: all_postgres_packages

  - debug:
      msg: "{{ all_postgres_packages }}"

  - name: Install latest Postgres packages
    package:
      name: "{{ all_postgres_packages }}"
      state: latest

  - include_role: name=postgres/restart
    vars:
      postgres_service_end_state: restarted
    become: yes
  when: inventory_hostname == pong


- name: Upgrade all other nodes
  block:
  - include_role: name=sys/pkg tasks_from="os/{{ ansible_distribution }}/repositories.yml"

  - set_fact:
      all_postgres_packages: []

  - include_role:
      name: postgres/pkg
      tasks_from: list-packages.yml
    vars:
      list_varname: all_postgres_packages

  - debug:
      msg: "{{ all_postgres_packages }}"

  - name: Install latest Postgres packages
    package:
      name: "{{ all_postgres_packages }}"
      state: latest

  - include_role: name=postgres/restart
    vars:
      postgres_service_end_state: restarted
    become: yes
    with_items:
     - "{{ groups[bdr_node_group] }}"
    when: inventory_hostname == item
  when: inventory_hostname != ping and inventory_hostname != pong

- block:
  - name: Wait for bdr_camo_client to complete
    async_status:
      jid: "{{ client_run.ansible_job_id }}"
    register: client
    until: client.finished
    retries: 600
    ignore_errors: true
    become_user: "{{ postgres_user }}"
    become: yes

  - name: Save bdr_camo_client output
    fetch:
      src: "{{ bdr_camo_client_output }}"
      dest: "{{ output_dir }}/{{ inventory_hostname }}/{{ bdr_camo_client_output|basename }}"
      flat: yes

  - name: Fail if bdr_camo_client failed
    fail:
      msg: "bdr_camo_client failed"
    when:
      client is not successful
      and task_selector|permits('camo', 'fail')

  - name: Get LSN after bdr_camo_client run
    postgresql_query:
      conninfo: "{{ ping_conninfo }}"
      queries:
      - text: >
          SELECT pg_current_wal_lsn() as lsn
    register: target
    become_user: "{{ postgres_user }}"
    become: yes
  vars:
    ping_conninfo: "{{ hostvars[ping].bdr_node_dsn }}"
  when: >
    inventory_hostname == tester_instance

- block:
  - name: Wait for BDR instances to apply changes
    postgresql_query:
      conninfo: "{{ bdr_node_dsn }}"
      queries:
      - text: >
          SELECT pg_replication_origin_progress(%s, true) >= %s AS completed
        args:
        - "bdr_bdrdb_bdrgroup_{{ hostvars[ping].bdr_node_name }}"
        - "{{ hostvars[tester_instance].target.lsn }}"
    register: done
    until: done.completed
    retries: 60
    become_user: "{{ postgres_user }}"
    become: yes
  when:
    inventory_hostname in groups[bdr_node_group] and  inventory_hostname != ping

- block:
  - name: Check that there are no duplicates or omissions of camo txns
    postgresql_query:
      conninfo: "{{ bdr_node_dsn }}"
      query: >
        SELECT s, camo_test.key, COUNT(attempt_no)
          FROM generate_series(0, {{ camo_transactions }}*{{ camo_clients }}-1) AS s
          LEFT JOIN camo_test
            ON camo_test.key = s
          GROUP BY s, camo_test.key
          HAVING COUNT(attempt_no) <> 1
    register: dups
    become_user: "{{ postgres_user }}"
    become: yes
    failed_when:
      dups is not successful or dups.rowcount > 0
  when:
    inventory_hostname in groups[bdr_node_group] and  "global" not in bdr_camo_client_args

# Eager txns get aborted if any of the node is unreachable.
# So considering omissions its required to do a consistency check.
- block:
  - name: Check that there are no duplicates of eager txns
    postgresql_query:
      conninfo: "{{ bdr_node_dsn }}"
      query: >
        SELECT s, camo_test.key, COUNT(attempt_no)
          FROM generate_series(0, {{ camo_transactions }}*{{ camo_clients }}-1) AS s
          LEFT JOIN camo_test
            ON camo_test.key = s
          GROUP BY s, camo_test.key
          HAVING COUNT(attempt_no) > 1
    register: dups
    become_user: "{{ postgres_user }}"
    become: yes
    failed_when:
      dups is not successful or dups.rowcount > 0

  - name: Get total successful eager txns on ping for consistency check
    postgresql_query:
      conninfo: "{{ hostvars[ping].bdr_node_dsn }}"
      query: >
        SELECT count(*) FROM camo_test
    register: txns_on_ping
    become_user: "{{ postgres_user }}"
    become: yes

  - name: Check consistency on all nodes for eager txns
    postgresql_query:
      conninfo: "{{ bdr_node_dsn }}"
      query: >
        SELECT count(*) FROM camo_test
    register: local_txns
    become_user: "{{ postgres_user }}"
    become: yes
    failed_when:
      local_txns is not successful

  - assert:
      that:
         - "local_txns.count == txns_on_ping.count"
      msg: "This node has {{ local_txns.count }} while ping has {{ txns_on_ping.count }} successful txns"
    when: inventory_hostname != ping
  when:
    inventory_hostname in groups[bdr_node_group] and "global" in bdr_camo_client_args


- block:
  - name: Drop bdr_camo_client test table
    postgresql_query:
      conninfo: "{{ ping_conninfo }}"
      query: DROP TABLE camo_test
    become_user: "{{ postgres_user }}"
    become: yes
  vars:
    ping_conninfo: "{{ hostvars[ping].bdr_node_dsn }}"
  when: >
    inventory_hostname == tester_instance
