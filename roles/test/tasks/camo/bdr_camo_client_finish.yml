---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

- block:
  - name: Wait for node to recover
    wait_for:
      host: "{{ partner_conninfo }}"
      timeout: "{{ wait_for_partner }}"
  - name: Get workload status
    postgresql_query:
      conninfo: "{{ origin_conninfo }}"
      queries:
      - text: >
          SELECT COUNT(1) FROM camo_test
    register: xacts_on_origin
    become_user: "{{ postgres_user }}"
    become: yes
  - set_fact:
       expected_limit: "{{camo_clients|int*camo_transactions|int*0.7}}"
  - name: Check 30% workload still remains after partner recovery
    assert:
      that: xacts_on_origin.count|int  < expected_limit|int|abs
      msg: "More than 70% of workload is finished before partner recovery. Actual: {{ xacts_on_origin.count}} Expected < {{ expected_limit }}"
  vars:
    origin_conninfo: "{{ hostvars[origin].bdr_node_dsn }}"
    partner_conninfo: "{{ hostvars[partner].bdr_node_dsn }}"
  when: >
    inventory_hostname == tester_instance


- block:
  - name: Wait for bdr_camo_client to complete
    async_status:
      jid: "{{ client_run.ansible_job_id }}"
    register: client
    until: client.finished
    retries: 600
    ignore_errors: true
    become_user: "{{ postgres_user }}"
    become: yes

  - name: Save bdr_camo_client output
    fetch:
      src: "{{ bdr_camo_client_output }}"
      dest: "{{ output_dir }}/{{ inventory_hostname }}/{{ bdr_camo_client_output|basename }}"
      flat: yes

  - name: Fail if bdr_camo_client failed
    fail:
      msg: "bdr_camo_client failed"
    when:
      client is not successful
      and task_selector|permits('camo', 'fail', 'upgrade')

  - name: Get LSN after bdr_camo_client run
    postgresql_query:
      conninfo: "{{ origin_conninfo }}"
      queries:
      - text: >
          SELECT pg_current_wal_lsn() as lsn
    register: target
    become_user: "{{ postgres_user }}"
    become: yes
  vars:
    origin_conninfo: "{{ hostvars[origin].bdr_node_dsn }}"
  when: >
    inventory_hostname == tester_instance

- block:
  - name: Wait for BDR instances to apply changes
    postgresql_query:
      conninfo: "{{ bdr_node_dsn }}"
      queries:
      - text: >
          SELECT pg_replication_origin_progress(%s, true) >= %s AS completed
        args:
        - "bdr_bdrdb_bdrgroup_{{ hostvars[origin].bdr_node_name }}"
        - "{{ hostvars[tester_instance].target.lsn }}"
    register: done
    until: done.completed
    retries: 60
    ignore_errors: true
    become_user: "{{ postgres_user }}"
    become: yes
  when:
    inventory_hostname in groups[bdr_node_group] and  inventory_hostname != origin

- block:
  - name: Wait for run_time_check script to finish
    shell: |
      ps -ef | grep run_time_check | cut -d ' ' -f 2
    register: script_running
    until: script_running.stdout == ''
    retries: 20
    ignore_errors: true
  - name: Kill run_time_check script if not already finished. Possible data divergence.
    shell: |
       ps -ef | grep run_time_check | cut -d ' ' -f 2 || kill -9
    when: script_running is defined
    ignore_errors: true
  - name: Save run_time_check output
    fetch:
      src: "{{ run_time_output }}"
      dest: "{{ output_dir }}/{{ inventory_hostname }}/{{ run_time_output|basename }}"
      flat: yes
  when:
    inventory_hostname == tester_instance
