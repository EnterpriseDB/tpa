---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

# We must set harp_consensus_protocol for BDR and harp-proxy instances.
# The value may be set in config.yml, or set by minimal_postgres_setup
# above on an existing cluster, or be set to the default value for the
# harp_version in use. We use the value from first_bdr_primary, if any,
# to set the value for other instances.

- set_fact:
    harp_consensus_protocol: "{{
        harp_consensus_protocol
        |default(
          hostvars[first_bdr_primary].harp_consensus_protocol
          |default(default_harp_consensus_protocols[harp_version])
        )
      }}"
  when: >
    failover_manager == 'harp'
    and ('bdr' in role or 'harp-proxy' in role)

# This is the cluster_name to use in the pgd-{cli,proxy} configuration
# files, which should match bdr_node_group on new clusters, but should
# be set to whatever value is already in use for existing clusters.

- set_fact:
    pgd_cluster_name:
      "{{ pgd_cluster_name|default(bdr_node_group) }}"
    harp_cluster_name:
      "{{ harp_cluster_name|default(bdr_node_group) }}"

# We must ensure that instances within a single bdr_node_group, and any
# harp-proxy instances for the bdr_node_group, have the same setting of
# harp_consensus_protocol.

- assert:
    msg: >-
      Every bdr and harp-proxy instance with bdr_node_group={{ bdr_node_group }}
      must have harp_consensus_protocol={{ harp_consensus_protocol }}, but
      {{ _mismatch_descriptions|join(", ") }}
    that:
      _mismatched_instances is empty
  vars:
    _group_proxies: "{{
        groups['role_harp-proxy']
        |default([])
        |select_by_hostvar(hostvars, 'bdr_node_group', bdr_node_group)
        |list
      }}"
    _all_group_instances: "{{
        groups[bdr_node_group]|union(_group_proxies)
      }}"
    _compliant_instances: "{{
        _all_group_instances
        |select_by_hostvar(hostvars, 'harp_consensus_protocol', harp_consensus_protocol)
        |list
      }}"
    _mismatched_instances: "{{
        _all_group_instances|symmetric_difference(_compliant_instances)
      }}"
    _mismatch_descriptions: "{{
        _mismatched_instances
        |map('pyformat_hostvars', '{inventory_hostname} has the value {harp_consensus_protocol}', hostvars)
        |list
      }}"
  when: >
    'bdr' in role
    and failover_manager == 'harp'
    and inventory_hostname == first_bdr_primary

# If we are using HARP v2 with etcd as the consensus layer, and there
# are no instances explicitly labelled with `role: etcd`, we add the
# etcd role to all BDR primary candidates and witnesses.

- name: Add etcd role to BDR instances if required
  set_fact:
    role: "{{ role|union(['etcd']) }}"
  when: >
    'bdr' in role
    and failover_manager == 'harp'
    and harp_consensus_protocol == 'etcd'
    and groups['role_etcd']|default([]) is empty
    and (inventory_hostname in first_bdr_primary_candidates
      or 'witness' in role)

- name: Recreate role_etcd group after role changes
  group_by:
    key: "role_etcd"
  when: >
    'etcd' in role
  changed_when: false
