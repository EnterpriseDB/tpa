---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

- name: Set default environment
  set_fact:
    target_environment: "{{ target_environment|default({}) }}"

# The list 'ip_addresses' is a list of text strings which are the keys
# in the host vars whose values are ip addresses. It is used when
# checking that streaming is set up correctly and contains strings
# corresponding to all of the node's ip addresses that we know about.

- name: Set ip_addresses to []
  set_fact:
    ip_addresses: []

- name: Add private_ip to the address list
  set_fact:
    ip_addresses: "{{ ip_addresses|union(['private_ip']) }}"
  when:
    private_ip is defined

- name: Add public_ip to the address list
  set_fact:
    ip_addresses: "{{ ip_addresses|union(['public_ip']) }}"
  when:
    public_ip is defined

- name: Add ip_address to the address list
  set_fact:
    ip_addresses: "{{ ip_addresses|union(['ip_address']) }}"
  when:
    ip_address is defined

- name: Set primary IP address
  set_fact:
    ip_address: "{{ private_ip|default(public_ip) }}"
  when:
    ip_address is not defined

- name: Set default hostname_aliases
  set_fact:
    hostname_aliases: "{{ hostname_aliases|default({}) }}"

- name: Set tpa_2q_repositories from twoq_repositories (compat)
  set_fact:
    tpa_2q_repositories: "{{ twoq_repositories }}"
  when:
    tpa_2q_repositories is not defined and
    twoq_repositories is defined

# For backwards compability, we translate postgresql_flavour to
# postgres_flavour (but new configurations will only use the latter).

- set_fact:
    postgres_flavour: "{{ postgresql_flavour }}"
  when:
    postgres_flavour is not defined
    and postgresql_flavour is defined

# We set the postgres_flavour: pgextended to maintain backwards compatibility
# with existing clusters that have postgres_flavour: 2q explicitly set.

- set_fact:
    postgres_flavour: pgextended
  when:
    postgres_flavour is defined
    and postgres_flavour == '2q'

- set_fact:
    failover_manager: harp
  when:
    failover_manager is not defined
    and enable_harp|default(false)|bool

- assert:
    msg: HARP v1 is no longer recommended or supported, please use HARP
      v2 instead
    that:
      harp_version is not defined or harp_version|int != 1

# If the cluster_dir contained cluster_name.{key,crt} files, we used to
# install them instead of the self-signed certificates on the Postgres
# instances. This behaviour is no longer supported, so we error out if
# the files exist.
#
# TODO: document the recommended alternative certificate mechanism.

- name: Ensure the legacy certificate installation mechanism is not used
  assert:
    msg: >
      Installing the {{ cluster_name }}.key and .crt files is no longer
      supported (but they will not be removed from instances where they
      are already installed); please remove the files to continue.
    that: legacy_certs is empty
  vars:
    legacy_certs:
      "{{ lookup('fileglob',
                 '%s/%s.key' % (cluster_dir, cluster_name),
                 '%s/%s.crt' % (cluster_dir, cluster_name)) }}"

# To use shared PEM server in a given cluster get a username/password for
# the PEM backend database that agents can use to register themselves, put
# them in a file and export EDB_PEM_CREDENTIALS_FILE=/path/to/file in the
# environment. The file contains a single line with "username:password".

- block:
  - stat:
      path: "{{ _file }}"
    register: _credsfile
    delegate_to: localhost
  - assert:
      msg: "EDB_PEM_CREDENTIALS_FILE={{ _file }} must exist and have mode 0600"
      that:
      - _credsfile.stat.exists
      - _credsfile.stat.mode == '0600'
  - assert:
      msg: "EDB_PEM_CREDENTIALS_FILE={{ _file }} must contain username:password"
      that:
      - _credentials != ''
      - _credentials.split(':')|length == 2
    vars:
      _credentials: "{{ lookup('file', _file) }}"
  vars:
    _file: "{{ lookup('env', 'EDB_PEM_CREDENTIALS_FILE') }}"
  when:
    pem_server is defined
    and (hostvars[pem_server].pem_shared|default(false)) is true
