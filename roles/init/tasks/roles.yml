---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

- name: Set role=[] if no role is defined
  set_fact:
    role: []
  when:
    role is not defined

# Certain roles, when assigned to any instance, may change the roles of
# other instances. For example, if there is a pem-server instance, the
# Postgres instances all become pem-agent instances too. So we create
# role_xxx groups for those roles first, and then recreate all groups
# after we're done modifying instance roles.

- name: Create role-based groups for roles which affect other instances
  group_by:
    key: "role_{{ item }}"
  when: item in role
  with_items:
  - log-server
  - pem-server
  - openvpn-server
  - monitoring-server
  changed_when: false

# If an instance has 'log-server' in its role, we set it as the default
# log_server for every other instance.

- name: Set common log_server for the entire cluster
  set_fact:
    log_server: "{{ groups[ls][0] }}"
  when: >
    log_server is not defined
    and groups[ls]|default([]) is not empty
    and inventory_hostname != groups[ls][0]
  vars:
    ls: 'role_log-server'

# If an instance has 'monitoring-server' in its role, we set it as the
# default monitoring_server for every other instance.

- name: Set common monitoring_server for the entire cluster
  set_fact:
    monitoring_server: "{{ groups[ms][0] }}"
  when: >
    monitoring_server is not defined
    and groups[ms]|default([]) is not empty
    and inventory_hostname != groups[ms][0]
  vars:
    ms: 'role_monitoring-server'

# If an instance has 'openvpn-server' in its role, we set it as the
# default openvpn_server for every other instance.

- name: Set common openvpn_server for the entire cluster
  set_fact:
    openvpn_server: "{{ groups[os][0] }}"
  when: >
    openvpn_server is not defined
    and groups[os]|default([]) is not empty
    and inventory_hostname != groups[os][0]
  vars:
    os: 'role_openvpn-server'

- assert:
    msg: "Please define vpn_network to use sys/openvpn"
    that:
      - vpn_network is defined
  when: >
    'openvpn-server' in role

- set_fact:
    pem_enabled: false

- name: Record if we have PEM instance(s) in the cluster
  set_fact:
    pem_enabled: true
  when: >
    groups['role_pem-server']|default([]) is not empty
    or groups['role_pem-agent']|default([]) is not empty

# If any instance has 'pem-server' in its role, we set the first one as
# pem_server for all instance where the value is not set. instances with
# 'pem-server' role define themselves as 'pem_server' to avoid registering
# to a different 'pem-server' if multiple ones are defined.


- name: Set a valid pem_server for the cluster
  set_fact:
    pem_server: "{{ ('pem-server' in role)|ternary(inventory_hostname, groups[ps][0]) }}"
  when: >
    pem_server is not defined
    and groups[ps]|default([]) is not empty
  vars:
    ps: 'role_pem-server'

# PEM servers also need to run Postgres.

- name: Add implicit primary role to pem-server instances
  set_fact:
    role: "{{ role|union(['primary']) }}"
  when: >
    'pem-server' in role
    and 'replica' not in role

# All BDR instances are primaries unless they are replicas. (This is
# just to reduce the number of roles to explicitly assign to each BDR
# instance.)

- name: Add implicit primary role to BDR instances
  set_fact:
    role: "{{ role|union(['primary']) }}"
  when: >
    'bdr' in role
    and 'replica' not in role

# BDR "logical standby" instances are represented by bdr+readonly (the
# choice of 'readonly' is a bit misleading, because these instances are
# also primaries, but it's not worth changing).

- name: Add implicit readonly role to BDR pause_in_standby instances
  set_fact:
    role: "{{ role|union(['readonly']) }}"
  when: >
    bdr_node_pause_in_standby|default(false)|bool

# A node with the "witness" role in an efm cluster gets "efm-witness"
# instead

- name: Add efm-witness role to witnesses if needed
  set_fact:
    role: "{{ role|union(['efm-witness']) }}"
  when: >
    'witness' in role
    and failover_manager == 'efm'

- name: Remove witness role from efm witnesses
  set_fact:
    role: "{{ role|difference(['witness'])}}"
  when: >
    'efm-witness' in role

# Add 'postgres' to role when any of 'primary' or 'replica' or 'witness'
# is given, just as a convenience.

- name: Add implicit postgres role if needed
  set_fact:
    role: "{{ role|union(['postgres']) }}"
  when: >
    role|intersect(['primary', 'replica', 'witness', 'bdr']) is not empty

# If there's a PEM server in the cluster, all Postgres (for now)
# instances should run the pem-agent.

- name: Add implicit pem-agent role to postgres instances
  set_fact:
    role: "{{ role|union(['pem-agent']) }}"
  when: >
    pem_server is defined
    and 'postgres' in role
    and 'pem-server' not in role

- name: Create role-based groups
  group_by:
    key: "role_{{ item }}"
  with_items: "{{ role }}"
  changed_when: false

- name: Create group(s) based on the value of bdr_node_group
  group_by:
    key: "{{ bdr_node_group }}"
  when:
    role|contains('bdr', 'primary')
  changed_when: false

- name: Enumerate instances eligible to become first_bdr_primary
  set_fact:
    first_bdr_primary_candidates:
      "{{ first_bdr_primary_candidates|default(_primary_candidates) }}"
  vars:
    ro_groups:
    - role_replica
    - role_readonly
    - role_subscriber-only
    - role_witness
    _primary_candidates: >
      {{ groups|members_of(bdr_node_group, not_in=ro_groups) }}
  when: >
    'bdr' in role
    or 'harp-proxy' in role

- name: Ensure BDR candidates fact is established on downloader instance
  set_fact:
    first_bdr_primary_candidates: "{{ [inventory_hostname] }}"
  when: >
    'downloader' in role
    and 'bdr' in role

- name: Designate arbitrary r/w instance as first_bdr_primary
  set_fact:
    first_bdr_primary:
      "{{ preferred_first_bdr_primary
          |default(first_bdr_primary_candidates|first) }}"
  when: >
    ('bdr' in role or 'harp-proxy' in role)
    and (preferred_first_bdr_primary is defined
      or first_bdr_primary_candidates is not empty)
