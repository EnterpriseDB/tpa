---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

# In platforms/common/inventory/write.yml, we write a list of attached
# volumes for each instance to host_vars/name/01-instance_vars.yml:
#
# volumes:
#   - device: /dev/sda1
#   - device: /dev/md0
#     volume_for: postgres_data
#   - device: /dev/xvdf
#     mountpoint: /var/lib/barman
#   - device: /dev/xvdg
#     mountpoint: /foo
#     foo: 42
#   - device: /dev/xvdf
#
# We translate volume_for into a mountpoint, sort volumes based on their
# mountpoint (so that /opt/postgres is mounted before /opt/postgres/wal
# regardless of their relative positions), and invoke sys/fs on each
# (device,mountpoint) thus derived.
#
# (We ignore volumes without volume_for or a mountpoint, like the first
# and last entries above, because there's nothing we can do for them.)

- set_fact:
    volumes: >
      {{
        volumes
        |select('contains_any', 'mountpoint', 'volume_for')
        |map('translate_volume_deployment_defaults')
        |sort(attribute='mountpoint')
      }}

# We end up with a list that looks like this:
#
# volumes:
#   - device: /dev/md0
#     mountpoint: /opt/postgres
#   - device: /dev/xvdf
#     mountpoint: /var/lib/barman
#   - device: /dev/xvdg
#     mountpoint: /foo
#     foo: 42
#
# Note that any extra settings (either from host_vars, or from the table
# of translations above) are retained in this list, as for /dev/xvdg. We
# could eventually use this to pass in uid/gid/SELinux context.

- name: Remember whether the postgres/barman volumes are encrypted
  set_fact:
    barman_volume_mountable: >-
      {{ volumes|json_query("[?volume_for=='barman_data']")|length != 0 }}
    postgres_volume_mountable: >-
      {{ volumes|json_query("[?volume_for=='postgres_data']")|length != 0 }}
    barman_volume_encrypted: >-
      {{ volumes|json_query("[?volume_for=='barman_data' && encryption]")|length != 0 }}
    postgres_volume_encrypted: >-
      {{ volumes|json_query("[?volume_for=='postgres_data' && encryption]")|length != 0 }}

# If you enable device-level encryption for any volume (which has
# volume_for set, i.e., whose purpose we know), you must also enable
# encryption for all the rest. It's not sensible to mix encrypted and
# unencrypted volumes.
#
# XXX This check doesn't warn against having an encrypted postgres_data
# volume but an unencrypted barman_data one, because the two volumes are
# likely to be on different instances.

- name: Ensure that all known volumes have the same encryption setting
  assert:
    msg: >-
      All volumes (data, wal, tablespaces, barman) must have the same
      encryption setting
    that:
      known_volumes|length == encrypted_volumes|length
  vars:
    known_volumes: >-
      {{ volumes|json_query("[?volume_for]") }}
    encrypted_volumes: >-
      {{ known_volumes|json_query("[?encrypted]") }}
  when:
    encrypted_volumes is not empty
