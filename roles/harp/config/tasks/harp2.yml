---

# Â© Copyright EnterpriseDB UK Limited 2015-2023 - All rights reserved.

- name: Install HARP cluster bootstrap configuration file
  template:
    src: harp2.cluster.init.j2
    dest: "{{ harp_directory }}/harp.cluster.init.yml"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "0644"
  vars:
    bdr_ro_groups:
    - role_replica
    - role_readonly
    - role_subscriber-only
    - role_witness
  notify: Note HARP bootstrap required
  when:
    initialise_harp|bool

- name: Are cert_file and key_file both set or none are set
  assert:
    that: >
      (harp_http_options['cert_file'] is defined
      and harp_http_options['key_file'] is defined)
      or
      not ( harp_http_options['cert_file'] is defined
        or harp_http_options['key_file'] is defined )
    fail_msg: >
      One of cert_file or key_file is defined but not both.
      Define both cert_file and key_file to use your already existing cert and key.
      Otherwise don't define any and TPA will generate cert and key file using a cluster
      specific CA certificate.
  run_once: true

- name: Ensure cert and key provided are present
  block:
  - name: Stat cert_file {{ harp_http_options['cert_file'] }}
    stat:
      path: "{{ harp_http_options['cert_file'] }}"
    register: stat_cert

  - name: Stat key_file {{ harp_http_options['key_file'] }}
    stat:
      path: "{{ harp_http_options['key_file'] }}"
    register: stat_key

  - name: Ensure cert and key provided exist
    assert:
      that: >
        stat_key.stat.exists
        and stat_cert.stat.exists
      fail_msg: >
        cert_file and key_file are missing, ensure that both are present
        before retrying deploy.

  when: >
    harp_http_options['cert_file'] is defined
    and harp_http_options['key_file'] is defined
    and harp_http_options['secure']

- name: Set up SSL certificate for harp-proxy https probes
  block:

  - name: Generate SSL certificate for harp-proxy https probes
    include_tasks: ssl.yml

  - name: Update certs path for http config section
    set_fact:
      harp_http_options: "{{ harp_http_options|
        combine(secure_certs, recursive=true) }}"
    vars:
      secure_certs:
        'cert_file': "{{ harpproxy_ssl_cert_file }}"
        'key_file': "{{ harpproxy_ssl_key_file }}"
  when: >
    harp_http_options['enable']
    and harp_http_options['secure']
    and not( harp_http_options['cert_file'] is defined
          or harp_http_options['key_file'] is defined )

- name: Record whether HARP proxy and manager are co-hosted
  set_fact:
    harp_cohost: "{{ 'bdr' in role and 'harp-proxy' in role }}"

- name: Install HARP-proxy configuration file
  template:
    src: harp2.config.j2
    dest: "{{ harp_directory }}/{{ prefix }}config.yml"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "0644"
  vars:
    pgbouncer_bin_dirs:
      Debian: /usr/sbin
      RedHat: /usr/bin
    pgbouncer_bin_dir: "{{ pgbouncer_bin_dirs[ansible_os_family] }}"
    config_for: 'proxy'
    prefix: "{{ harp_cohost|ternary('proxy-','') }}"
  notify: Note HARP restart required
  when: >
    initialise_harp|bool
    and 'harp-proxy' in role

- name: Install HARP manager configuration file
  template:
    src: harp2.config.j2
    dest: "{{ harp_directory }}/config.yml"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "0644"
  vars:
    pgbouncer_bin_dirs:
      Debian: /usr/sbin
      RedHat: /usr/bin
    pgbouncer_bin_dir: "{{ pgbouncer_bin_dirs[ansible_os_family] }}"
    config_for: 'manager'
  notify: Note HARP restart required
  when: >
    initialise_harp|bool
    and 'postgres' in role

# Instances with harp-proxy in role will install pgbouncer (via package
# dependencies), but harp_proxy will manage the pgbouncer configuration.
# So we don't use the pgbouncer role, but we still need to provide the
# pgbouncer_auth_user and generate /etc/harp/userlist.txt.

- include_role: name=postgres/createuser
  vars:
    username: "{{ pgbouncer_auth_user }}"
    password_encryption: md5
  when: >
    ('harp-proxy' in role and 'pgbouncer' not in role)
    or ('postgres' in role
      and groups['role_harp-proxy']|default([]) is not empty)
  tags: always

# If we want harp-proxy to use a separate readonly user, we need to
# create it too (and specify the username in the DCS configuration).

- include_role: name=postgres/createuser
  vars:
    username: "{{ harp_dcs_user }}"
  when: >
    harp_dcs_user is defined
    and ('harp-proxy' in role
      or ('postgres' in role
        and groups['role_harp-proxy']|default([]) is not empty))
  tags: always

- include_tasks: harp2-proxy.yml
  when: >
    'harp-proxy' in role
