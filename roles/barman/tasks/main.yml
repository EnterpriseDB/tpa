---

# Â© Copyright EnterpriseDB UK Limited 2015-2024 - All rights reserved.

# This role can be safely applied to every instance. It will set up the
# Barman instances and any Postgres instances that need to be backed up.

# First, we generate an ssh keypair for postgres (this has probably
# already been done), and likewise for barman.

- include_role: name=sys/ssh tasks_from=keygen.yml
  vars:
    ssh_username: "{{ postgres_user }}"

- include_role: name=sys/ssh tasks_from=keygen.yml
  vars:
    ssh_username: "{{ barman_user }}"

- name: Install Barman
  include_role:
    name: barman/pkg
    apply:
      tags: [barman, pkg]
  tags: pkg

# Allow postgres@ on any Postgres server to ssh to barman@ on any
# Barman server.

- include_role: name=sys/ssh tasks_from=authorize.yml
  vars:
    ssh_username: "{{ barman_user }}"
    ssh_key_name: "id_{{ postgres_user }}"
  when: >
    'barman' in role

# Install barman's own keypair too.

- include_role: name=sys/ssh tasks_from=install.yml
  vars:
    ssh_username: "{{ barman_user }}"
  when: >
    'barman' in role

# Allow barman to ssh to postgres on any Postgres server.
#
# We could try to do this for only those servers that are specifically
# designated as needing to be backed up, but we don't want to prevent
# barman from ssh'ing to the corresponding replicas. (In any case,
# barman could ssh to postgres on the primary and thence to the
# replica, so there's no point trying to be more restrictive.)

- include_role: name=sys/ssh tasks_from=authorize.yml
  vars:
    ssh_username: "{{ postgres_user }}"
    ssh_key_name: "id_{{ barman_user }}"
  when: >
    'postgres' in role

# The barman and streaming_barman users must be created on any primary
# that we want to backup (whether directly or through a replica), and
# their passwords must be in ~barman/.pgpass on the backup server. We
# create the users on *every* primary straightaway.

- include_role: name=postgres/createuser
  vars:
    username: barman
    role_attrs: [superuser]
  tags: always

- include_role: name=postgres/createuser
  vars:
    username: streaming_barman
    role_attrs: [replication]
  tags: always

# The barman-pre-config hook is triggered after installing Barman and
# setting up the users, but before Barman is configured.

- name: Include barman-pre-config hook
  include_tasks: "{{ hook }}"
  when:
    lookup('first_found', dict(files=hook, skip=True))
  vars:
    hook: "{{ cluster_dir }}/hooks/barman-pre-config.yml"
  tags: always

# On any instance tagged as a Barman server (i.e., where tags.role
# includes 'barman'), it will install and configure Barman.

- include_tasks:
    file: server.yml
    apply:
      tags: barman
  when: >
    'barman' in role

# On any instance that must be backed up (i.e., with tags.backup set to
# the name of a Barman server), it will perform the necessary
# client-side configuration.

- include_tasks:
    file: client.yml
    apply:
      tags: barman
  with_items: "{{ backup|default([]) }}"
  loop_control:
    loop_var: this_barman
  vars:
    slot_name: "{{ this_barman|backup_slot_name }}"

# On any other kind of instance, we do nothing.
