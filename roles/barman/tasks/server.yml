---

# Â© Copyright EnterpriseDB UK Limited 2015-2023 - All rights reserved.

# These tasks are executed on any Barman server instance.

- name: Ensure cron daemon is running
  service:
    name: "{{ service_name[ansible_os_family] }}"
    state: started
  vars:
    service_name:
      Debian: cron
      RedHat: crond
      SUSE: cron

- name: Check which compression program is available
  shell: >
    for p in pigz bzip2 gzip; do
    if command -v $p >/dev/null 2>&1; then echo $p; break; fi;
    done
  register: compressor
  changed_when: false
  check_mode: no

- name: Set default_barman_compression
  set_fact:
    default_barman_compression: "{{ compressor.stdout.strip() or 'none' }}"

- name: Ensure that barman_home exists with the right ownership and permissions
  file:
    path: "{{ barman_home }}"
    owner: "{{ barman_user }}"
    group: "{{ barman_group }}"
    mode: "0750"
    state: directory

- name: Install global Barman configuration file
  template:
    src: barman.conf.j2
    dest: /etc/barman.conf
    owner: root
    group: root
    mode: "0644"

- name: Install /etc/tpa/barman-home-ok
  template:
    src: barman-home-ok.j2
    dest: /etc/tpa/barman-home-ok
    owner: root
    group: root
    mode: "0755"
  register: barman_home_ok

- name: Restart cron once in docker containers
  block:
    - name: Restart cron
      service:
        name: "{{ cron_service_names[ansible_os_family] }}"
        state: restarted
      vars:
        cron_service_names:
          Debian: cron
          RedHat: crond
          SUSE: cron
  when: >
    barman_home_ok is changed and
    platform in ['docker']

- name: Test barman-home-ok before invoking barman cron
  lineinfile:
    path: /etc/cron.d/barman
    regexp: 'barman -q cron$'
    line: >-
      * * * * * barman /etc/tpa/barman-home-ok && /usr/bin/barman -q cron

- name: Ensure /etc/barman.d exists
  file:
    path: /etc/barman.d
    owner: root
    group: root
    mode: "0755"
    state: directory

- include_role: name=postgres/pgpass
  vars:
    pgpassfile: ~barman/.pgpass
    pgpass_owner: "{{ barman_user }}"
    pgpass_group: "{{ barman_group }}"
    pgpass_users:
    - barman
    - streaming_barman

- name: Set correct ownership and mode on ~/.postgresql
  file:
    path: ~barman/.postgresql
    owner: "{{ barman_user }}"
    group: "{{ barman_group }}"
    state: directory
    mode: "0700"

- name: Retrieve list of key/certificate files
  command: >
    find ~{{ barman_user }}/.postgresql -name '*.crt' -o -name '*.key'
  register: keycertfiles
  changed_when: false
  check_mode: no

- name: Set correct ownership and mode on key/certificate files
  file:
    path: "{{ item }}"
    owner: "{{ barman_user }}"
    group: "{{ barman_group }}"
    mode: "0600"
  with_items: "{{ keycertfiles.stdout_lines }}"

# Barman's version-parsing code can get into trouble with 2ndQPostgres
# version strings. For example, if pg_receivewal --version returns the
# following string:
#
# pg_receivewal (PostgreSQL) 11.1 (2ndQPG 11.1r1.4) (Debian 2:11.1r2ndq1.4~git150.g805a872-1.stretch+1)
#
# Barman will refuse to start pg_receivewal altogether:
#
#       pg_receivexlog compatible: FAILED (PostgreSQL version: 11.1, pg_receivexlog version: 2:11.1r2ndq1.4~git150.g805a872-1.stretch+1))
#
# The only workaround available is to install a command wrapper that
# produces pared-down --version output.

- set_fact:
    _pg_receive_wal: "pg_receive{{ wal_or_xlog }}"

- name: Determine pg_receivewal ownership and permissions
  stat:
    path: "{{ postgres_bin_dir }}/{{ _pg_receive_wal }}"
  register: cmd

- name: Move pg_receivewal aside to pg_receivewal.orig
  command: >
    mv {{ postgres_bin_dir }}/{{ _pg_receive_wal }} {{ postgres_bin_dir }}/{{ _pg_receive_wal }}.orig
  args:
    creates: "{{ postgres_bin_dir }}/{{ _pg_receive_wal }}.orig"

- name: Install pg_receivewal command wrapper
  copy:
    dest: "{{ postgres_bin_dir }}/{{ _pg_receive_wal }}"
    owner: "{{ cmd.stat.pw_name }}"
    group: "{{ cmd.stat.gr_name }}"
    mode: "{{ cmd.stat.mode }}"
    content: |
      #!/bin/bash
      if [[ "$1" == "--version" ]];
      then exec {{ real_binary }} --version|sed -e 's/\(([^)]*) *\)*$//';
      else exec {{ real_binary }} "$@";
      fi
  vars:
    real_binary: >-
      {{ postgres_bin_dir }}/{{ _pg_receive_wal }}.orig

# We install a per-client configuration file in /etc/barman.d and create
# a cron job to backup each client in client.yml by delegating to the
# designated backup server.

- include_role: name=pgbackupapi
  when:
    enable_pg_backup_api|bool
