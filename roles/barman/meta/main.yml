---

dependencies:
  # First, we generate an ssh keypair for postgres (this has probably
  # already been done), and likewise for barman.

  - role: sys/ssh/keygen
    ssh_user: "{{ postgres_user }}"

  - role: sys/ssh/keygen
    ssh_user: barman

  # Install Barman packages.

  - role: barman/pkg
    when: >
      'barman' in role

  # Allow postgres@ on any Postgres server to ssh to barman@ on any
  # Barman server.

  - role: sys/ssh/authorize
    ssh_user: barman
    ssh_key_name: id_postgres
    when: >
      'barman' in role

  # Install barman's own keypair too.

  - role: sys/ssh/install
    ssh_user: barman
    when: >
      'barman' in role

  # Allow barman to ssh to postgres on any Postgres server.
  #
  # We could try to do this for only those servers that are specifically
  # designated as needing to be backed up, but we don't want to prevent
  # barman from ssh'ing to the corresponding replicas. (In any case,
  # barman could ssh to postgres on the primary and thence to the
  # replica, so there's no point trying to be more restrictive.)

  - role: sys/ssh/authorize
    ssh_user: "{{ postgres_user }}"
    ssh_key_name: id_barman
    when: >
      'postgres' in role or 'postgres-xl' in role

  # The barman and streaming_barman users must be created on any primary
  # that we want to backup (whether directly or through a replica), and
  # their passwords must be in ~barman/.pgpass on the backup server. We
  # create the users on *every* primary straightaway.

  - role: postgres/createuser
    username: barman
  - role: postgres/createuser
    username: streaming_barman
