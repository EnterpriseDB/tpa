---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

# When we first create /etc/barman.d/backup_name.conf, we set it to
# inactive (in barman/tasks/client.yml), and re-enable it here.

- name: Set backups to active
  ini_file:
    dest: "/etc/barman.d/{{ backup_name }}.conf"
    section: "{{ backup_name }}"
    option: active
    value: "true"
  delegate_to: "{{ this_barman }}"
  register: conf

- name: Run barman check to create directory structure
  command: >
    /usr/bin/barman check all
  delegate_to: "{{ this_barman }}"
  changed_when: false
  ignore_errors: true
  become_user: "{{ barman_user }}"
  become: yes

# Now we create a replication slot for pg_receivexlog.
#
# TODO: We don't create the slot when we are configured to use rsync for
# backups, but in the (fairly realistic) situation where we start with a
# streaming backup and later switch to rsync in order to use incremental
# backups, we should also remove the slot.

- name: Create replication slot for Barman
  command: >
    /usr/bin/barman receive-wal --create-slot {{ backup_name }}
  delegate_to: "{{ this_barman }}"
  register: slot_creation
  failed_when: >
    slot_creation is not successful
    and not already_exists_message in slot_creation.stderr
  changed_when: >
    slot_creation is successful
  vars:
    already_exists_message: "Replication slot '{{ slot_name }}' already exists"
  become_user: "{{ barman_user }}"
  become: yes
  notify:
    - Barman configuration changed

# If we have just activated the backup configuration, we also run barman
# cron in order to start pg_receivexlog immediately (rather than waiting
# for the packaged cron job to start it sometime in the next minute).

- name: Run barman cron
  command: >
    /usr/bin/barman cron
  delegate_to: "{{ this_barman }}"
  register: barman_cron
  when: >
    conf is changed
  become_user: "{{ barman_user }}"
  become: yes
  notify:
    - Barman configuration changed

# We must now wait for an unpredictable amount of time for one WAL
# segment to be archived before we can start a backup. Join us in
# postgres/final for the next installment of this exciting tale.
