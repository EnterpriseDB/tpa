---

# © Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

- name: Create repmgr database
  postgresql_db:
    port: "{{ postgres_port }}"
    login_user: "{{ postgres_user }}"
    maintenance_db: postgres
    name: repmgr
    owner: repmgr
    state: present
  become_user: "{{ postgres_user }}"
  become: yes

- name: Check if the primary is registered
  postgresql_query:
    conninfo: "{{ dsn|dbname('repmgr') }}"
    query: >
      SELECT (case when type='standby' then 'replica' else type end) as type
      FROM repmgr.nodes
      WHERE node_name='{{ inventory_hostname }}' AND active
  register: primary_check
  ignore_errors: true
  changed_when: false
  become_user: "{{ postgres_user }}"
  become: yes

# XXX Should we go ahead and run «repmgr primary register» with -F to
# force re-registration? The only reason we should have a mismatch in
# repmgr.nodes is if a node was promoted without going through repmgrd
# (or in case of a repmgr bug, which is also not unlikely), but we're
# registering as a primary in the first place on the basis of Postgres
# not being in recovery, which is difficult to argue with.

- name: Ensure primary is not already registered as anything else
  fail:
    msg: "Primary is already registered as {{ primary_check.type }}"
  when: >
    primary_check is successful and
    primary_check.rowcount != 0 and
    primary_check.type != 'primary'

- name: Run 'repmgr primary register' on the primary
  command: >
    {{ postgres_bin_dir }}/repmgr primary register --verbose \
      -f "{{ repmgr_conf_file }}"
  become_user: "{{ postgres_user }}"
  become: yes
  when:
    primary_check is not successful or primary_check.rowcount == 0
