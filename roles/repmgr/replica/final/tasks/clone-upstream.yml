---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

# We want to clone a replica, i.e., set up cascading replication.
#
# In the best case, the replica we want to clone is up and running and
# registered already. Then we don't need to do anything special.

- name: Check if we can connect to the defined upstream
  postgresql_query:
    conninfo: "{{ hostvars[upstream].repmgr_node_dsn }}"
    query: >
      SELECT 42 as up
  register: upstreamconn
  ignore_errors: true
  become_user: "{{ postgres_user }}"
  become: yes

- name: Record name of upstream to clone
  set_fact:
    upstream_to_clone: "{{
        (upstreamconn is successful and upstreamconn.up == 42) |
        ternary(upstream, upstream_primary)
      }}"

# If the upstream replica is not available (most probably because it's
# being set up in parallel with this node), we insert an entry with the
# correct conninfo for it into nodes, so that repmgr standby clone
# generates a correct recovery.conf. When the upstream executes standby
# register itself, this entry will be corrected and activated.

- name: Ensure that the upstream exists in nodes
  postgresql_query:
    conninfo: "{{ primary_conninfo }}"
    queries:
      - text: >
          INSERT INTO repmgr.nodes
          (node_id, node_name, type, conninfo, priority, active, repluser, config_file)
          VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
          ON CONFLICT DO NOTHING
        args:
          - "{{ hostvars[upstream].node }}"
          - "{{ upstream }}"
          - standby
          - "{{ upstream_conninfo }}"
          - 100
          - False
          - repmgr
          - "{{ repmgr_conf_file }}"
  vars:
    primary_conninfo: "{{ hostvars[upstream_primary].repmgr_node_dsn }}"
    upstream_conninfo: "{{ hostvars[upstream].repmgr_node_dsn }}"
  become_user: "{{ postgres_user }}"
  become: yes
  when: >
    upstream_to_clone != upstream
