---

- name: Check to see if the data directory is empty
  stat: path="{{ postgres_data_dir }}/PG_VERSION"
  register: pgdata

- name: Fail if the data directory exists
  fail:
    msg: "Can't run 'repmgr standby clone' over existing PGDATA"
  when: pgdata.stat.exists

# Now we have to decide where to clone from.
#
# The obvious answer is our 'upstream' instance, which may be a primary
# or another replica. The problem is that if it's a replica, it may not
# have been initialised yet. We check if we can connect to the upstream
# and if so, clone from it; if not, we clone from the primary and do a
# little magic to make the replication work as desired afterwards.

- include: clone-upstream.yml
  when: >
    upstream|default(upstream_primary) != upstream_primary
    
- name: Run repmgr standby clone
  command: >
    {{ postgres_bin_dir }}/repmgr standby clone -F --verbose \
      -f "{{ repmgr_conf_dir }}/repmgr.conf" -D {{ postgres_data_dir }} \
      -d repmgr -U repmgr -w 0 --fast-checkpoint --no-conninfo-password \
      --copy-external-config-files \
      -h {{ upstream_to_clone|default(upstream_primary) }}
  become_user: postgres
  become: true

- name: Start Postgres
  service:
    name: "{{ postgres_service_name }}"
    state: started

- name: Wait for Postgres to become available
  command: >
    {{ postgres_bin_dir }}/pg_isready --timeout 5
  become_user: postgres
  become: yes
  register: ready
  ignore_errors: yes
  until: >
    ready.rc == 0
  failed_when: ready.rc > 1
  changed_when: False
  retries: 3
  delay: 5

- name: Run repmgr standby register
  command: >
    {{ postgres_bin_dir }}/repmgr standby register --verbose \
      -f "{{ repmgr_conf_dir }}/repmgr.conf" --force --wait-sync
  become_user: postgres
  become: true
