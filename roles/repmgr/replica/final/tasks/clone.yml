---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

- name: Fail if the data directory exists
  fail:
    msg: "Can't run 'repmgr standby clone' over existing PGDATA"
  when: pgdata_initialised

# Now we have to decide where to clone from.
#
# The obvious answer is our 'upstream' instance, which may be a primary
# or another replica. The problem is that if it's a replica, it may not
# have been initialised yet. We check if we can connect to the upstream
# and if so, clone from it; if not, we clone from the primary and do a
# little magic to make the replication work as desired afterwards.

- include_tasks: clone-upstream.yml
  when: >
    upstream|default(upstream_primary) != upstream_primary

- name: Run repmgr standby clone
  command: >
    {{ postgres_bin_dir }}/repmgr standby clone -F --verbose --fast-checkpoint \
      -f "{{ repmgr_conf_file }}" \
      --upstream-conninfo "{{ upstream_conninfo }}" \
      -d "{{ hostvars[source].repmgr_node_dsn }}"
  vars:
    source: "{{ upstream_to_clone|default(upstream_primary) }}"
    upstream_conninfo: "{{ hostvars[upstream].repmgr_node_dsn }} application_name={{ inventory_hostname }}"
  become_user: "{{ postgres_user }}"
  become: true
  register: this
  failed_when:
    this.rc != 0 or 'error' in this.stderr

# If we are cloning an instance with postgres_conf_dir separated from
# postgres_data_dir, we copy its configuration files to the replica's
# postgres_conf_dir (which may or may not be the same as PGDATA, and
# that's why we can't use --copy-external-config-files above).

- name: Copy configuration files separately if required
  command: >
    scp "{{ source }}:{{ source_path }}"
        "{{ postgres_conf_dir }}/{{ item.value }}"
  args:
    creates: "{{ postgres_conf_dir }}/{{ item.value }}"
  become_user: "{{ postgres_user }}"
  become: yes
  vars:
    source: "{{ upstream_to_clone|default(upstream_primary) }}"
    source_facts: "{{ hostvars[source].cluster_facts }}"
    source_path: "{{
        source_facts.pg_settings.get(item.key)
          if source_facts.pg_settings is defined
      }}"
  with_dict: "{{ postgres_conf_files }}"

# PGDATA didn't exist until we just created it, so postgres/config would
# have skipped this instance earlier. We install the configuration files
# here; on subsequent deployments, postgres/config will manage them with
# the other instances.

- include_role: name=postgres/config

- set_fact:
    pgdata_initialised: true
