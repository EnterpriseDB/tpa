---

- name: Create repmgr database
  postgresql_db:
    name: repmgr
    owner: repmgr
    state: present
  become_user: "{{ postgres_user }}"
  become: yes

# If this instance is registered as a witness already, we don't need to
# do anything. If it's registered as anything else, it's an error. Only
# if it's not registered at all do we register it as a witness.

- name: Check if the witness is registered
  postgresql_query:
    conninfo: "host={{ upstream_primary }} dbname=repmgr user=repmgr"
    query: >
      SELECT (case when type='standby' then 'replica' else type end) as type
      FROM repmgr.nodes
      WHERE node_name='{{ inventory_hostname }}'
  register: registration
  become_user: "{{ postgres_user }}"
  become: yes

- fail:
    msg: >
      {{ inventory_hostname }} is tagged as witness for {{ upstream_primary }},
      but is registered as a {{ registration.type }} already
  when:
    registration.results|length > 0 and registration.type != 'witness'

- name: Run 'repmgr witness register' on the witness
  command: >
    {{ postgres_bin_dir }}/repmgr witness register --verbose \
      -f "{{ repmgr_conf_file }}" \
      -h "{{ upstream_primary }}"
  become_user: "{{ postgres_user }}"
  become: yes
  when: registration.results|length == 0
