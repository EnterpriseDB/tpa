---

# © Copyright EnterpriseDB UK Limited 2015-2022 - All rights reserved.

# We generate a random secret and store it in an encrypted file under
# the local vault directory.
#
# If ansible-playbook is invoked with the right --vault-password-file
# argument (or --ask-vault-pass), this will work transparently and not
# store unencrypted secrets on disk.

# Write «secret_name: '…contents…'» in YAML format into ansible-vault,
# so that we can load the result back in with include_vars.

- name: Generate encrypted secret {{ secret_name }}
  shell: |
    (
      flock -n 9 || exit 99;
      ansible-vault encrypt \
        --vault-password-file "{{ _vault_passfile }}" \
        --output "{{ _secret_file }}" \
        <<< '{{ _payload|to_nice_yaml(default_style='\"') }}' \
      || exit $?
      exit 88
    ) 9<"{{ inventory_file }}"
  args:
    creates: "{{ _secret_file }}"
    executable: /bin/bash
  register: secret
  failed_when:
    secret.rc not in [0, 88, 99]
  changed_when:
    secret.rc == 88
  no_log: true
  become: no
  vars:
    _vault_passfile: "{{ _vault_dir }}/vault_pass.txt"
    _secret_file: "{{ '%s/inventory/group_vars/%s/secrets/%s.yml' % (cluster_dir, cluster_tag, secret_name) }}"
    _payload: "{{ {secret_name: lookup('pipe', tpa_dir + '/architectures/lib/password')} }}"
  delegate_to: localhost

# We created group_vars/$cluster_tag/secrets/$secret_name.yml, which
# Ansible will load automatically on subsequent runs; but we also need
# the value later on in the same deploy that first wrote the file, so we
# create a dynamic group to force the file to be loaded now.

- name: Ensure group_vars directory exists for {{ secret_name }}
  file:
    state: directory
    path: "{{ _group_dir }}"
  delegate_to: localhost
  become: no
  vars:
    _group_dir: "{{ '%s/inventory/group_vars/%s/' % (cluster_dir, secret_name) }}"

- name: Create symlink to secrets/{{ secret_name }}.yml under group_vars/{{ secret_name }}
  file:
    state: link
    src: "{{ _secret_file }}"
    dest: "{{ _group_file }}"
  delegate_to: localhost
  become: no
  vars:
    _secret_file: "{{ '%s/inventory/group_vars/%s/secrets/%s.yml' % (cluster_dir, cluster_tag, secret_name) }}"
    _group_file: "{{ '%s/inventory/group_vars/%s/%s.yml' % (cluster_dir, secret_name, secret_name) }}"

- name: Create dynamic group {{ secret_name }}
  add_host:
    group: "{{ secret_name }}"
    hostname: "{{ member }}"
    inventory_dir: "{{ hostvars[member].inventory_dir }}"
  with_items: "{{ groups['all'] }}"
  loop_control:
    loop_var: member
