---

# © Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

- assert:
    msg: "Please define a list of haproxy_backend_servers to use haproxy"
    that:
      haproxy_backend_servers is defined
      or 'downloader' in role

# Although, a list of backend servers is required as is validated by the check above
# set an empty list here so that future fact setting in this file can resolve. This
# is only really used by the downloader at the moment.

- name: Set default empty list of backend servers if required
  set_fact:
    haproxy_backend_servers: []
  when:
    haproxy_backend_servers is not defined

# If the configured haproxy_backend_servers all have CAMO partners, then
# we must enable queue checks for them. If platypus is available on the
# backends, we can use that, otherwise we configure external checks.
#
# Set ``haproxy_backend_queue_check: none`` to not configure queue
# checks even if they are needed.

- name: Disable backend queue checks if HARP or Patroni is enabled
  set_fact:
    haproxy_backend_queue_check: none
  when:
    failover_manager in ['harp', 'patroni']

- name: Determine haproxy_backend_queue_check type
  set_fact:
    haproxy_backend_queue_check: "{{
        haproxy_backend_queue_check|default(
          backends_need_queue_check|ternary(
            all_backends_have_platypus|ternary('platypus', 'check-queue'),
            'none'
          )
        )
      }}"
  vars:
    backends_with_camo:
      "{{ haproxy_backend_servers
          |map('extract', hostvars, 'bdr_node_camo_partner')
          |select('defined')|list }}"
    backends_need_queue_check:
      "{{ haproxy_backend_servers|length == backends_with_camo|length }}"
    backends_with_platypus:
      "{{ haproxy_backend_servers
          |map('extract', hostvars, 'postgres_extensions')
          |select('contains', 'platypus')|list }}"
    all_backends_have_platypus:
      "{{ haproxy_backend_servers|length == backends_with_platypus|length }}"

- name: Set haproxy_default_server_options based on failover manager
  set_fact:
    haproxy_default_server_options: "{{
        haproxy_default_server_options
        |default(
          haproxy_harp_default_server_options
          |default(haproxy_default_server_options_by_failover_manager[_failover_manager])
        )
      }}"
  vars:
    _failover_manager: "{{
        (failover_manager|default('default') in haproxy_default_server_options_by_failover_manager.keys()|list)
        |ternary(failover_manager, 'default')
      }}"

- name: Add agent check settings to haproxy_default_server_options
  set_fact:
    haproxy_default_server_options:
      "{{ haproxy_default_server_options|union(_agent_options) }}"
  when:
    haproxy_backend_queue_check != 'none'
  vars:
    _agent_options:
      - agent-addr 127.0.0.1
      - agent-port 15432

- name: Determine whether to enable haproxy peer configuration
  set_fact:
    haproxy_peer_enabled: "{{
        haproxy_peer_enabled
        |default(
          (failover_manager not in ['harp', 'patroni'])
        )
        |bool
      }}"

# Now we build haproxy_backend_settings to map between haproxy backend
# names and the "default-server" options for each backend. We want to
# end up with something like this:
#
# haproxy_backend_settings:
#   be:             { default_server_options: […] }
#   be_check_queue: { default_server_options: […] }
#   be_ro:          { default_server_options: […] }
#
# If haproxy_backend_settings[*].default_server_options is not defined,
# we set it to the union of haproxy_default_server_options (the minimum
# required settings) and haproxy_default_server_extra_options (where you
# can include any additional options).

- name: Assemble haproxy backend settings
  set_fact:
    haproxy_backend_settings: "{{
        haproxy_backend_settings|default({})|combine({
          item: _fallback_settings|combine(_explicit_settings)
        })
      }}"
  with_items: "{{ haproxy_backend_names }}"
  vars:
    _fallback_settings:
      default_server_options: "{{
          haproxy_default_server_options|union(haproxy_default_server_extra_options)
        }}"
    _explicit_settings:
      "{{ haproxy_backend_settings[item]|default({}) }}"

# The Postgres instances in haproxy_backend_servers may define an
# haproxy_server_options list to set options on the corresponding
# "server …" lines for all backends in haproxy.cfg. These settings
# override the default-server settings above.
#
# As a convenience, we add "maxconn $haproxy_maxconn" and either "check"
# or "check port $platypus_port" to haproxy_server_options if they are
# missing (because these options must always be set for every server).

- name: Ensure maxconn is set in haproxy_server_options
  set_fact:
    haproxy_server_options: "{{
        hostvars[item].haproxy_server_options|union([
          'maxconn %s' % hostvars[item].haproxy_maxconn
        ])
      }}"
  with_items: "{{ haproxy_backend_servers }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  when: >
    'maxconn ' not in hostvars[item].haproxy_server_options|join(' ')

- name: Ensure check is set in haproxy_server_options
  set_fact:
    haproxy_server_options: "{{
        hostvars[item].haproxy_server_options|union(
          ['check', _check_options]|flatten
        )
      }}"
  with_items: "{{ haproxy_backend_servers }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  when: >
    'check ' not in hostvars[item].haproxy_server_options|join(' ')
  vars:
    _check_port: "{{
        (failover_manager == 'harp')|ternary(
          hostvars[item].harp_listen_port,
          (failover_manager == 'patroni')|ternary(
            hostvars[item].patroni_listen_port,
            (haproxy_backend_queue_check == 'platypus')|ternary(
              hostvars[item].platypus_port, 0
            )
          )
        )
      }}"
    _check_options:
      "{{ (_check_port != 0)|ternary('port %s' % _check_port, []) }}"

- name: Add agent-check settings to haproxy_server_options if required
  set_fact:
    haproxy_server_options:
      "{{ hostvars[item].haproxy_server_options|union(_agent_options) }}"
  with_items: "{{ haproxy_backend_servers }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  when: >
    'agent-check ' not in hostvars[item].haproxy_server_options|join(' ')
    and haproxy_backend_queue_check != 'none'
  vars:
    _agent_options:
      - agent-check
      - agent-send "{{ item }}\n"
