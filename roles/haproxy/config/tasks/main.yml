---

# Copyright © 2ndQuadrant Limited <info@2ndquadrant.com>

- assert:
    msg: "Please define a list of haproxy_backend_servers to use haproxy"
    that:
      - haproxy_backend_servers is defined

- name: Create ssl-dh-param-file
  openssl_dhparam:
    path: /etc/ssl/dhparams.pem
    size: 2048
    owner: root
    group: root
    mode: 0644

# If the configured haproxy_backend_servers all have CAMO partners, then
# we must enable queue checks for them. If platypus is available on the
# backends, we can use that, otherwise we configure external checks.
#
# Set ``haproxy_backend_queue_check: none`` to not configure queue
# checks even if they are needed.

- name: Determine haproxy_backend_queue_check type
  set_fact:
    haproxy_backend_queue_check: "{{
      haproxy_backend_queue_check|default(
        backends_need_queue_check|ternary(
          all_backends_have_platypus|ternary('platypus', 'check-queue'),
          'none'
        )
      )
    }}"
  vars:
    backends_with_camo: "{{
      haproxy_backend_servers|map('extract', hostvars, 'bdr_node_camo_partner')|select('defined')|list
    }}"
    backends_need_queue_check: "{{
      haproxy_backend_servers|length == backends_with_camo|length
    }}"
    backends_with_platypus: "{{
      haproxy_backend_servers|map('extract', hostvars, 'postgres_extensions')|select('contains', 'platypus')|list
    }}"
    all_backends_have_platypus: "{{
      haproxy_backend_servers|length == backends_with_platypus|length
    }}"

- name: Add agent check settings to haproxy_default_server_options
  set_fact:
    haproxy_default_server_options: "{{
      haproxy_default_server_options|union(_agent_options)
    }}"
  when:
    haproxy_backend_queue_check != 'none'
  vars:
    _agent_options:
      - agent-addr 127.0.0.1
      - agent-port 15432

# Now we build haproxy_backend_settings to map between haproxy backend
# names and the "default-server" options for each backend. We want to
# end up with something like this:
#
# haproxy_backend_settings:
#   be:             { default_server_options: […] }
#   be_check_queue: { default_server_options: […] }
#
# If haproxy_backend_settings[*].default_server_options is not defined,
# we set it to the union of haproxy_default_server_options (the minimum
# required settings) and haproxy_default_server_extra_options (where you
# can include any additional options).

- name: Assemble haproxy backend settings
  set_fact:
    haproxy_backend_settings: "{{
      haproxy_backend_settings|default({})|combine({
        item: _fallback_settings|combine(_explicit_settings)
      })
    }}"
  with_items: "{{ haproxy_backend_names }}"
  vars:
    _fallback_settings:
      default_server_options: "{{
        haproxy_default_server_options|union(haproxy_default_server_extra_options)
      }}"
    _explicit_settings:
      "{{ haproxy_backend_settings[item]|default({}) }}"

# The Postgres instances in haproxy_backend_servers may define an
# haproxy_server_options list to set options on the corresponding
# "server …" lines for all backends in haproxy.cfg. These settings
# override the default-server settings above.
#
# As a convenience, we add "maxconn $haproxy_maxconn" and either "check"
# or "check port $platypus_port" to haproxy_server_options if they are
# missing (because these options must always be set for every server).

- name: Ensure maxconn is set in haproxy_server_options
  set_fact:
    haproxy_server_options: "{{
      hostvars[item].haproxy_server_options|union([
        'maxconn %s' % hostvars[item].haproxy_maxconn
      ])
    }}"
  with_items: "{{ haproxy_backend_servers }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  when: >
    'maxconn ' not in hostvars[item].haproxy_server_options|join(' ')

- name: Ensure check is set in haproxy_server_options
  set_fact:
    haproxy_server_options: "{{
      hostvars[item].haproxy_server_options|union(
        query('flattened', ['check', _check_options])
      )
    }}"
  with_items: "{{ haproxy_backend_servers }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  when: >
    'check ' not in hostvars[item].haproxy_server_options|join(' ')
  vars:
    _check_options: "{{
      (haproxy_backend_queue_check == 'platypus')|ternary(
        'port %s' % hostvars[item].platypus_port, []
      )
    }}"

- name: Add agent-check settings to haproxy_server_options if required
  set_fact:
    haproxy_server_options: "{{
      hostvars[item].haproxy_server_options|union(_agent_options)
    }}"
  with_items: "{{ haproxy_backend_servers }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  when: >
    'agent-check ' not in hostvars[item].haproxy_server_options|join(' ')
    and haproxy_backend_queue_check != 'none'
  vars:
    _agent_options:
      - agent-check
      - agent-send "{{ item }}\n"

- name: Install haproxy.cfg
  template:
    src: haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
  notify:
    - Note haproxy reload required

- name: Install agent.lua
  template:
    src: agent.lua.j2
    dest: /etc/haproxy/agent.lua
  notify:
    - Note haproxy reload required
  when:
    haproxy_backend_queue_check != 'none'

- include_role: name=postgres/createuser
  vars:
    username: haproxy
    role_attrs: [nologin]
  when:
    haproxy_backend_queue_check != 'platypus'

- block:
  - name: Install check-queue
    template:
      src: check-queue.j2
      dest: /etc/haproxy/check-queue
      mode: 0755
    notify:
      - Note haproxy reload required

  - include_role: name=postgres/createuser
    vars:
      username: check_queue
      granted_roles:
      - bdr_application

  - include_role:
      name: postgres/pgpass
    vars:
      pgpassfile: /etc/haproxy/.pgpass
      pgpass_owner: root
      pgpass_group: root
      pgpass_users:
      - check_queue
  when:
    haproxy_backend_queue_check == 'check-queue'

- name: Check whether {{ socket_dir }} exists
  stat:
    path: "{{ socket_dir }}"
  register: haproxy_stats_socket_dir
  vars:
    socket_dir: "{{ haproxy_stats_socket|dirname }}"

- name: Create {{ socket_dir }}
  file:
    path: "{{ socket_dir }}"
    state: directory
    owner: haproxy
    group: haproxy
    mode: 0755
  when: not haproxy_stats_socket_dir.stat.exists
  vars:
    socket_dir: "{{ haproxy_stats_socket|dirname }}"

- name: Allow haproxy to connect to arbitrary backends
  seboolean:
    name: haproxy_connect_any
    state: yes
    persistent: yes
  ignore_errors: yes

- name: Enable haproxy service
  service:
    name: haproxy
    enabled: yes
