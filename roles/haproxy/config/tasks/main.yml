---

# Copyright Â© 2ndQuadrant Limited <info@2ndquadrant.com>

- assert:
    msg: "Please define a list of haproxy_backends to use haproxy"
    that:
      - haproxy_backends is defined

- set_fact:
    haproxy_maxconn: "{{
      hostvars[item].haproxy_maxconn|default((hostvars[item].max_connections|default(250))*0.90)|int
    }}"
  with_items: "{{ haproxy_backends }}"
  delegate_to: "{{ item }}"
  delegate_facts: true

- name: Create ssl-dh-param-file
  openssl_dhparam:
    path: /etc/ssl/dhparams.pem
    size: 2048
    owner: root
    group: root
    mode: 0644

# If the configured haproxy_backends all have CAMO partners, then we
# must enable queue checks for them. If platypus is available on the
# backends, we can use that, otherwise we configure external checks.
#
# Set ``haproxy_backend_queue_check: none`` to not configure queue
# checks even if they are needed.

- set_fact:
    haproxy_backend_queue_check: "{{
      haproxy_backend_queue_check|default(
        backends_need_queue_check|ternary(
          all_backends_have_platypus|ternary('platypus', 'check-queue'),
          'none'
        )
      )
    }}"
  vars:
    backends_with_camo: "{{
      haproxy_backends|map('extract', hostvars, 'bdr_node_camo_partner')|select('defined')|list
    }}"
    backends_need_queue_check: "{{
      haproxy_backends|length == backends_with_camo|length
    }}"
    backends_with_platypus: "{{
      haproxy_backends|map('extract', hostvars, 'postgres_extensions')|select('contains', 'platypus')|list
    }}"
    all_backends_have_platypus: "{{
      haproxy_backends|length == backends_with_platypus|length
    }}"

- name: Install haproxy.cfg
  template:
    src: haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
  notify:
    - Note haproxy reload required

- name: Install agent.lua
  template:
    src: agent.lua.j2
    dest: /etc/haproxy/agent.lua
  notify:
    - Note haproxy reload required
  when:
    haproxy_backend_queue_check != 'none'

- include_role: name=postgres/createuser
  vars:
    username: haproxy
    role_attrs: [nologin]
  when:
    haproxy_backend_queue_check != 'platypus'

- block:
  - name: Install check-queue
    template:
      src: check-queue.j2
      dest: /etc/haproxy/check-queue
      mode: 0755
    notify:
      - Note haproxy reload required

  - include_role: name=postgres/createuser
    vars:
      username: check_queue
      granted_roles:
      - bdr_application

  - include_role:
      name: postgres/pgpass
    vars:
      pgpassfile: /etc/haproxy/.pgpass
      pgpass_owner: root
      pgpass_group: root
      pgpass_users:
      - check_queue
  when:
    haproxy_backend_queue_check == 'check-queue'

- name: Ensure {{ socket_dir }} exists
  file:
    path: "{{ socket_dir }}"
    state: directory
    owner: haproxy
    group: haproxy
    mode: 0755
  vars:
    socket_dir: "{{ haproxy_stats_socket|dirname }}"

- name: Allow haproxy to connect to arbitrary backends
  seboolean:
    name: haproxy_connect_any
    state: yes
    persistent: yes
  ignore_errors: yes

- name: Enable haproxy service
  service:
    name: haproxy
    enabled: yes
