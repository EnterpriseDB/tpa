---

# Â© Copyright EnterpriseDB UK Limited 2015-2023 - All rights reserved.

- assert:
    msg: "Please define a list of haproxy_backend_servers to use haproxy"
    that:
      - haproxy_backend_servers is defined

- name: Create ssl-dh-param-file
  openssl_dhparam:
    path: /etc/ssl/dhparams.pem
    size: 2048
    owner: root
    group: root
    mode: "0644"

- name: Install haproxy.cfg
  template:
    src: haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
    owner: root
    group: root
    mode: "0644"
  notify:
    - Note haproxy reload required

# on Debian or Ubuntu, the haproxy package may already have installed
# this file, but we will overwrite it
- name: Install rsyslog configuration for haproxy
  copy:
    src: 49-haproxy.conf
    dest: /etc/rsyslog.d/
    owner: root
    group: root
    mode: "0644"
  register: haproxy_syslog_conf

- name: Restart rsyslog
  service:
    name: rsyslog
    state: restarted
  when: haproxy_syslog_conf is changed

# XXX I was unable to configure conditions to create this file
- name: Install agent.lua
  template:
    src: agent.lua.j2
    dest: /etc/haproxy/agent.lua
  notify:
    - Note haproxy reload required
  when:
    haproxy_backend_queue_check != 'none'

- include_role: name=postgres/createuser
  vars:
    username: haproxy
    role_attrs: [nologin]
  when:
    haproxy_backend_queue_check != 'platypus'

# XXX I was unable to configure conditions to create this file
- block:
  - name: Install check-queue
    template:
      src: check-queue.j2
      dest: /etc/haproxy/check-queue
      mode: "0755"
    notify:
      - Note haproxy reload required

  - include_role: name=postgres/createuser
    vars:
      username: check_queue
      granted_roles:
      - bdr_application

  - include_role:
      name: postgres/pgpass
    vars:
      pgpassfile: /etc/haproxy/.pgpass
      pgpass_owner: root
      pgpass_group: root
      pgpass_users:
      - check_queue
  when:
    haproxy_backend_queue_check == 'check-queue'

- name: Check whether {{ socket_dir }} exists
  stat:
    path: "{{ socket_dir }}"
  register: haproxy_stats_socket_dir
  vars:
    socket_dir: "{{ haproxy_stats_socket|dirname }}"

- name: Create {{ socket_dir }}
  file:
    path: "{{ socket_dir }}"
    state: directory
    owner: haproxy
    group: haproxy
    mode: "0755"
  when: not haproxy_stats_socket_dir.stat.exists
  vars:
    socket_dir: "{{ haproxy_stats_socket|dirname }}"

- name: Allow haproxy to connect to arbitrary backends
  seboolean:
    name: haproxy_connect_any
    state: yes
    persistent: yes
  ignore_errors: true

- name: Enable haproxy service
  service:
    name: haproxy
    enabled: yes
