{# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved. #}
global
    log /var/lib/haproxy/dev/log local0 notice
    stats socket {{ haproxy_stats_socket }} level admin
    ca-base  /etc/ssl/certs
    crt-base  /etc/ssl/private
    ssl-default-bind-ciphers  ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
    ssl-default-bind-options  no-sslv3 no-tlsv10 no-tls-tickets
    ssl-default-server-ciphers  ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
    ssl-default-server-options  no-sslv3 no-tlsv10 no-tls-tickets
    ssl-dh-param-file  /etc/ssl/dhparams.pem
    tune.ssl.default-dh-param  2048
{% if haproxy_backend_queue_check != 'none' %}
    lua-load /etc/haproxy/agent.lua
{% endif %}
{% if haproxy_backend_queue_check == 'check-queue' %}
    external-check
{% endif %}

defaults
    timeout connect 5s
    option tcplog
    log global

frontend fe
    bind {{ haproxy_bind_address }}:{{ haproxy_port }}

    maxconn 1000

    default_backend be

{% if haproxy_read_only_load_balancer_enabled %}
frontend fe_ro
    bind {{ haproxy_bind_address }}:{{ haproxy_read_only_port }}

    maxconn 1000

    default_backend be_ro
{% endif %}

{% if haproxy_backend_queue_check != 'none' %}
frontend lua_agent
    bind 127.0.0.1:15432
    tcp-request content use-service lua.agent
{% endif %}

{% if haproxy_peer_enabled %}
peers {{ location }}
{% for h in groups['role_haproxy'] %}
{%   if hostvars[h].location == location %}
    peer {{ h }} {{ hostvars[h].ip_address }}:10000
{%   endif %}
{% endfor %}
{% endif %}

backend be
    mode tcp

    stick-table type ip size 1 {% if haproxy_peer_enabled %}peers {{ location }}{% endif %}

    stick on dst

{% if failover_manager == 'harp' %}
    option httpchk
{% elif failover_manager == 'patroni' %}
    option httpchk
    http-check expect status 200
{% elif haproxy_backend_queue_check != 'platypus' %}
    option pgsql-check user haproxy
{% else %}
    option httpchk GET /status
    http-check disable-on-404
    http-check expect string OK
{% endif %}

    default-server {{ haproxy_backend_settings['be']['default_server_options']|join(' ') }}

{% for b in haproxy_backend_servers %}
{%   set v = hostvars[b] %}
{%   set backup = loop.first|ternary('', 'backup') %}
    server {{ b }} {{ b }}:{{ v.postgres_port }} {{ v.haproxy_server_options|join(' ') }} {{ backup }}
{% endfor %}

{% if haproxy_backend_queue_check != 'none' %}
backend be_check_queue
    mode tcp

{% if haproxy_backend_queue_check == 'platypus' %}
    option httpchk GET /bdr/apply-queue/camo-partner/status
    http-check disable-on-404
    http-check expect string OK
{% elif haproxy_backend_queue_check == 'check-queue' %}
    option external-check
    external-check path "/usr/bin:/bin"
    external-check command "/etc/haproxy/check-queue"
{% endif %}

    default-server {{ haproxy_backend_settings['be_check_queue']['default_server_options']|join(' ') }}

{% for b in haproxy_backend_servers %}
{%   set v = hostvars[b] %}
{%   set backup = loop.first|ternary('', 'backup') %}
    server {{ b }} {{ b }}:{{ v.postgres_port }} {{ v.haproxy_server_options|join(' ') }} {{ backup }}
{% endfor %}
{% endif %}

{% if haproxy_read_only_load_balancer_enabled %}
backend be_ro
    mode tcp
    balance roundrobin

    stick-table type ip size 1 {% if haproxy_peer_enabled %}peers {{ location }}{% endif %}

    stick on dst

{% if failover_manager == 'patroni' %}
    option httpchk OPTIONS /replica{% if patroni_repl_max_lag|default(None) %}?lag={{ patroni_repl_max_lag }}{% endif %}

    http-check expect status 200
{% else %}
    option httpchk GET /status
    http-check disable-on-404
    http-check expect string OK
{% endif %}

    default-server {{ haproxy_backend_settings['be_ro']['default_server_options']|join(' ') }}

{% for b in haproxy_backend_servers %}
{%   set v = hostvars[b] %}
{%   set backup = loop.first|ternary('', 'backup') %}
    server {{ b }} {{ b }}:{{ v.postgres_port }} {{ v.haproxy_server_options|join(' ') }} {{ backup }}
{% endfor %}
{% endif %}
