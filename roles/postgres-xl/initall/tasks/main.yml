---

## Ensure needed directories exist

- name: Ensure that /pgxl/data exists
  file:
    path: /pgxl/data
    state: directory
    owner: postgres
    group: postgres
    mode: 0755

- name: Ensure that /pgxl/wal exists
  file:
    path: /pgxl/wal
    state: directory
    owner: postgres
    group: postgres
    mode: 0755


## Initialize the cluster

- name: Appoint control node
  set_fact: control_hostname="{{ item }}"
  when: "hostvars[item].node == '1'"
  with_items: "{{ play_hosts }}"

- name: Check if pgxc_ctl.conf exists
  stat: path=~postgres/pgxc_ctl.conf
  register: conf
  when: inventory_hostname == control_hostname

- block:
    - name: Install pgxc_ctl.conf on control node
      template:
        src: pgxc_ctl.conf.j2
        dest: ~postgres/pgxc_ctl.conf
  when: inventory_hostname == control_hostname and not conf.stat.exists
  sudo_user: "{{ postgres_user }}"
  sudo: true

- include: gtm_roles.yml gtype=gtm
  when: >
    'gtm' in role

- include: gtm_roles.yml gtype=gtm_standby
  when: >
    'gtm-standby' in role

- include: gtm_proxy_roles.yml gpindex="{{ 1+item.0 }}" gphost="{{item.1}}" dtype=gtm-proxy
  with_indexed_items: "{{ groups['tag_role_datanode'] }}"

- include: coord_roles.yml ctype=master cnode={{item}}
  with_items: "{{hostvars[inventory_hostname].co_list|default([])}}"
  when: >
    'coordinator' in role

- include: datanode_roles.yml dnode={{item}} dtype=master
  with_items: "{{hostvars[inventory_hostname].dn_list|default([])}}"
  when: >
    'datanode' in role

- include: datanode_roles.yml dnode={{item}} dtype=replica
  with_items: "{{hostvars[inventory_hostname].dn_replica_list|default([])}}"
  when: >
    'datanode-replica' in role

## Quick test to make sure that the cluster is operational
- set_fact:
    createdb_ran: False

- block:
    - name: Test XL - createdb
      shell: source ~/.profile && createdb test
      args:
        executable: /bin/bash
    - name: Test XL - create replicated table
      shell: source ~/.profile && psql test -c "create table tab distribute by replication as select id from generate_series(1, 128) id;"
      args:
        executable: /bin/bash
    - name: Test XL - dropdb
      shell: source ~/.profile && dropdb test
      args:
        executable: /bin/bash
    - set_fact:
        createdb_ran: True
  become: true
  become_user: "{{ postgres_user }}"
  when: >
    'coordinator' in role and createdb_ran == False
