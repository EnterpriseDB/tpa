---

# Copyright © 2ndQuadrant Limited <info@2ndquadrant.com>

- name: Install gpg
  raw: yum -y install gnupg2
  register: gpg_install
  changed_when: >
    gpg_install is successful
    and 'already installed and latest version' not in gpg_install.stdout

- name: Install curl
  raw: yum -y install curl
  register: curl_install
  changed_when: >
    curl_install is successful
    and 'already installed and latest version' not in curl_install.stdout

- name: Ensure repository list is defined
  assert:
    msg: "Repository {{ item }} is not defined in yum_repositories"
    that: item in default_yum_repositories|combine(yum_repositories)
  with_items: "{{ yum_repository_list }}"

# We need to support https://user:pass@host/… key and repository URLs,
# which work only if we enable force_basic_auth for fetch_url(). Since
# the default yum module does not allow this, we use a local copy that
# forwards the parameter.

- name: Install YUM repository packages
  yum:
    name: "{{ r.rpm_url }}"
    state: present
    force_basic_auth: yes
  with_items: "{{ yum_repository_list }}"
  vars:
    repos: "{{ default_yum_repositories|combine(yum_repositories) }}"
    r: "{{ repos[item] }}"

# Following the instructions in
# https://wiki.postgresql.org/wiki/YUM_Installation, we exclude
# postgresql from the base repositories.

- name: Exclude postgresql packages from the base repository
  ini_file:
    dest: /etc/yum/pluginconf.d/rhnplugin.conf
    section: main
    option: exclude
    value: "postgresql* barman* repmgr*"

- name: Disable PGDG repos for versions other than {{ postgres_version }}
  ini_file:
    dest: /etc/yum.repos.d/pgdg-redhat-all.repo
    section: "{{ item }}"
    option: enabled
    value: "{{ (item == wanted_pgdg_repo)|ternary('1', '0') }}"
  with_items: "{{ all_pgdg_repos }}"
  when: >
    'PGDG' in yum_repository_list
  vars:
    all_pgdg_repos:
    - pgdg94
    - pgdg95
    - pgdg96
    - pgdg10
    - pgdg11
    - pgdg12
    wanted_pgdg_repo: "pgdg{{ postgres_versionNN }}"

- set_fact:
    _2q_repositories: []

- name: Enumerate 2ndQuadrant repositories
  set_fact:
    _2q_repositories: "{{
      _2q_repositories|union([{
        'url': url,
        'file': file,
        'repo': item
      }])
    }}"
  with_items:
    - dl/default/release
    - "{{ tpa_2q_repositories|default([]) }}"
  when:
    tpa_2q_repositories is not defined or
    tpa_2q_repositories is not empty
  vars:
    token: "{{ lookup('env', 'TPA_2Q_SUBSCRIPTION_TOKEN') }}"
    volatile: "{{ use_volatile_subscriptions|ternary('/volatile', '') }}"
    _flavour: "{{ postgresql_flavour|default('postgresql') }}"
    _repopg: "{{ (_flavour == 'postgresql-bdr')|ternary('pgbdr', 'pg') }}"
    version_tag: >-
      {{ (_flavour == 'postgresql-bdr')|ternary('bdr9.4', postgres_version) }}
    urltemplate: "{{
      (item == 'dl/default/release')|ternary(
        'https://access.2ndquadrant.com/api/repository/{label}/{version}/rpm{volatile}',
        'https://access.2ndquadrant.com/api/repository/{token}/{label}/{version}/rpm{volatile}'
      )
    }}"
    url: >-
      {{ urltemplate.format(token=token, label=item, version=version_tag, volatile=volatile) }}
    file: "/etc/yum.repos.d/2ndquadrant-{{ item|replace('/', '-') }}-{{ _repopg }}{{ postgres_version }}.repo"

- name: Install 2ndQuadrant repositories
  shell: >
    curl -sS {{ item.url }} | bash
  args:
    executable: /bin/bash
    creates: "{{ use_volatile_subscriptions|ternary(omit, item.file) }}"
  register: reposub
  failed_when: >
    reposub.rc != 0 or 'error: ' in reposub.stdout.lower()
  with_items: "{{ _2q_repositories }}"

- include_tasks: repository-cleanup.yml
  vars:
    repository_path: /etc/yum.repos.d
    repository_files: "{{ _2q_repositories|map(attribute='file')|list }}"
  tags: always
