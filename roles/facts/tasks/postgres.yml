---

# Copyright Â© 2ndQuadrant Limited <info@2ndquadrant.com>

- name: Set postgres_data_dir
  set_fact:
    postgres_data_dir: "{{ postgres_data_dir|default(default_postgres_data_dir) }}"

- name: Perform basic postgres fact discovery
  minimal_postgres_setup:
    pgdata: "{{ postgres_data_dir|default(default_postgres_data_dir) }}"
  become_user: root
  become: yes

- name: Ensure postgres_version matches pgdata_version, if defined
  assert:
    msg: >-
      postgres_version is set to {{ postgres_version }}, but
      {{ postgres_data_dir }} was initialised with {{ pgdata_version }}
    that: postgres_version|float == pgdata_version|float
  when:
    postgres_version is defined and pgdata_version is defined

- name: Set postgres_version
  set_fact:
    postgres_version: "{{ version }}"
    postgres_versionNN: "{{ version|replace('.','') }}"
  vars:
    version: "{{ postgres_version|default(pgdata_version|default(default_postgres_version)) }}"

- name: Set various postgres facts
  set_fact:
    postgres_user: "{{ postgres_user|default(default_postgres_user) }}"
    postgres_group: "{{ postgres_group|default(default_postgres_user) }}"
    postgres_home: "{{ postgres_home|default(default_postgres_home_dirs[ansible_os_family]) }}"
    postgres_bin_dir: "{{ postgres_bin_dir|default(default_postgres_bin_dirs[ansible_os_family]) }}"
    postgres_host: "{{ postgres_host|default('localhost') }}"
    postgres_port: "{{ postgres_port|default(5432) }}"
    postgres_service_name: postgres
    postgres_installation_method: "{{ postgres_installation_method|default(default_postgres_installation_method) }}"
    postgres_install_dir: "{{ postgres_install_dir|default(default_postgres_install_dir) }}"
    postgres_users: "{{ postgres_users|default(default_postgres_users) }}"
    postgres_databases: "{{ postgres_databases|default(default_postgres_databases) }}"
    postgres_conf_files: "{{ postgres_conf_files|default(default_postgres_conf_files) }}"
    log_destination: "{{ log_destination|default(default_log_destination) }}"
    install_from_source: "{{ install_from_source|default([]) }}"
    barman_user: "{{ barman_user|default(default_barman_user) }}"
    barman_group: "{{ barman_group|default(default_barman_group) }}"
    barman_home: "{{ barman_home|default(default_barman_home) }}"
    backup_name: "{{ backup_name|default(inventory_hostname) }}"
    repmgr_conf_dir: "{{ repmgr_conf_dir|default(default_repmgr_conf_dir) }}"
    bdr_database: "{{ bdr_database|default(default_bdr_database) }}"
    bdr_node_name: "{{ bdr_node_name|default(inventory_hostname) }}"
    bdr_node_group: "{{ bdr_node_group|default(default_bdr_node_group) }}"
    haproxy_port: "{{ haproxy_port|default(default_haproxy_port) }}"
    haproxy_bind_address: "{{ haproxy_bind_address|default(default_haproxy_bind_address) }}"
    pgbouncer_port: "{{ pgbouncer_port|default(default_pgbouncer_port) }}"
    pgbouncer_backend: "{{ pgbouncer_backend|default(default_pgbouncer_backend) }}"
    pgbouncer_backend_port: "{{ pgbouncer_backend_port|default(default_pgbouncer_backend_port) }}"
    haproxy_server_options: "{{ haproxy_server_options|default([]) }}"
    wal_or_xlog: "{{ wal_string }}"
    max_connections: "{{ max_connections|default(default_max_connections) }}"
    enable_harp: "{{ enable_harp|default(False) }}"
    harp_listen_port: "{{ harp_listen_port|default(5442) }}"
    publications: "{{ publications|default([]) }}"
    subscriptions: "{{ subscriptions|default([]) }}"
  vars:
    default_postgres_installation_method: >-
      {{ postgres_installation_source|default('pkg') }}
    wal_string: >-
      {%- if postgres_version is version('10', '>=') -%}wal
      {%- else -%}xlog
      {%- endif -%}

- name: Add {{ bdr_database }} to postgres_databases
  set_fact:
    postgres_databases: "{{
      postgres_databases|union([default_bdr_database_entry])
    }}"
  vars:
    default_bdr_database_entry:
      name: "{{ bdr_database }}"
      owner: "{{ postgres_user }}"
    bdr_database_entry: >-
      {{ postgres_databases|json_query("[?name=='%s']" % bdr_database) }}
  when: >
    'bdr' in role and bdr_database_entry is empty

- name: Ensure haproxy_maxconn is set
  set_fact:
    haproxy_maxconn: "{{
      haproxy_maxconn|default(((max_connections|int)*0.90)|int)
    }}"

- name: Ensure haproxy_backend_servers is defined
  set_fact:
    haproxy_backend_servers: "{{ haproxy_backends }}"
  when:
    haproxy_backends is defined and
    haproxy_backend_servers is not defined

- name: Ensure haproxy_stats_socket is set
  set_fact:
    haproxy_stats_socket:
      "{{ (ansible_distribution == 'RedHat' and ansible_distribution_major_version|int == 8)
        |ternary('/var/run/haproxy.sock', default_haproxy_stats_socket) }}"
  when:
    haproxy_stats_socket is not defined

# If pgbouncer_backend points to a particular instance, we respect any
# custom haproxy_port or postgres_port setting for that instance. Note
# that changing haproxy_port without changing pgbouncer_backend won't
# automatically work as expected.

- name: Override pgbouncer_backend_port if required
  set_fact:
    pgbouncer_backend_port: "{{ _backend_port }}"
  when:
    pgbouncer_backend in hostvars and
    (hostvars[pgbouncer_backend].haproxy_port is defined or
     hostvars[pgbouncer_backend].postgres_port is defined)
  vars:
    _backend_vars: "{{ hostvars[pgbouncer_backend] }}"
    _backend_port: "{{
      _backend_vars['haproxy_port']|default(_backend_vars['postgres_port'])
    }}"

# We set pgbouncer_max_client_conn to 90% of max_connections for the
# backend Postgres server by default. In the special case of haproxy
# running on the pgbouncer host and pgbouncer pointing to it, we use
# the minimum haproxy_maxconn value from the haproxy_backend_servers
# instead.

- name: Set pgbouncer_max_client_conn from max_connections
  set_fact:
    pgbouncer_max_client_conn: "{{
      pgbouncer_max_client_conn|default(_maxconn)
    }}"
  when: >
    'pgbouncer' in role
  vars:
    _backend: "{{
      pgbouncer_backend
        if pgbouncer_backend not in
          ['127.0.0.1', 'localhost', inventory_hostname]
        else inventory_hostname
    }}"
    _backend_maxconn: "{{
      hostvars.get(_backend, {}).get('max_connections')
    }}"
    _backend_is_haproxy: "{{
      'haproxy' in role
      and _backend == inventory_hostname
      and pgbouncer_backend_port == haproxy_port
    }}"
    _haproxy_backend_maxconn: "{{
      'haproxy' in role and
      haproxy_backend_servers|map('extract', hostvars, 'haproxy_maxconn')|list|min
    }}"
    _maxconn: "{{
      _backend_is_haproxy and
        _haproxy_backend_maxconn or
        (_backend_maxconn is defined and
          ((_backend_maxconn|int)*0.90)|int or
          default_pgbouncer_max_client_conn)
    }}"

# Transform pgbouncer_databases into a new list where each item's
# 'options' is guaranteed to have host/port/auth_user set. Also, for
# backwards-compatibility, if 'dsn' is specified, we pass it through
# after appending auth_user to it.
#
# In every case, we want to set auth_user=pgbouncer.

- name: Fill in pgbouncer_databases options
  set_fact:
    _pgbouncer_databases: "{{
      _pgbouncer_databases|default([])|union([
        {
          'name': item.name,
          'options': {
            'host': pgbouncer_backend,
            'port': pgbouncer_backend_port,
          }|combine(item.options|default({}))|combine({'auth_user': 'pgbouncer'})
        }|combine(
          ('dsn' in item)|ternary(
            {'dsn': '%s auth_user=pgbouncer' % item.get('dsn')},
            {}
          )
        )
      ])
    }}"
  with_items: "{{ pgbouncer_databases|default(default_pgbouncer_databases) }}"

- name: Set pgbouncer_databases
  set_fact:
    pgbouncer_databases: "{{ _pgbouncer_databases }}"

- name: Set default config paths
  set_fact:
    postgres_conf_dir: "{{ postgres_conf_dir|default('') or postgres_data_dir }}"
    repmgr_conf_file: "{{ repmgr_conf_dir }}/repmgr.conf"

- name: Override postgres_bin_dir for source builds
  set_fact:
    postgres_bin_dir: "{{ postgres_install_dir }}/bin"
  when: >
    'postgres' in role and
    postgres_installation_method == 'src'

- name: Set default build_path
  set_fact:
    build_path: "{{ build_path|default(default_build_path)|join(':') }}"

- name: Set client DSN attributes
  set_fact:
    postgres_client_dsn_attributes: "{{ postgres_client_dsn_attributes|default('') }}"
    barman_client_dsn_attributes: "{{ barman_client_dsn_attributes|default('') }}"
    repmgr_client_dsn_attributes: "{{ repmgr_client_dsn_attributes|default('') }}"
    bdr_client_dsn_attributes: "{{ bdr_client_dsn_attributes|default('') }}"

- name: Set default DSNs
  set_fact:
    dsn: "port={{ postgres_port }}"
    postgres_dsn: "port={{ postgres_port }} dbname=postgres"
    node_dsn: >-
      host={{ inventory_hostname }} port={{ postgres_port }}
    repmgr_node_dsn: >-
      host={{ _repmgr_hostname }} port={{ postgres_port }} dbname=repmgr user=repmgr {{ repmgr_client_dsn_attributes }}
    bdr_node_dsn: >-
      host={{ inventory_hostname }} port={{ postgres_port }} dbname={{ bdr_database }} user=postgres {{ bdr_client_dsn_attributes }}
    pgbouncer_node_dsn: >-
      host={{ inventory_hostname }} port={{ pgbouncer_port }}
  vars:
    _repmgr_hostname: "{{ repmgr_hostname|default(inventory_hostname) }}"

- name: Set default max_prepared_transactions
  set_fact:
    max_prepared_transactions: 16
  when: >
    'bdr' in role and max_prepared_transactions is not defined

# Determine the upstream primary for this host, that is, the primary at
# the root of the cascading replication setup. This may be the instance
# itself, if it's a primary.

- name: Record name of the upstream primary
  set_fact:
    upstream_primary: "{{ inventory_hostname|upstream_root(hostvars) }}"
  when: >
    'postgres' in role

# Find any backed-up instance that is the upstream_primary, or a replica
# thereof. We would prefer to use a backup server in the same region,
# but we'll take whatever we can find.

- name: Record name of any upstream or sibling with backups
  set_fact:
    upstream_backedup: "{{
      groups[cluster_tag]
      |instance_with_backup_of(upstream_primary, inventory_hostname, hostvars)
    }}"
  when: >
    'postgres' in role

- name: Set list of Postgres extensions
  set_fact:
    postgres_extensions: "{{
      postgres_extensions|default(
        default_postgres_extensions
        |union(extra_postgres_extensions|default([]))
        |union(needs_pglogical|ternary(['pglogical'], []))
        |union(('bdr' in role)|ternary(bdr_extensions, []))
      )
    }}"
  vars:
    needs_pglogical: >-
      {{
        publications|union(subscriptions)
        |selectattr('type', 'equalto', 'pglogical')
        |list is not empty
      }}

- name: Remove pg_visibility for Postgres <9.6
  set_fact:
    postgres_extensions: "{{
      postgres_extensions
      |reject('equalto', 'pg_visibility')
      |list
    }}"
  when: postgres_version is version('9.6', '<')

- name: Define platypus configuration settings
  set_fact:
    platypus_port: "{{ platypus_port|default(6400) }}"
    platypus_database: "{{
      platypus_database|default(
        ('bdr' in role)|ternary(bdr_database, 'postgres')
      )
    }}"

- name: Derive a value for shared_buffers_mb
  action: set_fact
  args: >
    {{
      ('{"shared_buffers_mb": ' ~
        ("%d"|format((ansible_memtotal_mb*shared_buffers_ratio)|round)) ~
       '}')|from_json
    }}
  when: not shared_buffers_mb

- name: Derive a value for effective_cache_size_mb
  action: set_fact
  args: >
    {{
      ('{"effective_cache_size_mb": ' ~
        ("%d"|format((ansible_memtotal_mb*effective_cache_size_ratio)|round)) ~
       '}')|from_json
    }}
  when: not effective_cache_size_mb

# Here we set defaults for some configuration options based on the size
# of the cluster and other information gathered at runtime.

# Many of our estimates are based on the number of postgres instances in
# the cluster. We don't go out of our way to make these numbers accurate
# (e.g., if a cluster defines disjoint sets of primary and replicas, the
# numbers will all be overestimates). The important thing is to avoid
# making them too small.

- set_fact:
    instance_roles: "{{
      instance_roles|default([])|union([{
        'name': item,
        'role': hostvars[item].role
      }])
    }}"
  with_items: "{{ groups['all'] }}"

- action: set_fact
  args: >
    {{ ('{"num_postgres_instances": ' ~ postgres_instances ~ '}')|from_json }}
  vars:
    postgres_instances: "{{
      instance_roles|selectattr('role','contains','postgres')|list|count
    }}"

- action: set_fact
  args: >
    {{ ('{"twice_postgres_instances": ' ~ num_postgres_instances*2 ~ '}')|from_json }}

- set_fact:
    max_wal_senders: >-
      {{ max_wal_senders|default(twice_postgres_instances) }}
    max_replication_slots: >-
      {{ max_replication_slots|default(twice_postgres_instances) }}

# âThe formula for the correct minimal number of workers is: one per
# PostgreSQL instance + one per database on that instance + two per BDR
# enabled database + two per peer in the BDR group for each database.â

- set_fact:
    max_worker_processes: "{{
      max_worker_processes|default(
        (('bdr' in role)|ternary(
          num_postgres_instances + 1*8 + 2*2 + 2*(num_postgres_instances-1),
          0
        )) + twice_postgres_instances
      )
    }}"

- name: Raise max_worker_processes on replicas if required
  set_fact:
    max_worker_processes: "{{ upstream_max_worker_processes }}"
  vars:
    upstream_max_worker_processes: "{{
      hostvars[upstream_primary].get('max_worker_processes')
    }}"
  when:
    - "'replica' in role"
    - upstream_primary is defined
    - upstream_max_worker_processes is defined
    - upstream_max_worker_processes|int > max_worker_processes|int
