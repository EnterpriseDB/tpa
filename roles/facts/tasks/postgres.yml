---

# Â© Copyright EnterpriseDB UK Limited 2015-2022 - All rights reserved.

- name: Infer default_postgresql_flavour from configured repositories
  set_fact:
    default_postgresql_flavour: 2q
  when: >
    _repos is search('bdr_enterprise') or _repos is search('2ndqpostgres')
  vars:
    _repos: "{{ tpa_2q_repositories|default([])|map('lower')|join(',') }}"

- name: Set postgres_family and postgresql_flavour
  set_fact:
    postgresql_flavour: "{{ postgresql_flavour|default(default_postgresql_flavour) }}"
    postgres_family: "{{ (_flavour == 'epas')|ternary('epas', 'postgresql') }}"
    postgres_family_extended: "{{ (_flavour == '2q')|ternary('pgextended', _flavour) }}"
  vars:
    _flavour: "{{ postgresql_flavour|default(default_postgresql_flavour) }}"

- name: Validate postgresql_flavour according those which are supported
  assert:
    msg: >-
      Unrecognised postgresql_flavour setting: '{{ postgresql_flavour }}'
      (try postgresql, 2q, or epas)
    that:
      - postgresql_flavour in ['postgresql', '2q', 'epas', 'postgresql-bdr']

- name: Set postgres_data_dir
  set_fact:
    postgres_data_dir: "{{ postgres_data_dir|default(default_postgres_data_dir) }}"

- name: Update default_postgres_wal_dir if there is a volume_for postgres_wal
  set_fact:
    default_postgres_wal_dir: "{{ wal_volumes[0].mountpoint }}/pg_wal"
  vars:
    wal_volumes: >-
      {{ volumes|json_query("[?volume_for=='postgres_wal']") }}
  when:
    wal_volumes is not empty

- name: Set postgres_wal_dir
  set_fact:
    postgres_wal_dir: "{{ postgres_wal_dir|default(default_postgres_wal_dir) }}"

- name: Perform basic postgres fact discovery
  minimal_postgres_setup:
    pgdata: "{{ postgres_data_dir|default(default_postgres_data_dir) }}"
  become_user: root
  become: yes

- name: Ensure postgres_version matches pgdata_version, if defined
  assert:
    msg: >-
      postgres_version is set to {{ postgres_version }}, but
      {{ postgres_data_dir }} was initialised with {{ pgdata_version }}
    that: postgres_version|float == pgdata_version|float
  when:
    postgres_version is defined and pgdata_version is defined

- name: Ensure postgres_user matches pgdata_user, if defined
  assert:
    msg: >-
      postgres_user is set to {{ postgres_user }}, but
      {{ postgres_data_dir }} was initialised by {{ pgdata_user }}
    that: postgres_user == pgdata_user
  when:
    postgres_user is defined and pgdata_user is defined

- name: Ensure pgdata_wal_dir matches postgres_wal_dir, if defined
  assert:
    msg: >-
      Refusing to change pg_wal location from {{ pgdata_wal_dir }} to
      {{ postgres_wal_dir }} for an initialised cluster
    that: pgdata_wal_dir == postgres_wal_dir
  when:
    pgdata_wal_dir is defined and postgres_wal_dir is defined

# We don't use the mountpoint directly as the tablespace location
# because lost+found confuses pg_basebackup into thinking the target
# directory is not empty.

- name: Set default_postgres_tablespaces based on postgres_tablespace volumes
  set_fact:
    default_postgres_tablespaces: "{{
      default_postgres_tablespaces|combine({
        item.tablespace_name: {'location': item.mountpoint + '/tablespace_data'}
      })
    }}"
  with_items: >-
    {{ volumes|json_query("[?volume_for=='postgres_tablespace']") }}

- name: Set postgres_version
  set_fact:
    postgres_version: "{{ version }}"
    postgres_versionNN: "{{ version|replace('.','') }}"
  vars:
    version: "{{ postgres_version|default(pgdata_version|default(default_postgres_version)) }}"

- name: Set efm_version etc.
  set_fact:
    efm_version: "{{ version }}"
    efm_versionNN: "{{ version|replace('.','') }}"
    harp_version: "{{ harp_version|default(default_harp_version) }}"
  vars:
    version: "{{ efm_version|default(default_efm_version) }}"

- name: Set various postgres facts
  set_fact:
    postgres_package_name: "{{
      'postgresql' if postgresql_flavour in ['postgresql', '2q'] else
      'postgresql-bdr' if postgresql_flavour == 'postgresql-bdr' else
      'edb-as' if postgres_family == 'epas' else ''
    }}"
    postgres_user: "{{ postgres_user|default(default_postgres_user[postgres_family]) }}"
    postgres_group: "{{ postgres_group|default(default_postgres_user[postgres_family]) }}"
    postgres_home: "{{ postgres_home|default(default_postgres_home_dir[postgres_family][ansible_os_family]) }}"
    postgres_bin_dir: "{{ postgres_bin_dir|default(default_postgres_bin_dir[postgres_family][ansible_os_family]) }}"
    postgres_lib_dir: "{{ postgres_lib_dir|default(default_postgres_lib_dir[postgres_family][ansible_os_family]) }}"
    postgres_host: "{{ postgres_host|default('localhost') }}"
    postgres_port: "{{ postgres_port|default(default_postgres_port[postgres_family]) }}"
    unix_socket_directories: "{{
      unix_socket_directories|default(default_unix_socket_directories[postgres_family][ansible_os_family])
    }}"
    postgres_service_name: postgres
    postgres_installation_method: "{{ postgres_installation_method|default(default_postgres_installation_method) }}"
    postgres_install_dir: "{{ postgres_install_dir|default(default_postgres_install_dir) }}"
    postgres_locale: "{{ postgres_locale|default(system_locale|default(default_postgres_locale)) }}"
    postgres_users: "{{ postgres_users|default(default_postgres_users) }}"
    postgres_tablespaces: >-
      {{ default_postgres_tablespaces|combine(postgres_tablespaces|default({}), recursive=True) }}
    postgres_databases: "{{ postgres_databases|default(default_postgres_databases) }}"
    postgres_conf_files: "{{ postgres_conf_files|default(default_postgres_conf_files) }}"
    postgres_hba_local_auth_method: "{{ postgres_hba_local_auth_method|default(default_postgres_hba_local_auth_method) }}"
    log_destination: "{{ log_destination|default(default_log_destination) }}"
    install_from_source: "{{ install_from_source|default([]) }}"
    barman_user: "{{ barman_user|default(default_barman_user) }}"
    barman_group: "{{ barman_group|default(default_barman_group) }}"
    barman_home: "{{ barman_home|default(default_barman_home) }}"
    backup_name: "{{ backup_name|default(inventory_hostname) }}"
    repmgr_conf_dir: "{{ repmgr_conf_dir|default(default_repmgr_conf_dir) }}"
    bdr_version: "{{ bdr_version|default(default_bdr_version) }}"
    bdr_database: "{{ bdr_database|default(default_bdr_database) }}"
    bdr_node_name: "{{ bdr_node_name|default(inventory_hostname) }}"
    bdr_node_group: "{{ bdr_node_group|default(default_bdr_node_group) }}"
    haproxy_port: "{{ haproxy_port|default(default_haproxy_port[postgres_family]) }}"
    haproxy_bind_address: "{{ haproxy_bind_address|default(default_haproxy_bind_address) }}"
    pgbouncer_port: "{{ pgbouncer_port|default(default_pgbouncer_port) }}"
    pgbouncer_backend: "{{ pgbouncer_backend|default(default_pgbouncer_backend) }}"
    pgbouncer_backend_port: "{{ pgbouncer_backend_port|default(default_pgbouncer_backend_port[postgres_family]) }}"
    pgbouncer_auth_user: "{{ pgbouncer_auth_user|default(default_pgbouncer_auth_user) }}"
    pgbouncer_server_login_retry: "{{ pgbouncer_server_login_retry|default(default_pgbouncer_server_login_retry) }}"
    haproxy_server_options: "{{ haproxy_server_options|default([]) }}"
    wal_or_xlog: "{{ wal_string }}"
    max_connections: "{{ max_connections|default(default_max_connections) }}"
    harp_listen_port: "{{ harp_listen_port|default(default_harp_listen_port) }}"
    publications: "{{ publications|default([]) }}"
    subscriptions: "{{ subscriptions|default([]) }}"
    failover_manager: "{{ failover_manager|default(default_failover_manager) }}"
    harp_location: "{{ harp_location|default(location) }}"
    harp_directory: "{{ harp_directory|default(default_harp_directories[harp_version]) }}"
    harp_proxy_mode: "{{ harp_proxy_mode|default(default_harp_proxy_mode) }}"
    etcd_peer_port: "{{ etcd_peer_port|default(default_etcd_peer_port) }}"
    etcd_client_port: "{{ etcd_client_port|default(default_etcd_client_port) }}"
    etcd_compaction_mode: "{{ etcd_compaction_mode|default(default_etcd_compaction_mode) }}"
    etcd_compaction_retention: "{{ etcd_compaction_retention|default(default_etcd_compaction_retention) }}"
    efm_conf_dir: "{{ efm_conf_dir|default(default_efm_conf_dir) }}"
    efm_bin_dir: "{{ efm_bin_dir|default(default_efm_bin_dir) }}"
    pem_base_dir: "{{ pem_base_dir|default(default_pem_base_dir) }}"
    pem_agent_base_dir: "{{ pem_agent_base_dir|default(default_pem_agent_base_dir) }}"
    pem_agent_service_name: "{{ pem_agent_service_name|default(default_pem_agent_service_name) }}"
    pem_database: "{{ pem_database|default(default_pem_database) }}"
    pem_server_description: "{{ pem_server_description|default(inventory_hostname) }}"
    pem_server_group: "{{ pem_server_group|default(default_pem_server_group) }}"
    efm_bind_port: "{{ efm_bind_port|default(default_efm_bind_port) }}"
  vars:
    default_postgres_installation_method: >-
      {{ postgres_installation_source|default('pkg') }}
    wal_string: >-
      {%- if postgres_version is version('10', '>=') -%}wal
      {%- else -%}xlog
      {%- endif -%}

- name: Add postgres libs and PGHOST to target_environment
  set_fact:
    target_environment: "{{ target_environment|combine(_task_environment) }}"
  vars:
    _task_environment:
       LD_LIBRARY_PATH: "{{ postgres_lib_dir }}"
       PGHOST: '{{ unix_socket_directories|join(",") }}'
  when: >
     'postgres' in role

- name: Disallow setting shared_preload_libraries directly
  assert:
    msg: >-
      Setting shared_preload_libraries directly is not supported;
      if required, please set it under postgres_conf_settings instead
    that: shared_preload_libraries is not defined

- name: Ensure all postgres_tablespaces entries have location defined
  assert:
    msg: >-
      Tablespace {{ item.key }} must have location defined
    that: item.value.location is not empty
  with_dict: >-
    {{ postgres_tablespaces|default({}) }}

- name: Disable repmgr/EFM for BDR instances
  set_fact:
    failover_manager: none
  when: >
    'bdr' in role
    and failover_manager not in ['harp']

# We must set harp_consensus_protocol for BDR and harp-proxy instances.
# The value may be set in config.yml, or set by minimal_postgres_setup
# above on an existing cluster, or be set to the default value for the
# harp_version in use. We use the value from first_bdr_primary, if any,
# to set the value for other instances.

- set_fact:
    harp_consensus_protocol: "{{
      harp_consensus_protocol
      |default(
        hostvars[first_bdr_primary].harp_consensus_protocol
        |default(default_harp_consensus_protocols[harp_version])
      )
    }}"
  when: >
    failover_manager == 'harp'
    and ('bdr' in role or 'harp-proxy' in role)

# We must ensure that instances within a single bdr_node_group, and any
# harp-proxy instances for the bdr_node_group, have the same setting of
# harp_consensus_protocol.

- assert:
    msg: >-
      Every bdr and harp-proxy instance with bdr_node_group={{ bdr_node_group }}
      must have harp_consensus_protocol={{ harp_consensus_protocol }}, but
      {{ _mismatch_descriptions|join(", ") }}
    that:
      _mismatched_instances is empty
  vars:
    _group_proxies: "{{
      groups['role_harp-proxy']
      |select_by_hostvar(hostvars, 'bdr_node_group', bdr_node_group)
      |list
    }}"
    _all_group_instances: "{{
      groups[bdr_node_group]|union(_group_proxies)
    }}"
    _compliant_instances: "{{
      _all_group_instances
      |select_by_hostvar(hostvars, 'harp_consensus_protocol', harp_consensus_protocol)
      |list
    }}"
    _mismatched_instances: "{{
      _all_group_instances|symmetric_difference(_compliant_instances)
    }}"
    _mismatch_descriptions: "{{
      _mismatched_instances
      |map('pyformat_hostvars', '{inventory_hostname} has the value {harp_consensus_protocol}', hostvars)
      |list
    }}"
  when: >
    'bdr' in role
    and failover_manager == 'harp'
    and inventory_hostname == first_bdr_primary

# If we are using HARP v2 with etcd as the consensus layer, and there
# are no instances explicitly labelled with `role: etcd`, we add the
# etcd role to all BDR primary candidates and witnesses.

- name: Add etcd role to BDR instances if required
  set_fact:
    role: "{{ role|union(['etcd']) }}"
  when: >
    'bdr' in role
    and failover_manager == 'harp'
    and harp_consensus_protocol == 'etcd'
    and groups['role_etcd']|default([]) is empty
    and (inventory_hostname in first_bdr_primary_candidates
      or 'witness' in role)

- name: Recreate role_etcd group after role changes
  group_by:
    key: "role_etcd"
  when: >
    'etcd' in role

- name: Add {{ bdr_database }} to postgres_databases
  set_fact:
    postgres_databases: "{{
      postgres_databases|union([default_bdr_database_entry])
    }}"
  vars:
    default_bdr_database_entry:
      name: "{{ bdr_database }}"
      owner: "{{ postgres_user }}"
      extensions:
      - name: btree_gist
      - name: bdr
        cascade: "{{ postgres_version is version('9.6', '>=') }}"
    bdr_database_entry: >-
      {{ postgres_databases|json_query("[?name=='%s']" % bdr_database) }}
  when: >
    'bdr' in role and bdr_database_entry is empty

- name: Ensure haproxy_maxconn is set
  set_fact:
    haproxy_maxconn: "{{
      haproxy_maxconn|default(((max_connections|int)*0.90)|int)
    }}"

- name: Ensure haproxy_backend_servers is defined
  set_fact:
    haproxy_backend_servers: "{{ haproxy_backends }}"
  when:
    haproxy_backends is defined and
    haproxy_backend_servers is not defined

- name: Ensure haproxy_stats_socket is set
  set_fact:
    haproxy_stats_socket:
      "{{ (ansible_distribution == 'RedHat' and ansible_distribution_major_version|int == 8)
        |ternary('/var/run/haproxy.sock', default_haproxy_stats_socket) }}"
  when:
    haproxy_stats_socket is not defined

# If pgbouncer_backend points to a particular instance, we respect any
# custom haproxy_port or postgres_port setting for that instance. Note
# that changing haproxy_port without changing pgbouncer_backend won't
# automatically work as expected.

- name: Override pgbouncer_backend_port if required
  set_fact:
    pgbouncer_backend_port: "{{ _backend_port }}"
  when:
    pgbouncer_backend in hostvars and
    (hostvars[pgbouncer_backend].haproxy_port is defined or
     hostvars[pgbouncer_backend].postgres_port is defined)
  vars:
    _backend_vars: "{{ hostvars[pgbouncer_backend] }}"
    _backend_port: "{{
      _backend_vars['haproxy_port']|default(_backend_vars['postgres_port'])
    }}"

# We set pgbouncer_max_client_conn to 90% of max_connections for the
# backend Postgres server by default. In the special case of haproxy
# running on the pgbouncer host and pgbouncer pointing to it, we use
# the minimum haproxy_maxconn value from the haproxy_backend_servers
# instead.

- name: Set pgbouncer_max_client_conn from max_connections
  set_fact:
    pgbouncer_max_client_conn: "{{
      pgbouncer_max_client_conn|default(_maxconn)
    }}"
  when: >
    'pgbouncer' in role
  vars:
    _backend: "{{
      pgbouncer_backend
        if pgbouncer_backend not in
          ['127.0.0.1', 'localhost', inventory_hostname]
        else inventory_hostname
    }}"
    _backend_maxconn: "{{
      hostvars.get(_backend, {}).get('max_connections')
    }}"
    _backend_is_haproxy: "{{
      'haproxy' in role
      and _backend == inventory_hostname
      and pgbouncer_backend_port == haproxy_port
    }}"
    _haproxy_backend_maxconns: "{{
      haproxy_backend_servers|default([])
      |map('extract', hostvars, 'haproxy_maxconn')
      |select('defined')|list
    }}"
    _haproxy_backend_maxconn: "{{
      _haproxy_backend_maxconns is not empty
      and _haproxy_backend_maxconns|min
    }}"
    _maxconn: "{{
      _backend_is_haproxy and
        _haproxy_backend_maxconn or
        (_backend_maxconn is defined and
          ((_backend_maxconn|int)*0.90)|int or
          default_pgbouncer_max_client_conn)
    }}"

# Transform pgbouncer_databases into a new list where each item's
# 'options' is guaranteed to have host/port/auth_user set. Also, for
# backwards-compatibility, if 'dsn' is specified, we pass it through
# after appending auth_user to it.
#
# In every case, we want to set auth_user=pgbouncer_auth_user.

- name: Fill in pgbouncer_databases options
  set_fact:
    _pgbouncer_databases: "{{
      _pgbouncer_databases|default([])|union([
        {
          'name': item.name,
          'options': {
            'host': pgbouncer_backend,
            'port': pgbouncer_backend_port,
          }|combine(item.options|default({}))|combine({'auth_user': pgbouncer_auth_user})
        }|combine(
          ('dsn' in item)|ternary(
            {'dsn': '%s auth_user=%s' % (item.get('dsn'), pgbouncer_auth_user)},
            {}
          )
        )
      ])
    }}"
  with_items: "{{ pgbouncer_databases|default(default_pgbouncer_databases) }}"

- name: Set pgbouncer_databases
  set_fact:
    pgbouncer_databases: "{{ _pgbouncer_databases }}"

- name: Set default config paths
  set_fact:
    postgres_conf_dir: "{{ postgres_conf_dir|default('') or postgres_data_dir }}"
    repmgr_conf_file: "{{ repmgr_conf_dir }}/repmgr.conf"

- name: Override postgres_bin_dir for source builds
  set_fact:
    postgres_bin_dir: "{{ postgres_install_dir }}/bin"
  when: >
    'postgres' in role and
    postgres_installation_method == 'src'

- name: Set default build_path
  set_fact:
    build_path: "{{ build_path|default(default_build_path)|join(':') }}"

- name: Set client DSN attributes
  set_fact:
    postgres_client_dsn_attributes: "{{ postgres_client_dsn_attributes|default('') }}"
    barman_client_dsn_attributes: "{{ barman_client_dsn_attributes|default('') }}"
    repmgr_client_dsn_attributes: "{{ repmgr_client_dsn_attributes|default('') }}"
    bdr_client_dsn_attributes: "{{ bdr_client_dsn_attributes|default('') }}"
    harp_dcs_client_dsn_attributes: "{{ harp_dcs_client_dsn_attributes|default('') }}"

- name: Set default DSNs
  set_fact:
    dsn: "port={{ postgres_port }}"
    postgres_dsn: "port={{ postgres_port }} dbname=postgres"
    node_dsn: >-
      host={{ inventory_hostname }} port={{ postgres_port }}
    repmgr_node_dsn: >-
      host={{ _repmgr_hostname }} port={{ postgres_port }} dbname=repmgr user=repmgr {{ repmgr_client_dsn_attributes }}
    bdr_node_dsn: >-
      host={{ inventory_hostname }} port={{ postgres_port }} dbname={{ bdr_database }} user={{ postgres_user }} {{ bdr_client_dsn_attributes }}
    pgbouncer_node_dsn: >-
      host={{ inventory_hostname }} port={{ pgbouncer_port }}
    harp_dcs_node_dsn: >-
      host={{ inventory_hostname }} port={{ postgres_port }} user={{ postgres_user }} {{ harp_dcs_client_dsn_attributes }}
  vars:
    _repmgr_hostname: "{{ repmgr_hostname|default(inventory_hostname) }}"

- name: Set default max_prepared_transactions
  set_fact:
    max_prepared_transactions: 16
  when: >
    'bdr' in role and max_prepared_transactions is not defined

# Determine the upstream primary for this host, that is, the primary at
# the root of the cascading replication setup. This may be the instance
# itself, if it's a primary.

- name: Record name of the upstream primary
  set_fact:
    upstream_primary: "{{ inventory_hostname|upstream_root(hostvars) }}"
  when: >
    'postgres' in role

# Find any backed-up instance that is the upstream_primary, or a replica
# thereof. We would prefer to use a backup server in the same region,
# but we'll take whatever we can find.

- name: Record name of any upstream or sibling with backups
  set_fact:
    upstream_backedup: "{{
      groups[cluster_tag]
      |instance_with_backup_of(upstream_primary, inventory_hostname, hostvars)
    }}"
  when: >
    'postgres' in role

# If this is a PEM server instance, we need a database dedicated to PEM.

- name: Add {{ pem_database }} to postgres_databases
  set_fact:
    postgres_databases: "{{
      postgres_databases|union([default_pem_database_entry])
    }}"
  vars:
    default_pem_database_entry:
      name: "{{ pem_database }}"
      owner: "{{ postgres_user }}"
      extensions:
      - name: sslutils
      languages:
      - name: plpgsql
    pem_database_entry: >-
      {{ postgres_databases|json_query("[?name=='%s']" % pem_database) }}
  when: >
    'pem-server' in role and pem_database_entry is empty

- name: Set list of Postgres extensions
  set_fact:
    postgres_extensions: "{{
      postgres_extensions|default(
        default_postgres_extensions
        |union(extra_postgres_extensions|default([]))
        |union(needs_pglogical|ternary(['pglogical'], []))
      )
    }}"
  vars:
    needs_pglogical: >-
      {{
        publications|union(subscriptions)
        |selectattr('type', 'equalto', 'pglogical')
        |list is not empty
      }}

- name: Remove pg_visibility for Postgres <9.6
  set_fact:
    postgres_extensions: "{{
      postgres_extensions
      |reject('equalto', 'pg_visibility')
      |list
    }}"
  when: postgres_version is version('9.6', '<')

- name: Define platypus configuration settings
  set_fact:
    platypus_port: "{{ platypus_port|default(6400) }}"
    platypus_database: "{{
      platypus_database|default(
        ('bdr' in role)|ternary(bdr_database, 'postgres')
      )
    }}"

- name: Derive a value for shared_buffers_mb
  action: set_fact
  args: >
    {{
      ('{"shared_buffers_mb": ' ~
        ("%d"|format((ansible_memtotal_mb*shared_buffers_ratio)|round)) ~
       '}')|from_json
    }}
  when: not shared_buffers_mb

- name: Derive a value for effective_cache_size_mb
  action: set_fact
  args: >
    {{
      ('{"effective_cache_size_mb": ' ~
        ("%d"|format((ansible_memtotal_mb*effective_cache_size_ratio)|round)) ~
       '}')|from_json
    }}
  when: not effective_cache_size_mb

# Here we set defaults for some configuration options based on the size
# of the cluster and other information gathered at runtime.

# Many of our estimates are based on the number of postgres instances in
# the cluster. We don't go out of our way to make these numbers accurate
# (e.g., if a cluster defines disjoint sets of primary and replicas, the
# numbers will all be overestimates). The important thing is to avoid
# making them too small.

# This coerces the type of num_postgres_instances to an int

- name: Count the number of postgres instances
  action: set_fact
  args: >
    {{ ('{"num_postgres_instances": ' ~ groups['role_postgres']|default([])|count ~ '}')|from_json }}

# This coerces the type of twice_postgres_instances to an int

- name: Set convenience value for num_postgres_instances*2
  action: set_fact
  args: >
    {{ ('{"twice_postgres_instances": ' ~ num_postgres_instances*2 ~ '}')|from_json }}

- name: Set default values for max_wal_senders and max_replication_slots
  set_fact:
    max_wal_senders: >-
      {{ max_wal_senders|default(twice_postgres_instances) }}
    max_replication_slots: >-
      {{ max_replication_slots|default(twice_postgres_instances) }}

# âThe formula for the correct minimal number of workers is: one per
# PostgreSQL instance + one per database on that instance + two per BDR
# enabled database + two per peer in the BDR group for each database.â

- name: Calculate a base value for max_worker_processes
  set_fact:
    base_max_worker_processes: "{{
      max_worker_processes|default(
        (
          ('bdr' in role)|ternary(
            num_postgres_instances + 1*8 + 2*2 + 2*(num_postgres_instances-1),
            0
          )
        ) + twice_postgres_instances
      )
    }}"

# If max_worker_processes is not explicitly set, we use the value
# calculated above or the default, whichever is larger.

- name: Set default value for max_worker_processes
  set_fact:
    max_worker_processes: "{{
      max_worker_processes|default(
        [base_max_worker_processes|int, default_max_worker_processes]|max
      )
    }}"

- name: Set barman archive command if required
  set_fact:
    archive_command: "{{ default_barman_archive_command }}"
  when:
    - backup is defined
    - backup in groups['role_barman']|default([])
    - archive_command is not defined
    - barman_archiver is defined
    - barman_archiver|bool is true

- name: Raise max_worker_processes on replicas if required
  set_fact:
    max_worker_processes: "{{ upstream_max_worker_processes }}"
  vars:
    upstream_max_worker_processes: "{{
      hostvars[upstream_primary].get('max_worker_processes')
    }}"
  when:
    - "'replica' in role"
    - upstream_primary is defined
    - upstream_max_worker_processes is defined
    - upstream_max_worker_processes|int > max_worker_processes|int

- name: Ensure replicas have the same postgres_tablespaces as primary
  assert:
    msg: >
      Replicas must have the same postgres_tablespaces settings
      as primary
    that: upstream_postgres_tablespaces == postgres_tablespaces
  vars:
    upstream_postgres_tablespaces: "{{
      hostvars[upstream_primary].get('postgres_tablespaces')
    }}"
  when:
    - "'replica' in role"
    - upstream_primary is defined
    - upstream_postgres_tablespaces is defined or postgres_tablespaces is defined
