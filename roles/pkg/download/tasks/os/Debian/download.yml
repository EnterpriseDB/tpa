---

# Â© Copyright EnterpriseDB UK Limited 2015-2022 - All rights reserved.

# We need dpkg-dev for dpkg-scanpackages, to generate repository metadata.

- name: Install dpkg-dev
  package:
    name:
      - dpkg-dev

# We use the apt cache to extract Depends and PreDepends packages
# filtering out other types of association like Recommends and Suggests.
# Additionally, the recurse option follows all dependency trees
# including virtual packages.
#
# Any remaining virtual packages in the list and indented lines are
# excluded, the list is sorted and duplicates removed.
#
# The final output contains packages that we need to download.

- name: Generate list of packages with all dependencies
  shell: |
    apt-cache depends \
      --no-recommends --no-suggests --no-conflicts \
      --no-breaks --no-replaces --no-enhances \
      --recurse \
      {{ _packages }} \
    | grep '^\w' | sort -u
  args:
    executable: /bin/bash
  register: _pkg_list
  vars:
    _packages: "{{ package_list|mandatory|map('quote')|join(' ') }}"

- name: Download packages with apt-get (for {{ ansible_distribution }} {{ ansible_distribution_major_version }})
  command: "apt-get download {{ _all_packages_and_dependencies }}"
  args:
    chdir: "{{ _download_dir }}"
  register: _apt_get_download
  vars:
    _all_packages_and_dependencies: >
      {{ _pkg_list.stdout_lines|map('quote')|join(' ') }}
  changed_when: >
    _apt_get_download.stdout_lines|length > 0

- name: Generate repository metadata with dpkg-scanpackages
  shell: |
    set -eo pipefail
    (dpkg-scanpackages --type deb . && dpkg-scanpackages --type ddeb .) | gzip > Packages.gz
  args:
    chdir: "{{ _download_dir }}"
