---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

- include_tasks: init.yml
  when:
    not patroni_initialised

# All facts for configuration should be available by this stage so this is
# where the patroni YAML config file can be created or updated.

- include_tasks: config.yml

- meta: flush_handlers

# Start or restart the patroni daemon first in case we're changing any listening ports/protocols

- include_role:
    name: patroni/service
    tasks_from: restart
  vars:
    to_state: "{{
      patroni_first_run|default(False)
      |ternary(
        'started',
        patroni_service_end_state|default('started')
      )
      }}"

# Need to refresh the patroni state facts at this point across all nodes.
# Patroni should be running everywhere, and we want to clean up any
# extraneous postgres config before asking patroni to restart postgres,
# if it is needed. That means we need to flush_handlers again.

- include_role:
    name: patroni/facts
    tasks_from: state

- include_role:
    name: postgres/config
    tasks_from: cleanup

- meta: flush_handlers

# If the cluster has been initialised and the generated dcs config is different to
# what is stored in dcs then update it.

- block:
  - name: Get current dcs config
    include_role:
      name: patroni/api
      tasks_from: config

  - name: Assemble new dcs config
    set_fact:
      new_dcs_config: "{{ patroni_dynamic_conf|combine(extra_conf) }}"
    vars:
      slots: "{{ _patroni_conf_permanent_slots['bootstrap']['dcs']['slots'] }}"
      ignore_slots: "{{ _patroni_conf_backup['bootstrap']['dcs']['ignore_slots'] }}"
      extra_conf: "{{ {'slots': slots, 'ignore_slots': ignore_slots } }}"

  - name: Compare new config to current
    set_fact:
      patroni_dcs_config_update: "{{ current_dcs_config != new_dcs_config }}"
    vars:
      current_dcs_config: "{{ patroni_config_api_output.json }}"

  when:
    patroni_initialised
    and 'primary' in role

- name: Update the dcs config if it's different
  include_role:
    name: patroni/api
    tasks_from: config
  when:
    patroni_dcs_config_update|default(false)
    and patroni_initialised
    and 'primary' in role
  vars:
    body: "{{ new_dcs_config }}"
    method: "PUT"

# If any pending postgres restart is queued, first from any TPA changes and then
# from patroni's perspective, do that now.

- name: Issue a postgresql restart if required
  include_role:
    name: patroni/api
    tasks_from: restart
  run_once: true
  vars:
    body:
      restart_pending: true
  when:
    patroni_initialised

# If "patroni" package was replaced with "edb-patroni" package during this deploy
# run, then the cluster should be in paused state at this point (see
# "patroni/pkg/replace-packages.yml"). In that case, we need to unpause the Patroni
# cluster now, so it resumes normal operation after the package replacement.

- name: Unpause the Patroni cluster when replacing patroni with edb-patroni package (or vice-versa)
  include_role:
    name: patroni/api
    tasks_from: config
  run_once: true
  vars:
    body:
      pause: false
  when:
    replacing_patroni_package|default(false)

# Since the topology of the cluster may have changed during the patroni
# setup process, we collect cluster_facts again.

- name: Collect facts about the Postgres cluster
  cluster_discovery:
    conninfo: "{{ postgres_dsn }}"
  become_user: "{{ postgres_user }}"
  become: yes

- set_fact:
    cluster_facts: "{{ ansible_facts.cluster_facts|default({}) }}"
