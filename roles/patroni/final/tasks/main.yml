---

# Â© Copyright EnterpriseDB UK Limited 2015-2023 - All rights reserved.

- include_vars: ../../vars/main.yml

- include_tasks: init.yml
  when:
    not patroni_initialised
    and 'primary' in role

# All facts for configuration should be available by this stage so this is
# where the patroni YAML config file can be created or updated.

- include_tasks: config.yml

- meta: flush_handlers

# Start or restart the patroni daemon first in case we're changing any listening ports/protocols

- include_role:
    name: patroni/service
    tasks_from: restart
  vars:
    to_state: "{{
      patroni_first_run|default(False)
      |ternary(
        'started',
        patroni_service_end_state|default('started')
      )
    }}"

# Need to refresh the patroni state facts at this point across all nodes.
# Patroni should be running everywhere, and we want to clean up any
# extraneous postgres config before asking patroni to restart postgres,
# if it is needed. That means we need to flush_handlers again.

- include_role:
    name: patroni/facts
    tasks_from: state

- include_role:
    name: postgres/config
    tasks_from: cleanup

- meta: flush_handlers

# If the cluster has been initialised and the generated dcs config is different to
# what is stored in dcs then update it.

- block:
  - name: Get current dcs config
    include_role:
      name: patroni/api
      tasks_from: config

  - name: Compare generated config to current
    set_fact:
      patroni_dcs_config_update: "{{ current_dcs_config != new_patroni_dcs_config }}"
    vars:
      current_dcs_config: "{{ patroni_config_api_output.json }}"
      new_patroni_dcs_config: "{{ patroni_dynamic_conf }}"

  - name: Set final dcs config
    set_fact:
      patroni_final_dcs_config: "{{ patroni_dynamic_conf }}"

  when:
    patroni_initialised
    and 'primary' in role

- name: Update the dcs config if it's different
  include_role:
    name: patroni/api
    tasks_from: config
  when:
    patroni_dcs_config_update|default(false)
    and patroni_initialised
    and 'primary' in role
  vars:
    body: "{{ patroni_final_dcs_config }}"

# If any pending postgres restart is queued, first from any TPA changes and then
# from patroni's perspective, do that now.

- name: Issue a postgresql restart if required
  include_role:
    name: patroni/api
    tasks_from: restart
  run_once: true
  vars:
    body:
      restart_pending: true
  when:
    patroni_initialised
    and postgres_service_end_state|default('started') == 'restarted'

# Since the topology of the cluster may have changed during the patroni
# setup process, we collect cluster_facts again.

- name: Collect facts about the Postgres cluster
  cluster_discovery:
    conninfo: "{{ postgres_dsn }}"
  become_user: "{{ postgres_user }}"
  become: yes

- set_fact:
    cluster_facts: "{{ ansible_facts.cluster_facts|default({}) }}"
