---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

- include_vars: config.yml

# Postgres config, generated by the postgres/config role, is merged here.
# As TPA only generates postgres config when `initdb` has occurred. we
# do the same here. This will mean that on a new cluster the `bootstrap.dcs`
# config for the DCS will only be populated on the primary. When the DCS
# config is updated it will be compared once against the config returned
# by the API

- name: Ensure postgres config facts are set
  assert:
    that: hostvars[inventory_hostname][item] is defined
    fail_msg: >
      The fact {{ item }} is not defined, ensure that the postgres/config role has run
  with_items:
    - postgres_config
    - postgres_restart_config
  when: pgdata_initialised

# This is used to update running clusters once bootstrapped and the
# initial bootstrap settings in the patroni config YAML file

# Build the dynamic config first from parameter defaults set by the postgres role.

# Some keys are controlled by Patroni, so they are removed here if set
# See https://patroni.readthedocs.io/en/latest/dynamic_configuration.html

- name: Update patroni config with postgres parameters
  include_role:
    name: config/add_to_obj
  vars:
    _remove_keys:
      - cluster_name
      - listen_address
      - port
      - hot_standby
    object_varname: patroni_dynamic_conf
    object_contents:
      postgresql:
        parameters: "{{
            postgres_config
            |combine(
              postgres_restart_config
            )
            |remove_keys(keys=_remove_keys)
          }}"
  when:
    pgdata_initialised
    and 'primary' in role

# Then populate dynamic config with defaults for patroni,
# then user supplied settings in `config.yml`

- name: Set fact for patroni dynamic config DCS settings
  include_role:
    name: config/add_to_obj
  vars:
    object_varname: patroni_dynamic_conf
    object_contents: "{{
        _patroni_dynamic_conf_defaults
        |combine(
          patroni_conf_settings.bootstrap.dcs|default({})
          |combine(
            patroni_dynamic_conf_settings|default({}),
            recursive=True
          ),
          recursive=True
        )
      }}"

# Ensure that all patroni node config files contain the same dynamic data

- name: Export patroni dynamic facts to patroni replica nodes
  set_fact:
    patroni_dynamic_conf: "{{ patroni_dynamic_conf }}"
  delegate_facts: true
  delegate_to: "{{ item }}"
  with_items: "{{ groups['role_replica'] }}"
  when:
    pgdata_initialised
    and 'primary' in role

# During first run `pg_hba.conf` data exists only on the primary

- name: Export the postgres pg_hba settings from the primary
  set_fact:
    postgres_pg_hba_config: "{{ postgres_pg_hba_config }}"
  delegate_facts: true
  delegate_to: "{{ item }}"
  with_items: "{{ groups['role_replica'] }}"
  when:
    pgdata_initialised
    and 'primary' in role

# Now we're ready to populate the patroni YAML config file contents

- name: Create a patroni config fact
  include_role:
    name: config/add_to_obj
  vars:
    object_varname: patroni_conf
    object_contents: "{{ _patroni_conf }}"

- name: Update patroni config with dynamic DCS settings
  include_role:
    name: config/add_to_obj
  vars:
    object_varname: patroni_conf
    object_contents:
      bootstrap:
        dcs: "{{ patroni_dynamic_conf }}"

- name: Update patroni config with pg_hba settings
  include_role:
    name: config/add_to_obj
  vars:
    object_varname: patroni_conf
    object_contents:
      postgresql:
        pg_hba:
          "{{ postgres_pg_hba_config }}"

- name: Update patroni config with pg_ident settings
  include_role:
    name: config/add_to_obj
  vars:
    object_varname: patroni_conf
    object_contents:
      postgresql:
        pg_ident:
          "{{ postgres_pg_ident_config }}"
  when: postgres_pg_ident_config is defined

# We only want to add this when the custom waldir is not under datadir, otherwise
# Patroni will get into an infinite crash loop if it ever attempts to rebuild a replica.

- name: Update patroni config with custom 'postgres_wal_dir'
  include_role:
    name: config/add_to_obj
  vars:
    object_varname: patroni_conf
    object_contents: "{{ _patroni_custom_postgres_wal_dir }}"
  when: not postgres_wal_dir.startswith(postgres_data_dir)

- name: Update patroni config with SSL settings if required
  include_role:
    name: config/add_to_obj
  vars:
    object_varname: patroni_conf
    object_contents: "{{ _patroni_conf_ssl }}"
  when: patroni_ssl_enabled

- name: Update patroni config with postgres rewind settings if required
  include_role:
    name: config/add_to_obj
  vars:
    object_varname: patroni_conf
    object_contents: "{{ _patroni_conf_rewind }}"
  when: patroni_rewind_enabled

- name: Update patroni config with ETCD settings if required
  include_role:
    name: config/add_to_obj
  vars:
    object_varname: patroni_conf
    object_contents: "{{ _patroni_conf_etcd }}"
  when: patroni_dcs == 'etcd'

- name: Update patroni config with watchdog settings if required
  include_role:
    name: config/add_to_obj
  vars:
    object_varname: patroni_conf
    object_contents: "{{ _patroni_conf_watchdog }}"
  when: patroni_watchdog_enabled

- name: Update patroni config with backup settings if required
  include_role:
    name: config/add_to_obj
  vars:
    object_varname: patroni_conf
    object_contents: "{{ _patroni_conf_backup }}"
  when:
    backup is defined
    and backup is not empty

- name: Update patroni config with permanent physical slots
  include_role:
    name: config/add_to_obj
  vars:
    object_varname: patroni_conf
    object_contents: "{{ _patroni_conf_permanent_slots }}"

- name: Configure integration of patroni and pgbouncer (reconfigure pgbouncer on failovers)
  block:
    - name: Install on_role_change script
      template:
        src: "on_role_change.sh.j2"
        dest: "{{ patroni_etc }}/on_role_change.sh"
        owner: "{{ postgres_user }}"
        group: "{{ postgres_group }}"
        mode: "0750"

    - name: Update config with on_role_change callback
      include_role:
        name: config/add_to_obj
      vars:
        object_varname: patroni_conf
        object_contents: "{{ _patroni_conf_on_role_change }}"
  when: not groups['role_pgbouncer']|default([]) is empty

- name: Finally apply any user defined overrides
  include_role:
    name: config/add_to_obj
  vars:
    object_varname: patroni_conf
    object_contents: "{{ patroni_conf_settings }}"
  when:
    patroni_conf_settings is defined
    and patroni_conf_settings is not empty

- name: Validate patroni configuration
  assert:
    that: "{{
        patroni_conf_required_keys
        |reject('in', patroni_conf_keys)
        |list is empty
      }}"
    fail_msg: Patroni config does not contain the required keys
  vars:
    patroni_conf_keys: "{{ patroni_conf.keys() }}"
    patroni_conf_required_keys:
      - scope
      - namespace
      - name
      - bootstrap
      - postgresql
      - restapi
