---

- block:
  - name: Create a table on first node
    postgresql_query:
      conninfo: "{{ bdr_node_dsn }}"
      queries:
        - SELECT bdr.bdr_replicate_ddl_command('DROP TABLE IF EXISTS public.bdr_test;');
        - SELECT bdr.bdr_replicate_ddl_command('CREATE TABLE public.bdr_test(c1 INT, PRIMARY KEY (c1));');
        - INSERT INTO public.bdr_test VALUES (1);

  - name: Wait for replication to catch up
    shell: |
      {{postgres_bin_dir}}/psql '{{bdr_node_dsn}}' -Atw <<EOF
      DO $do$
      DECLARE
        c_pos CONSTANT pg_lsn := pg_current_xlog_location();
      BEGIN
        WHILE EXISTS(SELECT true FROM pg_stat_get_wal_senders() s WHERE s.flush_location < pg_lsn AND application_name like $$bdr%$$ LOOP
          PERFORM pg_sleep(0.1);
        END LOOP;
      END;
      $do$;
      EOF
    args:
      executable: /bin/bash

  - name: Check the table on the other nodes
    postgresql_query:
      conninfo: "{{ hostvars[item].bdr_node_dsn }}"
      query: >
        SELECT * FROM public.bdr_test;
    with_items: "{{ bdr_other_hosts }}"
    register: bdr_rep

  - name: Assert an error if test fails
    fail:
      message: "BDR replication fails, please check the bdr nodes."
    when:  item.c1 != 1
    with_items: "{{ bdr_rep.results }}"

  - name: Drop the test table
    postgresql_query:
      conninfo: "{{ bdr_node_dsn }}"
      query: >
        SELECT bdr.bdr_replicate_ddl_command('DROP TABLE public.bdr_test;');
  when: (bdr_control_host == inventory_hostname)
  become_user: "{{ postgres_user }}"
  become: yes
