---

- name: Export bdr_node_dsn fact
  set_fact:
    bdr_node_dsn: "host={{ ip_address }} port={{postgres_port}} dbname={{bdr_db_name}} user=postgres"

- name: Check for bdr node setup in the database
  command: "{{pgbindir}}/psql '{{bdr_node_dsn}}' -qAtw -c \"SELECT 1 FROM bdr.bdr_nodes WHERE node_status != 'k' LIMIT 1;\""
  register: bdr_node_result
  become_user: postgres
  become: yes

- name: Set bdr_node_exists fact
  set_fact:
    bdr_node_exists: "{{ bdr_node_result.stdout|int == 1 }}"

# There are two possible scenarios, either this is a new cluster in which case
# we can pick any host which is supposed to be part of the bdr cluster
# as the control host or this is an already existing cluster in which case
#  we need to pick a host that is part of that existing cluster
# (in other words we must be careful to avoid picking any newly added host
# that is not yet part of the existing cluster) because the control host
# is also used by the other hosts to connect to the cluster

- name: Set default bdr_control_host in case of new cluster
  set_fact:
    bdr_control_host: "{{ groups['tag_role_bdr'] | first }}"

- name: Set bdr_control_host in case of an existing cluster
  set_fact:
    bdr_control_host: "{{ item }}"
  when: "hostvars[item].bdr_node_exists"
  with_items: "{{ groups['tag_role_bdr'] }}"

- name: Set bdr_other_hosts
  set_fact:
    bdr_other_hosts: "{{ groups['tag_role_bdr'] | difference([bdr_control_host]) | list }}"
