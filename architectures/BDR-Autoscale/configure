#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright Â© 2ndQuadrant Limited <info@2ndquadrant.com>

from __future__ import print_function

import sys
import itertools

try:
    from tpaexec.architectures.bdr_always_on import BDR_Always_ON
except:
    print('Please invoke via: tpaexec configure <clustername> --architecture <archname>')
    sys.exit(-1)

class Autoscale(BDR_Always_ON):
    def add_architecture_options(self, p, g):
        g.add_argument(
            '--num-bdr-instances', type=int, metavar='N',
            help='number of BDR instances required',
            dest='num_bdr_instances', default=4
        )
        super(Autoscale, self).add_architecture_options(p, g)

    def update_argument_defaults(self, defaults):
        super(Autoscale, self).update_argument_defaults(defaults)
        defaults.update({
            'postgres_version': 11,
            'tpa_2q_repositories': [
                'products/2ndqpostgres/release',
            ]
        })

    def num_instances(self):
        return 10+self.args['num_bdr_instances']

    # We enumerate the BDR primary instances in our cluster that will
    # participate in sharding.

    def _bdr_primaries(self):
        primaries = []
        for i in self.args['instances']:
            r = i.get('role')
            if 'bdr' in r and 'primary' in r and 'readonly' not in r:
                primaries.append(i.get('node'))
        return primaries

    def pairwise_nodes(self):
        shards = self._bdr_primaries()
        return list(itertools.combinations(shards, 2))

    # The replication set for a given pair of instances is named shardset_a_b
    # where a and b are the BDR node ids of the instances. These ids are not
    # known at configure time, so we expect postgres/bdr to fill them in via
    # .format() during deployment.

    def replication_set_name(self, pair):
        return 'shardset_{bdr_node_ids[%s]}_{bdr_node_ids[%s]}' % pair

    def update_cluster_vars(self, cluster_vars):
        super(Autoscale, self).update_cluster_vars(cluster_vars)

        replication_sets = [
            self.replication_set_name(p)
            for p in self.pairwise_nodes()
        ]

        cluster_vars.update({
            'postgres_conf_settings': {
                'log_min_messages': 'debug1',
            },
            'log_line_prefix': '%m [pid: %p] [xid:%x]',
            'publications': [{
                'type': 'bdr',
                'database': self.args['bdr_database'],
                'replication_sets': [{'name': s} for s in replication_sets],
            }]
        })

    def update_instances(self, instances):
        super(Autoscale, self).update_instances(instances)
        pairs = self.pairwise_nodes()
        for instance in instances:
            n = instance.get('node')
            replication_sets = []
            for p in pairs:
                if n in p:
                    replication_sets.append(self.replication_set_name(p))
            vars = instance.get('vars', {})
            vars['subscriptions'] = [{
                'type': 'bdr',
                'database': self.args['bdr_database'],
                'replication_sets': replication_sets,
            }]
            instance['vars'] = vars

if __name__ == '__main__':
    Autoscale().configure()
