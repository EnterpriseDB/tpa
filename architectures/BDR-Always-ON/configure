#!/bin/bash

source $(dirname $0)/../lib/configure-common.sh

while [[ $# -gt 0 ]]; do
    opt=$1
    shift

    case "$opt" in
        *)
            source $libdir/configure-options.sh
            ;;
    esac
done

source $libdir/configure-defaults.sh

if [[ "$platform" != "aws" ]]; then
    error "currently unsupported platform: $platform (use '--platform aws')"
fi

subnet=${subnet:-$($libdir/subnets 1)}

image=$($libdir/image $distribution $platform $architecture)
eval $image

mkdir $cluster
cluster_name=$(basename $cluster)

trap "rm -rf $cluster" ERR

instances=8
hostnames=($($libdir/hostnames $((instances+1))))

cat > $cluster/config.yml <<CONFIG
---
architecture: $architecture

cluster_name: $cluster_name

ec2_ami:
  Name: $image_name
  Owner: $image_owner

ec2_vpc:
  Name: Test

cluster_rules:
  - {proto: tcp, from_port: 0, to_port: 65535, cidr_ip: 0.0.0.0/0}

cluster_vars: $($libdir/cluster-vars)
  cluster_network: $subnet
  tpa_2q_repo: internal-snapshot

instance_defaults:
    type: $instance_type
    region: $region
    subnet: $subnet
    role:
      - primary
    vars:
      ansible_user: $image_user

instances:
  - node: 1
    Name: ${hostnames[1]}
    volumes:
      - device_name: root
        volume_type: gp2
        volume_size: 32
      - device_name: /dev/xvdb
        volume_type: gp2
        volume_size: 64
        vars:
          volume_for: postgres_data
    role:
      - primary
      - bdr
    vars:
      bdr_node_group: $cluster_name

  - node: 2
    Name: ${hostnames[2]}
    volumes:
      - device_name: root
        volume_type: gp2
        volume_size: 32
      - device_name: /dev/xvdb
        volume_type: gp2
        volume_size: 64
        vars:
          volume_for: postgres_data
    role:
      - primary
      - bdr
    vars:
      bdr_node_group: $cluster_name

  - node: 3
    Name: ${hostnames[3]}
    volumes:
      - device_name: root
        volume_type: gp2
        volume_size: 32
      - device_name: /dev/xvdb
        volume_type: gp2
        volume_size: 64
        vars:
          volume_for: postgres_data
    role:
      - primary
      - bdr
    vars:
      bdr_node_group: $cluster_name

  - node: 4
    Name: ${hostnames[4]}
    volumes:
      - device_name: root
        volume_type: gp2
        volume_size: 32
      - device_name: /dev/xvdb
        volume_type: gp2
        volume_size: 64
        vars:
          volume_for: postgres_data
    role:
      - primary
      - bdr
    vars:
      bdr_node_group: $cluster_name

  - node: 5
    Name: ${hostnames[5]}
    upstream: ${hostnames[1]}
    backup: ${hostnames[6]}
    volumes:
      - device_name: root
        volume_type: gp2
        volume_size: 32
      - device_name: /dev/xvdb
        volume_type: gp2
        volume_size: 64
        vars:
          volume_for: postgres_data
    role:
      - replica
      - bdr

  - node: 6
    Name: ${hostnames[6]}
    volumes:
      - device_name: root
        volume_type: gp2
        volume_size: 32
      - device_name: /dev/xvdb
        volume_type: gp2
        volume_size: 128
        vars:
          volume_for: barman_data
    role:
      - barman

  - node: 7
    Name: ${hostnames[7]}
    volumes:
      - device_name: root
        volume_type: gp2
        volume_size: 32
    role:
      - pgbouncer
      - haproxy

  - node: 8
    Name: ${hostnames[8]}
    volumes:
      - device_name: root
        volume_type: gp2
        volume_size: 32
    role:
      - pgbouncer
      - haproxy
CONFIG

ln -sf $archdir/deploy.yml $cluster
