---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

- import_playbook: "{{ tpa_dir }}/architectures/lib/init.yml"
  vars:
    upgrade_in_progress: true
  tags: always

- name: Determine upgrade type for cluster {{ cluster_dir }}
  any_errors_fatal: true
  max_fail_percentage: 0
  become_user: root
  become: yes
  environment: "{{ target_environment }}"
  hosts: role_bdr
  tasks:
  - assert:
      that:
        - cluster_facts is defined
      fail_msg: >
        Couldn't perform cluster discovery. Are all nodes running?

  - set_fact:
      bdrdb_major_version:
        "{{ cluster_facts.databases[bdr_database].bdr.bdr_major_version }}"
  
  - set_fact:
      bdrdb_version:
        "{{ cluster_facts.databases[bdr_database].bdr.bdr_version}}"

  - name: Ensure that bdr_version in config.yml is 6 or greater and the database has v6
    assert:
      that:
        - bdr_version is version('6', '==')
        - bdrdb_major_version is version('6', '==')
        - "'Essential' in bdrdb_version"
      fail_msg: >-
        This upgrade process supports minor upgrades for PGD version 6 for 
        PGD-S (Essential) clusters

  - name: Collect list of all unique PGD versions from all nodes
    set_fact:
      all_bdr_versions: "{{ _versions.values()|list }}"
      all_bdr_major_versions:
        "{{ _versions.values()
            |map('regex_replace', '\\..*', '')
            |map('regex_replace', 'PGD\\s', '')
            |map('regex_replace', 'BDR\\s', '')
            |unique|list }}"
    vars:
      _versions:
        "{{ groups['role_bdr']|bdr_node_versions(hostvars) }}"
  
  - name: "Record whether all nodes are currently running BDR version {{ bdr_version }}"
    set_fact:
      bdr6_minor_version_upgrade:
        "{{ all_bdr_major_versions == [bdr_version] }}"

  - name: Ensure this is a minor-version upgrade
    assert:
      that: bdr6_minor_version_upgrade is true
      fail_msg: >
        PGD-S architecture only supports minor-version upgrades of Postgres and PGD v6 software.

- name: Generate dynamic groups for upgrade
  any_errors_fatal: true
  max_fail_percentage: 0
  become_user: root
  become: yes
  environment: "{{ target_environment }}"
  hosts: all
  tasks:

  - name: Create dynamic group update_hosts
    add_host:
      group: g_update_hosts
      hostname: "{{ member }}"
      inventory_dir: "{{ hostvars[member].inventory_dir }}"
    with_items: "{{ (update_hosts|split(',')) if update_hosts is defined else groups['all'] }}"
    loop_control:
      loop_var: member
    changed_when: false

# Include correct upgrade playbook for the scenario
# For now this is always minor version upgrade (Postgres and PGD version)

- import_playbook: "{{ tpa_dir }}/architectures/PGD-S/upgrade_minor.yml"
  when: >
    bdr6_minor_version_upgrade