---

# Â© Copyright EnterpriseDB UK Limited 2015-2023 - All rights reserved.

- import_playbook: "{{ tpa_dir }}/architectures/lib/init.yml"
  tags: always

- name: Collect update facts for cluster {{ cluster_dir }}
  any_errors_fatal: true
  max_fail_percentage: 0
  become_user: root
  become: yes
  environment: "{{ target_environment }}"
  hosts: "{{ update_hosts|default('all') }}"
  tasks:
  - include_role: name=postgres/facts
    vars:
      pgdata_initialised: true
    when: >
      'postgres' in role and cluster_facts is not defined

- name: Update postgres on instances in M1 cluster {{ cluster_dir }}
  any_errors_fatal: true
  max_fail_percentage: 0
  become_user: root
  become: yes
  hosts: "{{ update_hosts|default('all') }}"
  serial: "{{ update_hosts|ternary('1',omit) }}"
  tasks:
  - name: Stop repmgr
    block:
    - assert:
        that:
          failover_manager != 'patroni'
        fail_msg:
          Upgrade postgres does not support patroni managed clusters

    - service:
        name: repmgr
        state: stopped
      when: >
        'postgres' in role

  - name: Check to perform major upgrade for Postgres
    set_fact:
      postgres_major_version_upgrade: "{{ cluster_facts.postgres_version is version(postgres_version, 'lt') }}"
    when: >
      'postgres' in role

  - name: Update postgres on replicas in cluster {{ cluster_dir }}
    include_role: name=postgres/update
    when: >
      'replica' in role

  - name: Unregister replicas if major upgrading
    command: >
      {{ _postgres_bin_dir }}/repmgr standby unregister --verbose -f {{ _repmgr_conf_file }}
    become_user: "{{ postgres_user }}"
    become: yes
    delegate_to: "{{ item }}"
    with_items: "{{ groups['role_replica'] }}"
    vars:
      _postgres_bin_dir: "{{ cluster_facts.postgres_bin_dir }}"
      _repmgr_conf_file: "{{ cluster_facts.repmgr.nodes
                             |selectattr('node_name','eq', item)
                             |list
                             |map(attribute='config_file')
                             |first }}"
    when: >
      'primary' in role and postgres_major_version_upgrade and false
    
  - name: Update postgres on primary in cluster {{ cluster_dir }}
    block:
    - name: Switchover to a replica
      command: >
        {{ postgres_bin_dir }}/repmgr standby switchover --verbose -f {{ repmgr_conf_file }} --siblings-follow
      become_user: "{{ postgres_user }}"
      become: yes
      when: >
        not postgres_major_version_upgrade and inventory_hostname == groups['replica'][0]

    # Note: this role was calculated earlier, so it's outdated after the
    # switchover, but it correctly identifies the instance to use.

    - include_role: name=postgres/update
      when: >
        'primary' in role

    - name: Stop standbys for rsync in-place upgrade
      service:
        name: postgres
        state: stopped
      delegate_to: "{{ item }}"
      with_items: "{{ groups['role_replica'] }}"
      when: >
        'primary' in role and postgres_major_version_upgrade

    - name: Sync standbys after primary major upgrade
      command: >
        /usr/bin/rsync --archive --delete --hard-links --size-only --no-inc-recursive --progress \
        {{ _postgres_data_dir }} {{ postgres_data_dir }} {{ remote_dir }}
      vars:
        _postgres_data_dir: "{{ cluster_facts.postgres_data_dir }}"
        remote_dir: "{{ item + ':' + postgres_data_dir|dirname }}"
      become_user: "{{ postgres_user }}"
      become: true
      with_items: "{{ groups['role_replica'] }}"
      register: this
      failed_when:
        this.rc != 0 or 'error' in this.stderr
      when: >
        'primary' in role and postgres_major_version_upgrade

    - debug:
        msg: "{{ this }}"
      when: >
        this is not skipped

    - name: Start new instance
      shell: |
        {{ postgres_bin_dir }}/pg_ctl start -D {{ postgres_data_dir }}
      become: yes
      become_user: "{{ postgres_user }}"
      when: >
        'primary' in role and postgres_major_version_upgrade and false

    - include_role: name={{ r }}
      vars:
        postgres_running: false
      with_items:
        - postgres/final
        - repmgr/final
      loop_control:
        loop_var: r
      when: >
        'primary' in role and postgres_major_version_upgrade

    - name: Remove old Postgres data directories on standbys after primary major upgrade
      file:
        path: "{{ _postgres_data_dir }}"
        state: absent
      become_user: "{{ postgres_user }}"
      become: yes
      delegate_to: "{{ item }}"
      with_items: "{{ groups['role_replica'] }}"
      vars:
        _postgres_data_dir: "{{ cluster_facts.postgres_data_dir }}"
      when: >
        'primary' in role and postgres_major_version_upgrade

    - service:
        name: postgres
        state: started
      delegate_to: "{{ item }}"
      with_items: "{{ groups['role_replica'] }}"
      when: >
        'primary' in role and postgres_major_version_upgrade

    - name: Switch back to the old primary
      command: >
        {{ postgres_bin_dir }}/repmgr standby switchover --verbose -f {{ repmgr_conf_file }} --siblings-follow
      become_user: "{{ postgres_user }}"
      become: yes
      when: >
        'primary' in role and not postgres_major_version_upgrade

  - name: Start repmgr again
    block:
    - name: Restart repmgr
      service:
        name: repmgr
        state: started
      when: >
        'postgres' in role
