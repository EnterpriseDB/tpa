---

# Â© Copyright EnterpriseDB UK Limited 2015-2023 - All rights reserved.

- import_playbook: "{{ tpa_dir }}/architectures/lib/init.yml"
  tags: always

- name: Collect update facts for cluster {{ cluster_dir }}
  any_errors_fatal: true
  max_fail_percentage: 0
  become_user: root
  become: yes
  environment: "{{ target_environment }}"
  hosts: "{{ update_hosts|default('all') }}"
  tasks:
  - include_role: name=postgres/facts
    vars:
      pgdata_initialised: true
    when: >
      'postgres' in role and cluster_facts is not defined

- name: Update postgres on instances in M1 cluster {{ cluster_dir }}
  any_errors_fatal: true
  max_fail_percentage: 0
  become_user: root
  become: yes
  hosts: "{{ update_hosts|default('all') }}"
  serial: 1
  tasks:
  - name: Configure local-repo, if available
    include_role:
      name: sys/local_repo

  - name: Set up repositories
    include_role:
      name: sys/repositories

  - name: Stop repmgr
    block:
    - assert:
        that:
          failover_manager != 'patroni'
        fail_msg:
          Upgrade postgres does not support patroni managed clusters

    - service:
        name: repmgr
        state: stopped
      when: >
        'postgres' in role

  - set_fact:
      curr_postgres_version: "{{ cluster_facts.get('postgres_version') }}"
      curr_postgres_data_dir: "{{ cluster_facts.get('postgres_data_dir') }}"
      next_postgres_version: "{{ postgres_version }}"
      next_postgres_data_dir: "{{ postgres_data_dir }}"

  - name: Check to perform major upgrade for Postgres
    set_fact:
      postgres_major_version_upgrade: "{{ curr_postgres_version is version(next_postgres_version, 'lt') }}"
    when: >
      'postgres' in role

  - name: Update postgres on replicas in cluster {{ cluster_dir }}
    include_role: name=postgres/update
    when: >
      'replica' in role

  - name: Update postgres on primary in cluster {{ cluster_dir }}
    block:
    - name: Switchover to a replica
      command: >
        {{ postgres_bin_dir }}/repmgr standby switchover --verbose -f {{ repmgr_conf_file }} --siblings-follow
      become_user: "{{ postgres_user }}"
      become: yes
      when:
      - not postgres_major_version_upgrade
      - groups['replica'] is not empty
      - inventory_hostname == groups['replica'][0]

    # Note: this role was calculated earlier, so it's outdated after the
    # switchover, but it correctly identifies the instance to use.

    - include_role: name=postgres/update
      when: >
        'primary' in role

    - block:
      - name: Rename old Postgres data directories on standbys
        command: |
          mv {{ curr_postgres_data_dir }} {{ curr_postgres_data_dir }}_old
        become_user: "{{ postgres_user }}"
        become: yes
        delegate_to: "{{ item }}"
        with_items: "{{ groups['role_replica'] }}"
        when: false
 
      - service:
          name: postgres
          state: restarted
        delegate_to: "{{ item }}"
        with_items: "{{ groups['role_replica'] }}"
      when: >
        'primary' in role and postgres_major_version_upgrade

    - name: Switch back to the old primary
      command: >
        {{ postgres_bin_dir }}/repmgr standby switchover --verbose -f {{ repmgr_conf_file }} --siblings-follow
      become_user: "{{ postgres_user }}"
      become: yes
      when: >
        'primary' in role and not postgres_major_version_upgrade

  - name: Start repmgr again
    block:
    - name: Restart repmgr
      service:
        name: repmgr
        state: started
      when: >
        'postgres' in role
