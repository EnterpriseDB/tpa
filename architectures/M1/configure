#!/bin/bash

source $(dirname $0)/../lib/configure-common.sh

while [[ $# -gt 0 ]]; do
    opt=$1
    shift

    case "$opt" in
        *)
            source $libdir/configure-options.sh
            ;;
    esac
done

source $libdir/configure-defaults.sh

if [[ "$platform" != "aws" ]]; then
    error "currently unsupported platform: $platform (use '--platform aws')"
fi

subnet=${subnet:-$($libdir/subnets 1)}

mkdir $cluster
cluster_name=$(basename $cluster)

trap "rm -rf $cluster" ERR

instances=4
hostnames=($($libdir/hostnames $instances))

cat > $cluster/config.yml <<CONFIG
---
architecture: $architecture

cluster_name: $cluster_name
cluster_tags: $($libdir/cluster-tags)

ec2_ami:
  Name: $image_name
  Owner: $image_owner

ec2_vpc:
  Name: Test

cluster_vars: $($libdir/cluster-vars)
  vpn_network: 192.168.33.0/24

instance_defaults:
  type: $instance_type
  region: $region
  subnet: $subnet
  default_volumes:
    - device_name: root
      volume_type: gp2
      volume_size: $root_volume_size
    - device_name: /dev/xvdb
      volume_type: gp2
      volume_size: $postgres_volume_size
      vars:
        volume_for: postgres_data
  vars:
    ansible_user: $image_user

instances:
  - node: 1
    Name: ${hostnames[0]}
    role: primary

  - node: 2
    Name: ${hostnames[1]}
    role: replica
    upstream: ${hostnames[0]}
    backup: ${hostnames[3]}

  - node: 3
    Name: ${hostnames[2]}
    volumes:
    role: replica
    upstream: ${hostnames[1]}

  - node: 4
    Name: ${hostnames[3]}
    volumes:
        - device_name: /dev/xvdb
          volume_type: gp2
          volume_size: $barman_volume_size
          vars:
            volume_for: barman_data
    role:
      - barman
      - log-server
      - openvpn-server
      - monitoring-server
CONFIG

ln -sf $archdir/deploy.yml $cluster
