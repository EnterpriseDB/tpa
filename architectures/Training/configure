#!/bin/bash

source $(dirname $0)/../lib/configure-common.sh

while [[ $# -gt 0 ]]; do
    opt=$1
    shift

    case "$opt" in
        --redmine*|--ticket|--issue)
            issue=${1:?Redmine issue id not specified}
            shift
            ;;
        --instances)
            instances=${1:?Number of instances not specified}
            shift
            ;;
        --region)
            region=${1:?Region name not specified}
            shift
            ;;
        --subnet)
            subnet=${1:?Subnet address/mask not specified}
            shift
            ;;
        *)
            source $libdir/configure-options.sh
            ;;
    esac
done

if [[ ! "${issue:-}" || ! "${instances:-}" ]]; then
    error "--redmine-id <num> and --instances <num> are both required"
fi

if [[ "$platform" != "aws" ]]; then
    error "currently unsupported platform: $platform (use '--platform aws')"
fi

region=${region:-eu-west-1}
subnet=${subnet:-10.33.115.0/24}

image=$($libdir/image $distribution $platform)
eval $image

mkdir $cluster

trap "rm -rf $cluster" ERR

cat > $cluster/config.yml <<PREAMBLE
---
architecture: Training

cluster_name: training_$issue
cluster_tags:
  Reference: https://redmine.2ndquadrant.it/issues/$issue

cluster_vars:
  cluster_network: $subnet

cluster_rules:
  - {proto: tcp, from_port: 0, to_port: 65535, cidr_ip: 0.0.0.0/0}

ec2_ami:
  Name: $image_name
  Owner: $image_owner

ec2_vpc:
  Name: Test

instance_defaults:
    type: $instance_type
    region: $region
    subnet: $subnet
    role:
      - primary
    vars:
      ansible_user: $image_user

instances:
PREAMBLE

hostnames=($($libdir/hostnames $instances))
for i in $(seq 1 $instances);
do
    cat >> $cluster/config.yml <<INSTANCE
  - node: $i
    Name: ${hostnames[$i-1]}
INSTANCE
done

cp $archdir/deploy.yml $cluster
