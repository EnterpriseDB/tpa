---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

- name: Prepare local host archive
  hosts: localhost
  tasks:

    - name: Collect facts
      setup:
        filter: ansible_date_time

    - name: Set time stamp
      set_fact:
        timestamp: "{{ ansible_date_time.iso8601_basic_short }}"

    - name: Create local log archive directory
      file:
        state: directory
        path: "{{ cluster_dir }}/logs/{{ timestamp }}"

- name: Archive log files from target instances
  hosts: all
  become: yes
  vars:
    log_timestamp: "{{ hostvars.localhost.timestamp }}"
    archive: "/tmp/{{ inventory_hostname }}-logs-{{ log_timestamp }}.tar.gz"
  tasks:

    - name: Run minimal_setup to detect OS and python version
      include_role:
        name: init
        tasks_from: distribution

    # tar's exit code is 1 if files change whilst the archive is being created,
    # logs are likely to change, so we ignore this exit code
    - name: Create archive of log files
      command:
        cmd: "tar cvzf {{ archive }} --transform 's/log/{{ inventory_hostname }}-logs/' log"
        chdir: "/var"
      register: tar_command
      failed_when: tar_command.rc > 1
    - name: Fetch archives into logs/{{ log_timestamp }}
      fetch:
        src: "{{ archive }}"
        dest: "{{ cluster_dir }}/logs/{{ log_timestamp }}/"
        flat: yes
    - name: Remove remote archives
      file:
        path: "{{ archive }}"
        state: absent
