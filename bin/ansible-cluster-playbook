#!/bin/bash
#
# Runs ansible-playbook on a playbook in the context of a cluster—i.e.,
# with the correct path to the cluster's inventory and so on. To run
# ad-hoc commands, see ansible-cluster.
#
# You must specify two things: a cluster and a script to run.
#
# Examples:
#
# ansible-cluster-playbook test/tpa/x.yml
# ansible-cluster-playbook test/tpa ~/x.yml
# ansible-cluster-playbook ~/clustername/x.yml
#
# If invoked through a symlink (foo → ansible-cluster-playbook), the
# script to be executed will default to foo.yml, so you can do:
#
# foo test/tpa
# foo ~/clustername
#
# (This is how bin/deploy works.)

IFS=
set -e -u

TOP=$(dirname $0)/..
type realpath &>/dev/null && TOP=$(realpath $TOP)
export TPA_DIR=${TPA_DIR:-$TOP}

script=""
if [ "$(basename $0)" != "ansible-cluster-playbook" ]; then
    script=$(basename $0).yml
fi

cluster=${1:?No cluster specified}
shift

arg=$cluster
if [[ ${arg:0:1} != '/' && ${arg:0:2} != './' ]]; then
    cluster=$(echo $cluster|sed 's,^clusters/,,')
    arg="$TPA_DIR/clusters/$cluster"
fi

maybescript=${1:-''}
if [ ! -f $arg -a "$maybescript" != "" -a -f "$maybescript" ]; then
    script=$1
    shift
fi

if [ -f $arg -a -d $(dirname $arg) ]; then
    cluster_dir=$(dirname $arg)
    script=$arg
elif [ -d $arg ]; then
    cluster_dir=$arg
    if [ "$script" = "" ]; then
        echo "No script specified"
        exit
    elif [ ! -f $script ]; then
        if [ -f "$cluster_dir/$script" ]; then
            script=$cluster_dir/$script
        else
            echo "Can't find script $cluster/$script"
            exit
        fi
    fi
else
    echo "Can't interpret $cluster as cluster or script path"
    exit
fi

cd $cluster_dir

$TPA_DIR/ansible/ansible-playbook $script \
    -i inventory --vault-password-file vault/vault_pass.txt \
    -e cluster=$(pwd) "$@"
