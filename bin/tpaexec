#!/bin/bash
#
# Runs provision/deprovision/deploy etc.

IFS=$' \t\n'
set -eu

# If $TPA_DIR is not already set, we use /opt/2ndQuadrant/TPA if it
# exists, or guess TPA_DIR based on $0.

TOP=/opt/2ndQuadrant/TPA
if [[ ! -d $TOP ]]; then
    TOP=$(dirname $0)/..
    type realpath &>/dev/null && TOP=$(realpath $TOP)
fi
export TPA_DIR=${TPA_DIR:-$TOP}

ansible=$TPA_DIR/ansible/ansible

## Command functions
#
# These functions handle the various tpaexec commands.

version () {
    if [[ -f $TPA_DIR/VERSION ]]; then
        VERSION=$(cat $TPA_DIR/VERSION)
    else
        VERSION=$(cd $TPA_DIR && git describe)
    fi
    echo "TPA $VERSION"
}

configure() {
    if [[ "${1:-''}" != --arch* ]]; then
        error "no architecture specified (use '--architecture xxx')"
    fi

    shift
    arch=${1:?No argument specified to --architecture}
    shift

    # Find the relevant architecture configuration script and let it do
    # whatever it wants to generate the cluster configuration into the
    # target directory. Any remaining arguments belong to that script.

    archdir=$TPA_DIR/architectures/$arch
    if [[ ! -d $archdir || ! -x $archdir/configure ]]; then
        error "unknown deployment architecture: $arch"
    fi

    $archdir/configure $cluster "$@"
}

provision() {
    $ansible-playbook $TPA_DIR/platforms/provision.yml \
        -e cluster=$(pwd) "$@"
}

deploy() {
    $ansible-playbook deploy.yml \
        -i inventory --vault-password-file vault/vault_pass.txt \
        -e cluster=$(pwd) "$@"
}

deprovision() {
    $ansible-playbook $TPA_DIR/platforms/deprovision.yml \
        -i inventory \
        -e cluster=$(pwd) "$@"
}

rehydrate() {
    instances=${1:?No instances specified}
    shift

    DESTROY=no
    if [ "${1:-'NO_PLEASE_SAVE_MY_CLUSTER'}" = "I_REALLY_WANT_TO_DESTROY_MY_ENTIRE_CLUSTER=yes" ]; then
        DESTROY=yes
        shift
    fi

    # We terminate the old instances after performing some sanity
    # checks, provision replacements for them, and deploy to the
    # newly-provisioned instances.

    $ansible-playbook $TPA_DIR/platforms/aws/terminate-for-rehydration.yml \
        -e i_really_want_to_destroy_my_entire_cluster=$DESTROY \
        -i inventory \
        -e cluster=$(pwd) \
        --limit "$instances" "$@"

    provision -e require_reattachment=yes -e reattach_hosts="$instances" "$@"
    deploy -e rehydrate=yes -e deploy_hosts="$instances" "$@"
}

help() {
    topic=${1:-""}
    case "$topic" in
        "")
            cat <<TOPICS
Available help topics:
    info
    generate-config
    provision, deploy, deprovision
    rehydrate

Run 'tpaexec help topicname' for more details.
TOPICS
            ;;

        info*)
            cat <<INFO
Available info subcommands:

    tpaexec info version
        Displays current TPA version

    tpaexec info platforms
        Displays currently-supported platforms

    tpaexec info architectures
        Displays currently-supported deployment architectures

    tpaexec info platforms/xxx
        Displays information about a particular platform

    tpaexec info architectures/xxx
        Displays information about a particular deployment architecture
INFO
            ;;

        *config*)
            cat <<CONFIG
Command: tpaexec generate-config clustername --architecture "archname"

Creates a clustername directory containing config.yml and deploy.yml
according to the selected architecture. After this step, you can run
'tpaexec provision clustername'.

It is not (yet) possible to re-configure an existing cluster.
CONFIG
            ;;

        provision)
            cat <<PROVISION
Command: tpaexec provision clustername

Provisions a cluster according to clustername/config.yml
PROVISION
            ;;

        deploy)
            cat <<DEPLOY
Command: tpaexec deploy clustername

Deploys a cluster according to clustername/deploy.yml
DEPLOY
            ;;

        deprovision)
            cat <<DEPROVISION
Command: tpaexec deprovision clustername

Completely destroys a clustername and all associated resources
DEPROVISION
            ;;

        rehydrate)
            cat <<REHYDRATE
Command: tpaexec rehydrate clustername instance1[,instance2,…]

Takes a comma-separated list of hostnames and "rehydrates" each host:

1. Ensures that all extra volumes attached to the instance are tagged
   correctly and set to not be deleted on termination of the instance.
2. Terminates the instances and waits for the operation to complete.
3. Provisions replacements for each terminated instance.
4. Redeploys software on the new instances.
REHYDRATE
            ;;

        *)
            echo "Sorry, no help available for $topic"
            echo "Please contact tpa@2ndQuadrant.com for assistance"
            exit 1
            ;;
    esac
}

error() {
    echo "ERROR: $@" >&2
    exit 1
}

## Command handling
#
# We may be invoked as "tpaexec command …", or through a symbolic link
# from command → tpaexec (for backwards compatibility).

exec=$(basename $0)
case "$exec" in
    tpaexec)
        command=${1:?No command specified}
        shift
        ;;
    provision|deprovision|deploy|rehydrate)
        command=$exec
        ;;
    *)
        error "unrecognised tpaexec command link: $exec"
        ;;
esac

# We support some command aliases as a convenience.

case "$command" in
    generate-config|config)
        command=configure
        ;;
esac

# Some commands take the path to a cluster directory as an argument, and
# we may need to chdir to it beforehand.

case "$command" in
    configure)
        cluster=${1:?No cluster specified}
        shift
        ;;

    provision|deploy|deprovision|rehydrate)
        cluster=${1:?No cluster specified}
        shift

        if [[ ! -d $cluster ]]; then
            error "cluster directory does not exist: $cluster"
        fi

        cd $cluster
        ;;
esac

# Now we can look at the command-line arguments and decide which
# function to call.

case "$command" in
    help)
        help "$*"
        ;;

    info)
        subcommand=${1:-""}
        case "$subcommand" in
            "")
                help;
                ;;
            version)
                version
                ;;
            platforms|architectures|platforms/*|architectures/*)
                doc=$TPA_DIR/$subcommand/README.md
                if [[ ! -f $doc ]]; then
                    echo "Sorry, no documentation available for $subcommand"
                    echo "Please contact tpa@2ndQuadrant.com for assistance"
                    exit 1
                fi
                cat $doc
                ;;
            *)
                error "unrecognised info subcommand: $subcommand"
                ;;
        esac
        ;;

    version|configure|provision|deploy|deprovision|rehydrate)
        $command "$@"
        ;;

    *)
        error "unrecognised tpaexec command: $command"
        ;;
esac
