#!/bin/bash
#
# Runs provision/deprovision/deploy etc.

IFS=$' \t\n'
set -eu

error() {
    echo "ERROR: $@" >&2
    exit 1
}

# If $TPA_DIR is not already set, we guess TPA_DIR based on $0 (so that
# a git checkout takes precedence over a package installation), or use
# /opt/2ndQuadrant/TPA if it exists.

TOP=/opt/2ndQuadrant/TPA
if [[ -z "${TPA_DIR:-}" ]]; then
    if [[ -h "${script:=$0}" ]]; then
        script=$(readlink $0)
    fi
    SRC=$(dirname $script)/..
    type realpath &>/dev/null && SRC=$(realpath $SRC)
    if [[ -d $SRC/roles ]]; then
        TOP=$SRC
    fi
fi

export TPA_DIR=${TPA_DIR:-$TOP}
if [[ ! -d $TPA_DIR/roles ]]; then
    error "Can't find $TPA_DIR/roles; please set TPA_DIR correctly"
fi

ansible=$TPA_DIR/ansible/ansible

## Command functions
#
# These functions handle the various tpaexec commands.

version () {
    if [[ -f $TPA_DIR/VERSION ]]; then
        VERSION=$(cat $TPA_DIR/VERSION)
    else
        VERSION=$(cd $TPA_DIR && git describe)
    fi
    echo "# TPA $VERSION"
}

configure() {
    if [[ "${1:-''}" != --arch* && "${1:-''}" != "-a" ]]; then
        error "no architecture specified (use '--architecture xxx')"
    fi

    shift
    arch=${1:?No argument specified to --architecture}
    shift

    # Find the relevant architecture configuration script and let it do
    # whatever it wants to generate the cluster configuration into the
    # target directory. Any remaining arguments belong to that script.

    archdir=$TPA_DIR/architectures/$arch
    if [[ ! -d $archdir || ! -x $archdir/configure ]]; then
        error "unknown deployment architecture: $arch"
    fi

    architecture=$arch $archdir/configure $cluster "$@"
}

provision() {
    REMAINDER=()
    while [[ $# -gt 0 ]]; do
        opt=$1
        shift

        case "$opt" in
            --owner)
                owner=${1:?Owner not specified}
                shift
                ;;
            --cache*)
                cache=1
                ;;
            --)
                break
                ;;
            *)
                REMAINDER+=($opt)
                ;;
        esac
    done

    set -- "${REMAINDER[@]:+${REMAINDER[@]}}" "$@"

    $ansible-playbook $TPA_DIR/platforms/provision.yml \
        ${cache:+-e use_cached_vars=$cache} \
        ${owner:+-e Owner=$owner} \
        -e cluster=$(pwd) "$@"
}

cmd() {
    $ansible \
        -i inventory --vault-password-file vault/vault_pass.txt \
        -e cluster=$(pwd) "$@"
}

ping() {
    cmd all -m ping "$@"
}

playbook() {
    $ansible-playbook \
        -i inventory --vault-password-file vault/vault_pass.txt \
        -e cluster=$(pwd) "$@"
}

deploy() {
    playbook deploy.yml "$@"
}

test() {
    if [[ ! -f ${test:=test.yml} ]]; then
        test=$TPA_DIR/architectures/lib/test.yml
    fi
    playbook $test "$@"
}

deprovision() {
    $ansible-playbook $TPA_DIR/platforms/deprovision.yml \
        -i inventory \
        -e cluster=$(pwd) "$@"
}

rehydrate() {
    instances=${1:?No instances specified}
    shift

    DESTROY=no
    if [ "${1:-'NO_PLEASE_SAVE_MY_CLUSTER'}" = "I_REALLY_WANT_TO_DESTROY_MY_ENTIRE_CLUSTER=yes" ]; then
        DESTROY=yes
        shift
    fi

    # We terminate the old instances after performing some sanity
    # checks, provision replacements for them, and deploy to the
    # newly-provisioned instances.

    $ansible-playbook $TPA_DIR/platforms/aws/terminate-for-rehydration.yml \
        -e i_really_want_to_destroy_my_entire_cluster=$DESTROY \
        -i inventory \
        -e cluster=$(pwd) \
        --limit "$instances" "$@"

    provision -e require_reattachment=yes -e reattach_hosts="$instances" "$@"
    deploy -e rehydrate=yes -e deploy_hosts="$instances" "$@"
}

info() {
    version
    echo TPA_DIR=$TPA_DIR
    if [[ -n "${ANSIBLE_HOME:-}" ]]; then
        echo -n ANSIBLE_HOME=$ANSIBLE_HOME
        if [[ -d $ANSIBLE_HOME && -x $ANSIBLE_HOME/bin/ansible ]]; then
            echo " (valid)"
        else
            echo " (invalid)"
        fi
    elif command -v ansible &>/dev/null; then
        echo ANSIBLE=$(command -v ansible)
    else
        error "can't find ansible via ANSIBLE_HOME or in PATH"
    fi
}

selftest() {
    info
    $ansible --version
    $ansible-playbook $TPA_DIR/architectures/lib/selftest.yml -e tpa_dir=$TPA_DIR
}

help() {
    topic=${1:-""}
    case "$topic" in
        "")
            cat <<TOPICS
Available help topics:
    info
    selftest
    configure, configure-options
    provision, deprovision
    playbook, deploy, test,
    cmd, ping
    rehydrate

Run 'tpaexec help topicname' for more details.
TOPICS
            ;;

        info*)
            cat <<INFO
Available info subcommands:

    tpaexec info
        Displays some information about this installation

    tpaexec info version
        Displays current TPAexec version

    tpaexec info platforms
        Displays currently-supported platforms

    tpaexec info architectures
        Displays currently-supported deployment architectures

    tpaexec info platforms/xxx
        Displays information about a particular platform

    tpaexec info architectures/xxx
        Displays information about a particular deployment architecture
INFO
            ;;

        selftest)
            cat <<SELFTEST
Command: tpaexec selftest

Performs a sanity test on this installation of TPAexec
SELFTEST
            ;;

        configure-options)
            cat $TPA_DIR/architectures/lib/OPTIONS.md
            ;;

        *config*)
            cat <<CONFIG
Command: tpaexec configure clustername --architecture archname …

Creates a clustername directory containing config.yml and deploy.yml
according to the selected architecture. After this step, you can run
'tpaexec provision clustername'.

For more information, see:
    tpaexec info architectures
    tpaexec info architectures/<archname>
CONFIG
            ;;

        provision)
            cat <<PROVISION
Command: tpaexec provision clustername [--owner Owner] [--cached] …

Provisions a cluster according to clustername/config.yml

You may specify ``--owner OwnerName`` to override the default cluster
owner (which is the login name of the current user: ${USER:-$(id -u -n)}).

You may specify ``--cached`` to speed up repeated provision runs in
development by relying on cached information and skipping retests of
resources like VPCs and subnets.

Any other arguments will be passed to ansible-playbook unmodified.
PROVISION
            ;;

        command|adhoc|cmd)
            cat <<COMMAND
Command: tpaexec cmd clustername all -m debug -a var=inventory_hostname

Runs an ansible command in the context of a cluster
COMMAND
            ;;

        ping)
            cat <<PING
Command: tpaexec ping clustername

Runs the ansible ping module against all hosts in a cluster
PING
            ;;

        playbook)
            cat <<PLAYBOOK
Command: tpaexec playbook clustername/playbook.yml
Command: tpaexec playbook clustername /path/to/playbook.yml

Runs a playbook in the context of a particular cluster
PLAYBOOK
            ;;

        deploy)
            cat <<DEPLOY
Command: tpaexec deploy clustername

Deploys a cluster according to clustername/deploy.yml
DEPLOY
            ;;

        test)
            cat <<TEST
Command: tpaexec test clustername

Runs tests for a cluster according to its architecture
TEST
            ;;

        deprovision)
            cat <<DEPROVISION
Command: tpaexec deprovision clustername

Completely destroys a clustername and all associated resources
DEPROVISION
            ;;

        rehydrate)
            cat <<REHYDRATE
Command: tpaexec rehydrate clustername instance1[,instance2,…]

Takes a comma-separated list of hostnames and "rehydrates" each host:

1. Ensures that all extra volumes attached to the instance are tagged
   correctly and set to not be deleted on termination of the instance.
2. Terminates the instances and waits for the operation to complete.
3. Provisions replacements for each terminated instance.
4. Redeploys software on the new instances.
REHYDRATE
            ;;

        *)
            echo "Sorry, no help available for $topic"
            echo "Please contact tpa@2ndQuadrant.com for assistance"
            exit 1
            ;;
    esac
}

## Command handling
#
# We may be invoked as "tpaexec command …", or through a symbolic link
# from command → tpaexec (for backwards compatibility).

exec=$(basename $0)
case "$exec" in
    tpaexec)
        command=${1:?No command specified}
        shift
        ;;
    provision|deprovision|deploy|rehydrate)
        command=$exec
        ;;
    *)
        error "unrecognised tpaexec command link: $exec"
        ;;
esac

# We support some command aliases as a convenience.

case "$command" in
    config)
        command=configure
        ;;
    command|adhoc|cmd)
        command=cmd
        ;;
esac

# Some commands take the path to a cluster directory as an argument, and
# we may need to chdir to it beforehand.

case "$command" in
    configure)
        cluster=${1:?No cluster specified}
        shift
        ;;

    playbook)
        arg=${1:?No cluster specified}
        shift

        # We accept either the name of a cluster directory (and assume
        # that playbook.yml is somewhere among the remaining arguments)
        # or a path to a playbook within a cluster directory.

        if [[ -d $arg ]]; then
            cluster=$arg
        elif [[ -f $arg ]]; then
            cluster=$(dirname $arg)
            file=$(basename $arg)
            set -- $file "$@"
        else
            error "argument is neither directory nor file: $arg"
        fi

        cd $cluster
        ;;

    cmd|ping|provision|deploy|deprovision|rehydrate|test)
        cluster=${1:?No cluster specified}
        shift

        if [[ ! -d $cluster ]]; then
            error "cluster directory does not exist: $cluster"
        fi

        cd $cluster
        ;;
esac

# Now we can look at the command-line arguments and decide which
# function to call.

case "$command" in
    *help)
        help "$*"
        ;;

    info)
        subcommand=${1:-""}
        case "$subcommand" in
            "")
                info;
                ;;
            version)
                version
                ;;
            platforms|architectures|platforms/*|architectures/*)
                doc=$TPA_DIR/$subcommand/README.md
                if [[ ! -f $doc ]]; then
                    echo "Sorry, no documentation available for $subcommand"
                    echo "Please contact tpa@2ndQuadrant.com for assistance"
                    exit 1
                fi
                cat $doc
                ;;
            *)
                error "unrecognised info subcommand: $subcommand"
                ;;
        esac
        ;;

    version|configure|selftest)
        $command "$@"
        ;;

    cmd|ping|provision|deploy|playbook|deprovision|rehydrate|test)
        time $command "$@"
        ;;

    *)
        error "unrecognised tpaexec command: $command"
        ;;
esac
