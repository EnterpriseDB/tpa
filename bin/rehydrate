#!/bin/bash
#
# Given a cluster and a comma-separated list of one or more instance
# names, "rehydrates" each instance as described below:
#
# 1. Ensures that all extra volumes attached to the instance are tagged
#    correctly and set to not be deleted on termination of the instance.
# 2. Terminates the instance and waits for the operation to complete.
# 3. Provisions a replacement for the instance.
# 4. Redeploys software on the new instance.
#
# Example: rehydrate test/cluster instance[,instance2,â€¦]

IFS=
set -e -u

TOP=$(dirname $0)/..
type realpath &>/dev/null && TOP=$(realpath $TOP)
export TPA_DIR=${TPA_DIR:-$TOP}

cluster=${1:?No cluster specified}
shift

instances=${1:?No instances specified}
shift

DESTROY=no
if [ "${1:-'NO_PLEASE_SAVE_MY_CLUSTER'}" = "I_REALLY_WANT_TO_DESTROY_MY_ENTIRE_CLUSTER=yes" ]; then
    DESTROY=yes
    shift
fi

V=${1:-''}
if [ "$V" != "" -a "${V:0:2}" = "-v" ]; then
    shift
fi

cluster_dir=$cluster
if [[ ${cluster_dir:0:1} != '/' && ${cluster_dir:0:2} != './' ]]; then
    cluster=$(echo $cluster|sed 's,^clusters/,,')
    cluster_dir="$TPA_DIR/clusters/$cluster"
fi

if [ ! -d $cluster_dir ]; then
    echo "Can't find directory $cluster_dir"
    exit
fi

cd $cluster_dir

# Terminate the old instances after performing sanity checks.

$TPA_DIR/ansible/ansible-playbook $V \
    $TPA_DIR/platforms/aws/terminate-for-rehydration.yml \
    -e i_really_want_to_destroy_my_entire_cluster=$DESTROY \
    -i inventory \
    -e cluster=$(pwd) \
    --limit "$instances"

# Provision a replacement for the terminated instances.

$TPA_DIR/bin/provision $(pwd) \
    -e require_reattachment=yes \
    -e reattach_hosts="$instances" $V

# Redeploy to the new instances.
#
# If this fails for any reason, it's safe to rerun the command below by
# hand. Other than defining deploy_hosts, it's a normal deploy command.

$TPA_DIR/bin/deploy $(pwd) -e rehydrate=yes -e deploy_hosts="$instances" "$@" $V
