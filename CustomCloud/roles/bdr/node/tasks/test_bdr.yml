---

- block:
  - name: Create a table on first node
    shell: "{{pgbindir}}/psql '{{bdr_node_dsn}}' -Atw -c 'DROP TABLE IF EXISTS bdr_test; CREATE TABLE bdr_test (c1 INT, PRIMARY KEY (c1)); INSERT INTO bdr_test VALUES (1);'"

  - name: Wait for replication to catch up
    shell: |
      {{pgbindir}}/psql '{{bdr_node_dsn}}' -Atw -c <<EOF
      DO $do$
      DECLARE
        c_pos CONSTANT pg_lsn := pg_current_xlog_location();
      BEGIN
        WHILE EXISTS(SELECT true FROM pg_stat_get_wal_senders() s WHERE s.flush_location < pg_lsn AND application_name like $$bdr%$$ LOOP
          PERFORM pg_sleep(0.1);
        END LOOP;
      END;
      $do$;
      EOF

  - name: Check the table on the other nodes
    shell: "{{pgbindir}}/psql '{{hostvars[item].bdr_node_dsn}}' -Atw -c 'SELECT * FROM bdr_test;'"
    with_items: "{{ bdr_other_hosts }}"
    register: bdr_rep

  - name: Assert an error if test fails
    fail:
      message: "BDR replication fails, please check the bdr nodes."
    when: "{{ item.stdout != '1' }}"
    with_items: "{{ bdr_rep.results }}"

  - name: Drop the test table
    shell: "{{pgbindir}}/psql '{{bdr_node_dsn}}' -Atw -c 'DROP TABLE bdr_test;'"
  when: (bdr_control_host == inventory_hostname)
  become_user: postgres
  become: yes
