---

# This role can be safely applied to every instance.

# First, we generate an ssh keypair for postgres (this has probably
# already been done), and likewise for barman.

- include_role: name=sys/ssh/keygen
  vars:
    ssh_user: postgres

- include_role: name=sys/ssh/keygen
  vars:
    ssh_user: barman

# On any instance tagged as a Barman server (i.e., where tags.role
# includes 'barman'), it will install and configure Barman.

- include: server.yml
  when: >
    'barman' in role

# On any instance that must be backed up (i.e., with tags.backup set to
# the name of a Barman server), it will perform the necessary
# client-side configuration.

- include: client.yml
  when: backup != ''

# Allow barman to ssh to postgres on any Postgres server.
#
# We could have done this in client.yml for only those servers that are
# specifically designated as needing to be backed up, but we don't want
# to prevent barman from ssh'ing to the corresponding replicas. (In any
# case, barman could ssh to postgres on the primary and thence to the
# replica, so there's no point trying to be restrictive.)

- include_role: name=sys/ssh/authorize
  vars:
    ssh_user: postgres
    ssh_key_name: id_barman
  when: >
    'postgres' in role

# On any other kind of instance, we do nothing.
#
# We could instead split this up into barman/server and barman/client
# roles and apply them only to the right instances. That is the "right
# thing" to do, and how it should have been in the first place, but for
# simplicity—and because client-side configuration is minimal—we leave
# it this way so that deploy.yml can just drop the barman role in place
# and nothing else is needed.
#
# If we find ourselves adding more complex logic within this role in
# future, however, it would indicate the need to split up the role
# (which can be begun by changing include→include_role above).
