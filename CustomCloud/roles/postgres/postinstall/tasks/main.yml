---

# Once we've performed all the basic installation and configuration
# tasks, we perform any followup actions that require Postgres to be
# running.

# Create superusers

- include: create-superuser.yml
  vars:
    name: "{{ item }}"
  with_items: "{{ _superusers }}"

# We restart Postgres unconditionally for now. In the near future we
# should use a notifier mechanism so that we restart only when the
# Postgres configuration has changed.

- name: Restart Postgres unconditionally
  service: name={{ postgres_service_name }} state=restarted

- name: Install default Postgres extensions
  postgresql_ext:
    state: present
    db: "{{ item.0 }}"
    name: "{{ item.1 }}"
  with_nested:
    - [postgres, template1]
    - "{{ postgres_extensions|default(default_postgres_extensions) }}"
  become_user: postgres
  become: true

# There's more to this than just creating the extensions. We need to
# change shared_preload_libraries and set up the pg_stat_statements
# configuration, for example.

# Re-activate the per-client Barman backups on the server and force a
# backup. TODO: This should use _backup_name, not inventory_hostname,
# but we can't do that sensibly without include_role.

- block:
    - name: Set backups to active
      ini_file:
        dest: "/etc/barman.d/{{ inventory_hostname }}.conf"
        section: "{{ inventory_hostname }}"
        option: active
        value: "true"
      delegate_to: "{{ backup }}"

    - name: Create replication slot for Barman
      command: >
        /usr/bin/barman receive-wal --create-slot {{ inventory_hostname }}
      delegate_to: "{{ backup }}"
      ignore_errors: yes
      register: slot
      become_user: barman
      become: yes

    - fail: msg={{ slot.stderr }}
      when: >
        slot|failed and not "Replication slot 'barman' already exists" in slot.stderr

    # Run barman cron manually (i.e., as opposed to letting it run via
    # cron) so that we can be sure that pg_receivexlog is running when
    # we switch-xlog below.

    - name: Run barman cron
      command: >
        /usr/bin/barman cron
      delegate_to: "{{ backup }}"
      become_user: barman
      become: yes

    - name: Run barman switch-xlog
      command: >
        /usr/bin/barman switch-xlog {{ inventory_hostname }}
      delegate_to: "{{ backup }}"
      become_user: barman
      become: yes

    # XXX: This is a gross hack. Running "barman switch-xlog" and
    # waiting for a while will clear up the "WAL archive: FAILED"
    # problem in barman check, and backup attempts will succeed
    # thereafter, but waiting for a random time is not a viable
    # long-term solution.

    - name: Pause to let a WAL segment be archived
      pause: seconds=30

    - name: Force an immediate backup
      shell: >
        /usr/bin/barman backup "{{ inventory_hostname }}"
      delegate_to: "{{ backup }}"
      become_user: barman
      become: yes
  when: >
    backup != '' and initialise_backup
