---

# Once we've performed all the basic installation and configuration
# tasks, we perform any followup actions that require Postgres to be
# running.

# We restart Postgres unconditionally for now. In the near future we
# should use a notifier mechanism so that we restart only when the
# Postgres configuration has changed.

- name: Restart Postgres unconditionally
  service: name={{ postgres_service_name }} state=restarted

- include_vars: "{{ playbook_dir }}/vault/barman_password.yml"

- name: Create the barman user
  postgresql_user:
    name: barman
    password: "{{ barman_password }}"
    role_attr_flags: superuser
  become_user: postgres
  become: yes

- include_vars: "{{ playbook_dir }}/vault/streaming_barman_password.yml"

- name: Create the streaming_barman user
  postgresql_user:
    name: streaming_barman
    password: "{{ streaming_barman_password }}"
    role_attr_flags: superuser
  become_user: postgres
  become: yes

- name: Install default Postgres extensions
  postgresql_ext:
    state: present
    db: "{{ item.0 }}"
    name: "{{ item.1 }}"
  with_nested:
    - [postgres, template1]
    - "{{ postgres_extensions|default(default_postgres_extensions) }}"
  become_user: postgres
  become: true

# There's more to this than just creating the extensions. We need to
# change shared_preload_libraries and set up the pg_stat_statements
# configuration, for example.

# Re-activate the per-client Barman backups on the server and force a
# backup. TODO: This should use _backup_name, not inventory_hostname,
# but we can't do that sensibly without include_role.

- name: Set backups to active
  ini_file:
    dest: "/etc/barman.d/{{ inventory_hostname }}.conf"
    section: "{{ inventory_hostname }}"
    option: active
    value: "true"
  delegate_to: "{{ backup }}"
  register: activate
  when: backup != ''

- name: Create replication slot for Barman
  command: >
    /usr/bin/barman receive-wal --create-slot {{ inventory_hostname }}
  delegate_to: "{{ backup }}"
  when: >
    'primary' in role and activate|changed
  become_user: barman
  become: yes

# Force an immediate backup for all primary servers.
 
- name: Force an immediate backup
  command: >
    /usr/bin/barman backup all
  delegate_to: "{{ backup }}"
  run_once: true
  when: >
    'primary' in role
  become_user: barman
  become: yes
