---

# Determine the upstream primary for this host, that is, the primary at
# the root of the cascading replication setup.

- name: Record name of the upstream primary
  set_fact:
    upstream_primary: "{{ inventory_hostname|upstream_root(hostvars) }}"

# Find any backed-up instance that is, or is a replica of, said primary.
# This isn't clever about trying to find a backup in the same region or
# anything like that. It'll be happy with any backup it finds.

- name: Record name of any upstream or sibling with backups
  set_fact:
    upstream_backedup: "{{
      groups[cluster_tag]|instance_with_backup_of(upstream_primary, hostvars)
    }}"

- name: Ensure repmgr directories exist
  file:
    path: "{{ item }}"
    owner: postgres
    group: postgres
    mode: 0755
    state: directory
  with_items:
    - "{{ repmgr_conf_dir }}"
    - /var/run/repmgr

- name: Install repmgr.conf and additional scripts
  template:
    src: "{{ item.path }}.j2"
    dest: "{{ repmgr_conf_dir }}/{{ item.path }}"
    owner: postgres
    group: postgres
    mode: "{{ item.mode }}"
  with_items:
    - {mode: "0644", path: repmgr.conf}
    - {mode: "0755", path: promote_command.sh}
    - {mode: "0755", path: follow_command.sh}
    # - {mode: "0755", path: assign_eip.py}
  notify:
    - Note repmgrd restart required

- name: Install repmgr unit file
  template:
    src: repmgr.service.j2
    dest: /etc/systemd/system/repmgr{{pgversionNN}}.service
    owner: root
    group: root
    mode: 0644
  notify:
    - Note repmgrd restart required
