---

- name: Determine Python version
  command: "{{ ansible_python_interpreter }} -c 'import platform; print platform.python_version()'"
  register: version
  changed_when: False

- name: Set ansible_python_version
  set_fact:
    ansible_python_version: "{{ version.stdout }}"

# If we have neither ssl.match_hostname (included in Python ≥ 2.7.9) or
# backports.ssl_match_hostname, we need to install the latter using pip.
# It's easier to check the version, and since running "pip install foo"
# twice should have no effect the second time, that's what we do here.

- name: Install backports.ssl_match_hostname
  command: pip install backports.ssl_match_hostname
  register: backport
  changed_when: >
    backport|succeeded and 'Requirement already satisfied' not in backport.stdout
  when: ansible_python_version | version_compare('2.7.9', '<')

# In general, we prefer to install packages for Python modules, but boto
# is a special case—we want the latest version, which is typically far
# ahead of the version provided by OS packages.

- name: Install boto
  command: pip install boto
  register: boto
  changed_when: >
    boto|succeeded and 'Requirement already satisfied' not in boto.stdout

# If awscli still isn't installed, it's safest to install it using pip.
# (See the comments in platforms/aws/user-data/awscli.j2. The user-data
# script should have installed awscli already, so we shouldn't usually
# need to do anything here for cloud instances.)

- name: Ensure awscli is installed
  command: pip install awscli
  register: awscli
  changed_when: >
    awscli|succeeded and 'Requirement already satisfied' not in awscli.stdout
  when: >
    "{{ lookup('pipe', 'which aws || true') }}" == ""
