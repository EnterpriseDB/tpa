- include: ../common/validate.yml

- name: Ensure cluster_tags is correctly configured
  assert:
    msg: "Please define cluster_tags (a hash, including Owner) in {{config_file}}"
    that:
      - cluster_tags is defined
      - cluster_tags is mapping
      - cluster_tags['Owner'] is defined
      - cluster_tags['Owner'] != ''

- name: Ensure that the cluster name is set as a tag
  set_fact:
    cluster_tags: "{{ dict(Name=cluster_name)|combine(cluster_tags) }}"

# We always need to know the name of the VPC, but we don't need the cidr
# unless we may need to create the VPC. For the Test VPC (which we know
# exists in every relevant region already), the name alone is enough.

- name: Ensure ec2_vpc is configured
  assert:
    msg: "Please define ec2_vpc (a hash, including Name) in {{config_file}}"
    that:
      - ec2_vpc is defined
      - ec2_vpc is mapping
      - ec2_vpc['Name'] is defined
      - ec2_vpc['Name'] != ''

- name: Ensure instances is correctly configured
  assert:
    msg: "Please define instances (an array of hashes, one per instance) in {{config_file}}"
    that:
      - instances is defined
      - instances is sequence and instances is not string and instances is not mapping
      - instances | length > 0

# Make sure ec2_ami is defined (and specifies at least the AMI Name), or
# that every instance has an image explicitly specified by id.

- name: Ensure that every instance specifies an image, or ec2_ami is defined
  assert:
    msg: "Please set 'image' on every instance, or use ec2_ami"
    that:
      - instances|selectattr('image','defined')|list|count == instances|count or
        (ec2_ami is defined and ec2_ami is mapping and ec2_ami['Name'] is defined)

# If we define ec2_ami, we'd better also define ec2_ami_user, since
# there's no way to auto-discover the preferred username for an AMI.

- name: Ensure that ec2_ami_user is set if ec2_ami is set
  assert:
    msg: "If you specify ec2_ami, please also set ec2_ami_user"
    that:
      - ec2_ami is not defined or ec2_ami_user is defined

# Either every instance should specify its node id explicitly (in which
# case instance_count must not be set), or none should do so.

- name: Ensure that node and instance_count do not conflict
  assert:
    msg: "Please set 'node' on every instance, or use instance_count"
    that:
      - instances|selectattr('node','defined')|list|count == 0 or
        instances|selectattr('instance_count','defined')|list|count == 0
      - instances|selectattr('node','defined')|list|count == 0 or
        instances|selectattr('node','defined')|list|count == instances|count

# For every instance that has a "backup: xxx" tag, there should be
# exactly one instance with "Name: xxx" and "role: …,barman,…" tags.
#
# Likewise, for every instance that has an "upstream: xxx" tag, there
# should be exactly one instance with a "Name: xxx" tag.

- set_fact:
    barman_references: >
      {{ instances|selectattr('tags.backup', 'defined')|map(attribute='tags.backup')|unique|list }}
    upstream_references: >
      {{ instances|selectattr('tags.upstream', 'defined')|map(attribute='tags.upstream')|unique|list }}

- assert:
    msg: "Please define a single barman instance with Name={{ item }}"
    that:
      - instances|
        selectattr('tags.Name','defined')|selectattr('tags.Name','equalto',item)|
        selectattr('tags.role','defined')|selectattr('tags.role','contains','barman')|
        list|count == 1
  with_items: "{{ barman_references }}"

- assert:
    msg: "Please define a single upstream server with Name={{ item }}"
    that:
      - instances|
        selectattr('tags.Name','defined')|selectattr('tags.Name','equalto',item)|
        list|count == 1
  with_items: "{{ upstream_references }}"

- name: Derive subsidiary resource names for the cluster
  set_fact:
    cluster_tag: "{{ cluster_tag|default('tag_Cluster_' + cluster_tags['Name']) }}"
    cluster_bucket: "2ndQuadrant-tpa-{{ cluster_tags['Name']|lower|replace('_','-') }}"
    cluster_profile: "{{ cluster_tags['Name'] }}_profile"

- name: Derive list of unique regions from instances
  set_fact:
    regions: "{{ instances|map(attribute='region')|unique|list }}"
