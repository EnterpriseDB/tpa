---

# Given a region and a VPC specification, we return a vpc-id. If the VPC
# does not exist, we must create it first.
#
# The natural way to express this would be to call ec2_vpc_net with the
# given name and cidr, and also call ec2_tag if it "changed". Alas, due
# to https://github.com/ansible/ansible-modules-core/issues/3613, the
# ec2_vpc_net module always sets "changed".
#
# We also don't want to use ec2_vpc, because if the VPC exists already,
# we don't want to force any changes to its igw or routing tables or
# subnets to make them be the way we would have created them. So we
# search for the VPC first and create it if nothing matches.

- name: Initialise VPC search expression
  set_fact:
    ec2_vpc_filter: {}
    ec2_vpc_filter_tags:
      Name: "tag:Name"

# We must express {Name: x, cidr: y} as a DescribeVpcs filter list.
#
# If a need should arise, we could support other filter expressions
# either with a translation mechanism, as for Name â†’ tag:Name, or
# directly as for cidr.

- name: Add Name and cidr filters
  set_fact:
    ec2_vpc_filter: "{{
      ec2_vpc_filter|combine({
        ec2_vpc_filter_tags[item]|default(item): vpc[item]
      })
    }}"
  when: vpc[item] is defined
  with_items: ['Name', 'cidr']
  loop_control:
    loop_var: item

- name: Search for VPC {{ vpc['Name'] }} in {{ region }}
  ec2_vpc_net_facts:
    region: "{{ region }}"
    filters: "{{ ec2_vpc_filter }}"
  register: found

- name: Ensure there is at most one matching VPC
  assert:
    msg: "{{ vpc['Name'] }}{{ (vpc['cidr'] is defined)|ternary(':'+vpc['cidr'],'') }} matches >1 VPC in {{ region }}"
    that:
      - found.vpcs|length < 2

- name: Record existing VPC {{ vpc['Name'] }} in {{ region }}
  set_fact:
    ec2_region_vpcs: "{{
      ec2_region_vpcs|default({})|combine({
        region: found.vpcs[0].id
      })
    }}"
  when: found.vpcs|length == 1

# Once we're sure the VPC doesn't exist, we can create it any way we
# like. We create a VPC and internet gateway; subnets and a routing
# table will come later. (We could create them here, but we want to
# be able to create new subnets in an existing VPC.)
#
# Until this point, ec2_vpc['cidr'] was optional. Now it's mandatory.

- block:
    - name: Ensure we are given a CIDR for the VPC
      assert:
        msg: "Cannot create VPC {{ vpc['Name'] }} without cidr in ec2_vpc"
        that:
          - vpc['cidr'] is defined
    - name: Create VPC {{ vpc['Name'] }}:{{ vpc['cidr'] }} in {{ region }}
      ec2_vpc_net:
        state: present
        name: "{{ vpc['Name'] }}"
        region: "{{ region }}"
        cidr_block: "{{ vpc['cidr'] }}"
        tags: "{{
          cluster_tags|combine({
            'Name': vpc['Name'],
            'CreatingCluster': cluster_name
          })
        }}"
      register: v
    - name: Create internet gateway for VPC {{ vpc['Name'] }}
      ec2_vpc_igw:
        vpc_id: "{{ v.vpc.id }}"
        region: "{{ region }}"
        state: present
    - name: Record new VPC {{ vpc['Name'] }} in {{ region }}
      set_fact:
        ec2_region_vpcs: "{{
          ec2_region_vpcs|default({})|combine({
            region: v.vpc.id
          })
        }}"
  when: found.vpcs|length == 0
