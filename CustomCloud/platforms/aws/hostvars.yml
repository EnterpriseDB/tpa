---

- name: Translate platform-specific variables names
  action: set_fact
  args:
    "{{ item.var }}": "{{ vars[item.source] }}"
  when:
    item.source in vars and
    (item.var not in vars or ('override' in item and item.override))
  with_items:
    - var: node
      source: ec2_tag_node
    - var: name
      source: ec2_tag_Name
    - var: role
      source: ec2_tag_role
      override: true
    - var: backup
      source: ec2_tag_backup
    - var: upstream
      source: ec2_tag_upstream

# EC2 instances in a VPC always have a private IP address, so we prepare
# to use that by default. If a public IP address is assigned, we can use
# that instead.

- name: Set private IP address
  set_fact:
    private_ip: "{{ ec2_private_ip_address }}"
  when:
    private_ip is not defined

- name: Set public IP address if available
  set_fact:
    public_ip: "{{ ec2_ip_address }}"
  when:
    public_ip is not defined and ec2_ip_address is defined

- name: Set private IP address as the primary address
  set_fact:
    ip_address: "{{ private_ip }}"
    ip_addresses: ['private_ip']

- name: Add public_ip to the address list if available
  set_fact:
    ip_addresses: "{{ ip_addresses|union(['public_ip']) }}"
  when:
    public_ip is defined

# Add 'postgres' to role when any of 'primary' or 'replica' or 'witness'
# is given, just as a convenience.

- name: Add implicit postgres role if needed
  set_fact:
    role: "{{ role|union(['postgres']) }}"
  when: >
    'primary' in role or 'replica' in role or 'witness' in role

# Add 'postgres-xl' to role when any of 'coordinator' or 'datanode'
# or 'coordinator-replica' or 'datanode-replica' or 'gtm' or
# 'gtm-standby' is given

- set_fact:
    role: "{{ role|union(['postgres-xl']) }}"
  when: >
    'coordinator' in role or 'datanode' in role or 'coordinator-replica' in role or 'datanode-replica' in role or 'gtm' in role or 'gtm-standby' in role

# If any instance is tagged with 'log-server', make every other instance
# log to it. This can be overriden by setting 'log_server' for any
# instance.

- name: Set common log_server for the entire cluster
  set_fact:
    log_server: "{{ groups[ls][0] }}"
  when: >
    log_server is not defined and
    ls in groups and groups[ls]|length > 0 and
    inventory_hostname != groups[ls][0]
  vars:
    ls: 'tag_role_log-server'

# If any instance is tagged with 'openvpn-server', make every other
# instance use it as its openvpn server. This can be overriden by
# setting 'openvpn_server' for any instance.

- name: Set common openvpn_server for the entire cluster
  set_fact:
    openvpn_server: "{{ groups[os][0] }}"
  when: >
    openvpn_server is not defined and
    os in groups and groups[os]|length > 0 and
    inventory_hostname != groups[os][0]
  vars:
    os: 'tag_role_openvpn-server'

# If any instance is tagged with 'monitoring-server', make every other
# instance use it as its monitoring server. This can be overriden by
# setting 'monitoring_server' for any instance.

- name: Set common monitoring_server for the entire cluster
  set_fact:
    monitoring_server: "{{ groups[ms][0] }}"
  when: >
    monitoring_server is not defined and
    ms in groups and groups[ms]|length > 0 and
    inventory_hostname != groups[ms][0]
  vars:
    ms: 'tag_role_monitoring-server'
