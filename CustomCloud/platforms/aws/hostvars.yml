---

- name: Translate platform-specific variables names
  action: set_fact
  args:
    "{{ item.var }}": "{{ vars[item.source] }}"
  when:
    item.source in vars and
    (item.var not in vars or ('override' in item and item.override))
  with_items:
    - var: name
      source: ec2_tag_Name

# An EC2 instance in a VPC will always have a private IP address. It may
# also have a public IP address (which may or may not be an elastic IP).
# The static inventory file that we generate will have ansible_host set
# to an elastic IP, or if one does not exist, the public IP, or if that
# doesn't exist either, the private IP.
#
# Here we enumerate the available ip_addresses (so that we can generate
# an appropriate known_hosts, for example) and pick a default address to
# use within the cluster.

- name: Set ip_addresses to []
  set_fact:
    ip_addresses: []

- name: Set private IP address
  set_fact:
    private_ip: "{{ ec2_private_ip_address|default(ansible_host) }}"
  when:
    private_ip is not defined

- name: Set public IP address if available
  set_fact:
    public_ip: "{{ ec2_ip_address }}"
  when:
    public_ip is not defined and
    ec2_ip_address is defined

- name: Add private_ip to the address list
  set_fact:
    ip_addresses: "{{ ip_addresses|union(['private_ip']) }}"
  when:
    private_ip is defined

- name: Add public_ip to the address list
  set_fact:
    ip_addresses: "{{ ip_addresses|union(['public_ip']) }}"
  when:
    public_ip is defined

- name: Set primary IP address
  set_fact:
    ip_address: "{{ private_ip|default(public_ip) }}"

# If any instance is tagged with 'log-server', make every other instance
# log to it. This can be overriden by setting 'log_server' for any
# instance.

- name: Set common log_server for the entire cluster
  set_fact:
    log_server: "{{ groups[ls][0] }}"
  when: >
    log_server is not defined and
    ls in groups and groups[ls]|length > 0 and
    inventory_hostname != groups[ls][0]
  vars:
    ls: 'tag_role_log-server'

# If any instance is tagged with 'openvpn-server', make every other
# instance use it as its openvpn server. This can be overriden by
# setting 'openvpn_server' for any instance.

- name: Set common openvpn_server for the entire cluster
  set_fact:
    openvpn_server: "{{ groups[os][0] }}"
  when: >
    openvpn_server is not defined and
    os in groups and groups[os]|length > 0 and
    inventory_hostname != groups[os][0]
  vars:
    os: 'tag_role_openvpn-server'

# If any instance is tagged with 'monitoring-server', make every other
# instance use it as its monitoring server. This can be overriden by
# setting 'monitoring_server' for any instance.

- name: Set common monitoring_server for the entire cluster
  set_fact:
    monitoring_server: "{{ groups[ms][0] }}"
  when: >
    monitoring_server is not defined and
    ms in groups and groups[ms]|length > 0 and
    inventory_hostname != groups[ms][0]
  vars:
    ms: 'tag_role_monitoring-server'

- include: ../common/hostvars.yml
