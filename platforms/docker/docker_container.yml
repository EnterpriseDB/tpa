---

# Â© Copyright EnterpriseDB UK Limited 2015-2022 - All rights reserved.

# The docker_container module accepts an intimidating number of options
# (most oriented towards lightweight container usage, rather than the
# container-as-VM model we're following here).
#
# Unfortunately, it also returns a single "docker_container" fact, which
# means we can't invoke it in a loop and process the results afterwards.
# So we loop over include_tasks and add the fact after each invocation
# to a separate list as a compromise.
#
# https://docs.ansible.com/ansible/2.8/modules/docker_container_module.html

- name: Provision docker container {{ item.Name }}
  docker_container:
    name: "{{ item.Name }}"
    hostname: "{{ item.Name }}"
    image: "{{ item.image }}"
    state: started
    pull: no
    privileged: "{{ item.privileged|default('no') }}"
    capabilities: "{{ item.docker_cap_add|default(omit) }}"
    cap_drop: "{{ item.docker_cap_drop|default(omit) }}"
    stop_signal: 'RTMIN+3'
    interactive: yes
    tty: yes
    restart_policy: "{{ item.restart_policy|default('unless-stopped') }}"
    memory: "{{ item.memory|default(omit) }}"
    memory_reservation: "{{ item.memory_reservation|default(omit) }}"
    shm_size: "{{ item.shm_size|default(omit) }}"
    env_file: "{{ item.env_file|default(omit) }}"
    env: "{{ item.env|default(omit) }}"
    labels: >
      {{
        cluster_tags|combine(item.tags)|combine({
          'Cluster': cluster_name,
        })
      }}
    log_driver: "{{ item.log_driver|default(omit) }}"
    log_options: "{{ item.log_options|default(omit) }}"
    exposed_ports: "{{ item.exposed_ports|default(['22','5432','6432']) }}"
    published_ports: "{{ item.published_ports|default(omit) }}"
    devices: "{{ item.devices|default(omit) }}"
    networks: "{{ item.networks|default(omit) }}"
    volumes: "{{ volumes|flatten }}"
    sysctls: "{{ item.sysctls|default(omit) }}"
    ulimits: "{{ item.ulimits|default(omit) }}"
    networks_cli_compatible: yes
    tmpfs:
      - "/tmp"
      - "/run"
      - "/run/lock"
    security_opts: "{{ item.docker_security_opts|default(omit) }}"
  vars:
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
      - "{{ item.volumes|default([]) }}"
      - "{{ item.local_source_directories|default([]) }}"

- name: Collect information about {{ item.Name }} container
  docker_container_info:
    name: "{{ item.Name }}"
  register: container_info

- name: Make sure {{ item.Name }} exists
  assert:
    that: container_info.exists
    msg: "Docker failed to provision {{ item.Name }}. Check docker logs for more details"

# At times docker engine will succeed in creating a new container
# and starting it but it fails to assign proper network settings.
# So here we do a quick check to confirm if the requested container
# exists with proper network configs.
- name: Make sure container {{ item.Name }} received useful network settings
  assert:
    that:
      - ansible_facts.docker_container.NetworkSettings is defined
      - ( ansible_facts.docker_container.NetworkSettings.IPAddress is defined
          and ansible_facts.docker_container.NetworkSettings.IPAddress is not empty
        )
        or (
            ansible_facts.docker_container.NetworkSettings.Networks is defined
            and item.networks is defined
            and ansible_facts.docker_container.NetworkSettings.Networks[item.networks[0].name]['IPAddress'] is defined
            and ansible_facts.docker_container.NetworkSettings.Networks[item.networks[0].name]['IPAddress'] is not empty
        )
    msg: "Docker failed to create {{ item.Name }} with sensible network settings. Check docker logs for details"

- set_fact:
    docker_container_results: "{{
        docker_container_results|default([])|union([
          ansible_facts.docker_container|combine({
            'item': item|combine({
              'private_ip': n.IPAddress or n.Networks[item.networks[0].name]['IPAddress']
            })
          })
        ])
      }}"
  vars:
    n: "{{ ansible_facts.docker_container.NetworkSettings }}"
