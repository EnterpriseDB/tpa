---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

- name: Get a list of docker containers
  docker_container_info:
    name: "{{ item.Name }}"
  with_items: "{{ docker_instances }}"
  register: running_containers

- name: Deprovision docker containers
  docker_container:
    name: "{{ item.container.Name }}"
    state: absent
    force_kill: true
  async: 7200
  poll: 0
  with_items: "{{ running_containers.results }}"
  loop_control:
    label: >-
      {{ item.item.Name }}
  register: async_results
  when:
    item.container
    and item.container.Config.Labels.Cluster|default(None) == cluster_name
  tags: docker

- name: Wait for deprovisioning to complete
  async_status:
    jid: "{{ item.ansible_job_id }}"
  with_items: "{{ async_results.results }}"
  loop_control:
    # we need a default so that the templating can succeed even if there
    # were no containers, but if that happens the loop is never run, so
    # it doesn't matter what the default is
    label: "{{ item.ansible_job_id|default(false) }}"
  register: async_poll_results
  until: async_poll_results.finished
  retries: 300
  when:
    async_results.changed

- name: Remove docker ccache volume(s)
  docker_volume:
    name: "{{ item.split(':')[0] }}"
    state: absent
  with_items: "{{ ccache_volumes }}"
  vars:
    ccache_volumes: "{{
        query(
          'flattened',
          docker_instances|map(attribute='local_source_directories')
          |select('defined')|list
        )
        |select('startswith', 'ccache-')|list
        |unique
      }}"
  loop_control:
    label: >-
      {{ item.split(':')[0] }}
  tags: docker

- name: Delete docker networks
  docker_network:
    name: "{{ item.name }}"
    state: absent
  with_items: "{{ docker_networks|default([]) }}"
  tags: docker
