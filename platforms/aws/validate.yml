---

# Copyright Â© 2ndQuadrant Limited <info@2ndquadrant.com>

- name: Ensure ec2_vpc is configured
  assert:
    msg: "Please define ec2_vpc (a hash) in {{ config_file }}"
    that:
      - ec2_vpc is defined
      - ec2_vpc is mapping

- name: Derive subsidiary resource names for the cluster
  set_fact:
    cluster_bucket: "{{ cluster_bucket|default('2ndquadrant-tpa') }}"
    cluster_profile: "{{ cluster_profile|default(cluster_name+'_profile') }}"
    ec2_key_name: "{{ ec2_key_name|default('tpa_' + cluster_name|lower) }}"

- name: Ensure that every instance has a defined instance type
  assert:
    msg: "Please set 'type' on every instance"
    that:
      - aws_instances|selectattr('type','defined')|list|count == aws_instances|count

# Make sure ec2_ami is defined (and specifies at least the AMI Name), or
# that every instance has an image explicitly specified by id.

- name: Ensure that every instance specifies an image, or ec2_ami is defined
  assert:
    msg: "Please set 'image' on every instance, or use ec2_ami"
    that:
      - aws_instances|selectattr('image','defined')|list|count == aws_instances|count or
        (ec2_ami is defined and ec2_ami is mapping and ec2_ami['Name'] is defined)

- name: Ensure that every instance specifies a region and subnet
  assert:
    msg: "Please specify both region and subnet for instance {{ item.Name }}"
    that:
      - "'region' in item"
      - "'subnet' in item"
  with_items: "{{ aws_instances }}"

- name: Derive list of unique regions from instances
  set_fact:
    aws_regions: "{{ aws_instances|map(attribute='region')|unique|list }}"

# https://docs.aws.amazon.com/general/latest/gr/rande.html lists the
# valid AWS regions.

- name: Ensure region references are valid
  assert:
    msg: "Region {{ item }} is not a valid AWS region"
    that: item in aws_known_regions
  with_items: "{{ aws_regions }}"
  vars:
    aws_known_regions:
      - us-east-2
      - us-east-1
      - us-west-1
      - us-west-2
      - ap-south-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-northeast-1
      - ca-central-1
      - cn-north-1
      - eu-central-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - sa-east-1

# Older config.yml files will specify ec2_vpc_subnets but not locations,
# whereas newer ones will specify locations but not ec2_vpc_subnets. The
# code in vpc-subnets.yml depends on the latter representation, which we
# can generate from the information in aws_instances/locations.

- name: Derive ec2_vpc_subnets if required
  set_fact:
    derived_ec2_vpc_subnets: "{{
      derived_ec2_vpc_subnets|default({})|combine({
        item.0: {
          item.1: {
            'Name': location|try_subkey([0,'subnet_name'], location[0].Name),
            'az': location[0].az,
          }
        }
      }, recursive=True)
    }}"
  with_nested_dependents:
    - aws_regions
    - aws_instances|selectattr('region', 'equalto', item.0)|map(attribute='subnet')|unique|list
  vars:
    location: "{{
      locations
      |selectattr('region', 'equalto', item.0)
      |selectattr('subnet', 'equalto', item.1)
      |list
    }}"
  when:
    ec2_vpc_subnets is not defined
    and location is not empty
    and location[0].az is defined

- name: Ensure ec2_vpc_subnets is defined
  set_fact:
    ec2_vpc_subnets: "{{ ec2_vpc_subnets|default(derived_ec2_vpc_subnets|default({})) }}"
