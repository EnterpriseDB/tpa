- name: Ensure ec2_vpc is configured
  assert:
    msg: "Please define ec2_vpc (a hash) in {{config_file}}"
    that:
      - ec2_vpc is defined
      - ec2_vpc is mapping

# If we define ec2_ami, we'd better also define ec2_ami_user, since
# there's no way to auto-discover the preferred username for an AMI.

- name: Ensure that ec2_ami_user is set if ec2_ami is set
  assert:
    msg: "If you specify ec2_ami, please also set ec2_ami_user"
    that:
      - ec2_ami is not defined or ec2_ami_user is defined

- name: Derive subsidiary resource names for the cluster
  set_fact:
    cluster_tag: "{{ cluster_tag|default('tag_Cluster_' + cluster_name) }}"
    cluster_bucket: "{{ cluster_bucket|default('2ndquadrant-tpa') }}"
    cluster_profile: "{{ cluster_profile|default(cluster_name+'_profile') }}"
    ec2_key_name: "{{ ec2_key_name|default('tpa_' + cluster_name|lower) }}"

- name: Ensure that every instance has a defined instance type
  assert:
    msg: "Please set 'type' on every instance"
    that:
      - aws_instances|selectattr('type','defined')|list|count == aws_instances|count

# Make sure ec2_ami is defined (and specifies at least the AMI Name), or
# that every instance has an image explicitly specified by id.

- name: Ensure that every instance specifies an image, or ec2_ami is defined
  assert:
    msg: "Please set 'image' on every instance, or use ec2_ami"
    that:
      - aws_instances|selectattr('image','defined')|list|count == aws_instances|count or
        (ec2_ami is defined and ec2_ami is mapping and ec2_ami['Name'] is defined)

- name: Derive list of unique regions from instances
  set_fact:
    regions: "{{ aws_instances|map(attribute='region')|unique|list }}"

# If cluster_network or cluster_networks are not set in cluster_vars, we
# can set cluster_networks to a list of all subnet references.

- name: Set default cluster_networks
  set_fact:
    cluster_vars: "{{
      cluster_vars|combine({'cluster_networks': subnets})
    }}"
  when:
    - ('cluster_network' not in cluster_vars)
    - ('cluster_networks' not in cluster_vars)
  vars:
    subnets: "{{
      aws_instances|map(attribute='subnet')|unique|select('contains','/')|list
    }}"
