---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

# For each region and each instance in that region, we issue an
# async ec2 task to deprovision the instance by its id, then wait
# for all the jobs to complete.

- name: Terminate EC2 instances in each region
  amazon.aws.ec2_instance:
    state: absent
    region: "{{ item.0 }}"
    instance_ids: "{{ item.1 }}"
    wait: yes
  with_nested_dependents:
    - aws_regions
    - groups[cluster_tag]|intersect(groups[item.0])|map('extract', hostvars, 'instance_id')|unique|list
  loop_control:
    label: >-
      {{ item.0 }}:{{ item.1 }}
  register: ec2_uninstances
  async: 7200
  poll: 0
  tags: ec2

- name: Wait for instance deprovisioning to complete
  async_status: jid={{ item.ansible_job_id }}
  register: ec2_jobs
  until: ec2_jobs.finished
  retries: 300
  with_items: "{{ ec2_uninstances.results }}"
  loop_control:
    label: >-
      {{ item.ansible_job_id }}
  tags: ec2
