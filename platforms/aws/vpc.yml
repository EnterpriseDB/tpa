---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

# Given a region and a VPC specification (which may take various forms),
# we return a vpc-id. If the desired VPC does not already exist, we try
# to create it if a Name and cidr are specified.
#
# The natural way to express this would be to call ec2_vpc_net with the
# given name and cidr, and also call ec2_tag if it "changed". Alas, due
# to https://github.com/ansible/ansible-modules-core/issues/3613, the
# ec2_vpc_net module always sets "changed".
#
# We also don't want to use ec2_vpc, because if the VPC exists already,
# we don't want to force any changes to its igw or routing tables or
# subnets to make them be the way we would have created them. So we
# search for the VPC first and create it if nothing matches.

- name: Determine display name for the VPC
  set_fact:
    _vpc_name: "{{ vpc['Name']|default('<unnamed>') }}"

- name: Use vpc-id to name VPCs whenever specified
  set_fact:
    _vpc_name: "{{ vpc['filters']['vpc-id'] }}"
  when:
    vpc['filters'] is defined and
    vpc['filters']['vpc-id'] is defined

- name: Initialise VPC search expression
  set_fact:
    ec2_vpc_filters: "{{ vpc['filters']|default({}) }}"
    ec2_vpc_filter_tags:
      Name: "tag:Name"

# We must express {Name: x, cidr: y} as a DescribeVpcs filter list, if
# filters are not directly specified.

- name: Fall back to Name and cidr filters if required
  set_fact:
    ec2_vpc_filters: "{{
        ec2_vpc_filters|combine({
          ec2_vpc_filter_tags[item]|default(item): vpc[item]
        })
      }}"
  when:
    vpc[item] is defined and
    vpc['filters'] is not defined
  with_items: ['Name', 'cidr']

- name: Search for VPC {{ _vpc_name }} in {{ region }}
  amazon.aws.ec2_vpc_net_info:
    region: "{{ region }}"
    filters: "{{ ec2_vpc_filters }}"
  register: found

- name: Ensure there is at most one matching VPC
  assert:
    msg: "{{ _vpc_name }}{{ ('cidr' in vpc and ':'+vpc['cidr']) or '' }} matches >1 VPC in {{ region }}"
    that:
      - found.vpcs|length < 2

- name: Record existing VPC {{ _vpc_name }} in {{ region }}
  set_fact:
    ec2_region_vpcs: "{{
        ec2_region_vpcs|default({})|combine({
          region: found.vpcs[0].id
        })
      }}"
  when: found.vpcs|length == 1

# Once we're sure the VPC doesn't exist, we can create it any way we
# like. We create only the VPC here; internet gateway, subnets, and a
# routing table will come later (because we want to be able to create
# these resources inside an existing VPC if needed).

- block:
    - name: Ensure that Name and cidr are given for this VPC
      assert:
        msg: "Cannot create VPC without both Name and cidr in ec2_vpc"
        that:
          - vpc['Name'] is defined
          - vpc['cidr'] is defined

    - name: Ensure that vpc-id is not given for this VPC
      assert:
        msg: "Refusing to create VPC when vpc-id is specified in ec2_vpc"
        that:
          - vpc['filters']['vpc-id'] is not defined
      when:
        vpc['filters'] is defined

    - name: Create VPC {{ vpc['Name'] }}:{{ vpc['cidr'] }} in {{ region }}
      amazon.aws.ec2_vpc_net:
        state: present
        name: "{{ vpc['Name'] }}"
        region: "{{ region }}"
        cidr_block: "{{ vpc['cidr'] }}"
        tags: "{{
            cluster_tags|combine({
              'Name': vpc['Name'],
              'CreatingCluster': cluster_name
            })
          }}"
      register: v

    - name: Record new VPC {{ vpc['Name'] }} in {{ region }}
      set_fact:
        ec2_region_vpcs: "{{
            ec2_region_vpcs|default({})|combine({
              region: v.vpc.id
            })
          }}"
  when: found.vpcs is empty
