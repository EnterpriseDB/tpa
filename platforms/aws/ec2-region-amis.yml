---

# We start with ec2_ami and set up ec2_region_amis to map every region
# to the AMI id to use when provisioning instances in that region.

- name: Initialise empty mapping tables
  set_fact:
    ec2_region_amis: {}
    ec2_ami_properties: {}

- name: Search for AMI named {{ ec2_ami['Name'] }}
  ec2_ami_facts:
    region: "{{ item }}"
    owner: "{{ ec2_ami['Owner']|default(omit) }}"
    filters: >
      {{
        ec2_ami['filters']|default({})|combine({
          'name': ec2_ami['Name']
        })
      }}
  with_items: "{{ regions }}"
  register: ec2_amis

# The ec2_ami filter expression in config.yml must match exactly one AMI
# in each region. Anything else is an error.

- name: Ensure that exactly one AMI was found in each region
  assert:
    msg: >
      Expected 1 AMI matching ec2_ami in {{ item.0 }}, found {{ item.1.images|length }}
    that:
      - item.1.images|length == 1
  with_together:
    - "{{ regions }}"
    - "{{ ec2_amis.results }}"

- name: Record existing AMIs in each region
  set_fact:
    ec2_region_amis: >
      {{
        ec2_region_amis|combine({item.0: item.1.images.0.image_id})
      }}
    ec2_ami_properties: >
      {{
        ec2_ami_properties|combine({item.1.images.0.image_id: item.1.images.0})
      }}
  with_together:
    - "{{ regions }}"
    - "{{ ec2_amis.results }}"

- include_tasks: ../common/set-provisioning-var.yml
  vars:
    name: ec2_cached_ami
    value: "{{ ec2_ami['Name'] }}"

- include_tasks: ../common/set-provisioning-var.yml
  vars:
    name: ec2_ami_properties
    value: "{{ ec2_ami_properties }}"

- include_tasks: ../common/set-provisioning-var.yml
  vars:
    name: ec2_region_amis
    value: "{{ ec2_region_amis }}"
