---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

- include_tasks: deprovision-instances.yml
  when:
    - cluster_tag in groups
    - groups[cluster_tag] is not empty
    - groups[cluster_tag] | map('extract', hostvars, 'instance_id') | select('defined') | list is not empty
  tags: ec2

# Remove any keypair that matches the cluster's default 'tpa_xxx'
# name. We don't try to remove any other keypairs, because it's
# possible to configure a cluster to use existing keys.
#
# Keypairs can't be tagged with CreatingCluster, so we have to
# depend on the name to guess whether we generated the key.

- name: Remove keypairs in each region
  amazon.aws.ec2_key:
    state: absent
    region: "{{ item }}"
    name: "tpa_{{ cluster_name|lower }}"
  with_items: "{{ aws_regions }}"
  tags: ec2_keys

# Remove the cluster's instance profile role and associated policy.
#
# Roles can't be tagged with CreatingCluster, so we have to depend
# on the cluster_name to match.

- name: Get IAM roles for cluster
  community.aws.iam_role_info:
    name: '{{ cluster_profile }}'
  register: aws_iam_roles
  tags: iam

- name: Remove inline policy for instance profile
  community.aws.iam_policy:
    iam_type: role
    iam_name: '{{ cluster_profile }}'
    policy_name: '{{ cluster_name }}_instance_permissions'
    state: absent
  when: >
    aws_iam_roles.iam_roles is not empty
  tags: iam

- name: Remove instance profile for cluster
  community.aws.iam_role:
    name: '{{ cluster_profile }}'
    state: absent
    delete_instance_profile: yes
  tags: iam

# With the instances gone, we can delete any volumes that were
# created for the cluster.

- name: Enumerate EBS volumes provisioned in each region
  amazon.aws.ec2_vol_info:
    region: "{{ item }}"
    filters:
      "tag:CreatingCluster": "{{ cluster_name }}"
  with_items: "{{ aws_regions }}"
  register: volumes
  tags: volumes

- name: Remove volumes provisioned for this cluster in each region
  amazon.aws.ec2_vol:
    state: absent
    id: "{{ item.1.id }}"
    region: "{{ item.1.region }}"
  with_nested_dependents:
    - volumes.results
    - item.0.volumes
  loop_control:
    label: >-
      {{ item.1.region }}:{{ item.1.id }} ({{ item.1.tags.Name }})
  tags: volumes

# Next, remove any security groups created for this cluster.

- name: Search for this cluster's security groups in each region
  amazon.aws.ec2_group_info:
    region: "{{ region }}"
    filters:
      "tag:CreatingCluster": "{{ cluster_name }}"
  with_items: "{{ aws_regions }}"
  loop_control:
    loop_var: region
  register: ec2_groups
  tags: ec2_groups

- name: Remove this cluster's security groups in each region
  amazon.aws.ec2_group:
    state: absent
    region: "{{ item.0.region }}"
    group_id: "{{ item.1.group_id }}"
  with_nested_dependents:
    - "{{ ec2_groups.results }}"
    - item.0.security_groups
  loop_control:
    label: >-
      {{ item.0.region }}:{{ item.1.group_id }}
  tags: ec2_groups

# Remove any route tables created for this cluster.

- name: Search for this cluster's route tables in each region
  amazon.aws.ec2_vpc_route_table_info:
    region: "{{ region }}"
    filters:
      "tag:CreatingCluster": "{{ cluster_name }}"
  with_items: "{{ aws_regions }}"
  loop_control:
    loop_var: region
  register: route_tables
  tags: ec2_vpcs

- name: Remove this cluster's route tables in each region
  amazon.aws.ec2_vpc_route_table:
    state: absent
    region: "{{ item.0.region }}"
    vpc_id: "{{ item.1.vpc_id }}"
    route_table_id: "{{ item.1.id }}"
    lookup: id
  with_nested_dependents:
    - "{{ route_tables.results }}"
    - item.0.route_tables
  loop_control:
    label: >-
      {{ item.0.region }}:{{ item.1.tags.Name }}
  tags: ec2_vpcs

# Next, we delete the subnets that we created within each VPC, i.e.,
# those subnets for which the CreatingCluster is set to this one.

- name: Search for this cluster's VPC subnets in each region
  amazon.aws.ec2_vpc_subnet_info:
    region: "{{ region }}"
    filters:
      "tag:CreatingCluster": "{{ cluster_name }}"
  with_items: "{{ aws_regions }}"
  loop_control:
    loop_var: region
  register: subnets
  tags: ec2_vpcs

- name: Remove this cluster's VPC subnets in each region
  amazon.aws.ec2_vpc_subnet:
    state: absent
    region: "{{ item.0.region }}"
    vpc_id: "{{ item.1.vpc_id }}"
    cidr: "{{ item.1.cidr_block }}"
  with_nested_dependents:
    - "{{ subnets.results }}"
    - item.0.subnets
  loop_control:
    label: >-
      {{ item.0.region }}:{{ item.1.cidr_block }}
  tags: ec2_vpcs

# Next, delete any igws that we created in each VPC for the cluster.

- name: Search for this cluster's internet gateways in each region
  amazon.aws.ec2_vpc_igw_info:
    region: "{{ region }}"
    filters:
      "tag:CreatingCluster": "{{ cluster_name }}"
  with_items: "{{ aws_regions }}"
  loop_control:
    loop_var: region
  register: igws
  tags: ec2_vpcs

- name: Remove this cluster's internet gateway in each region
  amazon.aws.ec2_vpc_igw:
    state: absent
    region: "{{ item.0.region }}"
    vpc_id: "{{ item.1.attachments[0].vpc_id }}"
  with_nested_dependents:
    - "{{ igws.results }}"
    - item.0.internet_gateways
  loop_control:
    label: >-
      {{ item.0.region }}
  tags: ec2_vpcs

# Now we can finally delete any VPCs that we created for this
# cluster, i.e., whose CreatingCluster is set to this one.

- name: Search for this cluster's VPC in each region
  amazon.aws.ec2_vpc_net_info:
    region: "{{ region }}"
    filters:
      "tag:CreatingCluster": "{{ cluster_name }}"
  with_items: "{{ aws_regions }}"
  loop_control:
    loop_var: region
  register: vpcs
  tags: ec2_vpcs

# If a VPC has a security group that was created automatically by
# Firewall Manager, it will cause a dependency violation rather than
# being automatically deleted when we delete the VPC, so we identify
# and manually delete it.

- name: Search for remaining security groups in this cluster's VPCs
  amazon.aws.ec2_group_info:
    region: "{{ item.0.region }}"
    filters:
      "vpc_id": "{{ item.1.id }}"
  with_nested_dependents:
    - "{{ vpcs.results }}"
    - item.0.vpcs
  register: remaining_security_groups
  tags: ec2_groups

- name: Remove FMS managed security groups
  amazon.aws.ec2_group:
    state: absent
    region: "{{ item.0.item.0.region }}"
    group_id: "{{ item.1.group_id }}"
  when: item.1.description == 'FMS managed security group.'
  with_nested_dependents:
    - "{{ remaining_security_groups.results }}"
    - item.0.security_groups
  loop_control:
    label: >-
      {{ item.0.item.0.region }}:{{ item.1.group_id }}
  tags: ec2_groups

- name: Remove this cluster's VPC in each region
  amazon.aws.ec2_vpc_net:
    state: absent
    region: "{{ item.0.region }}"
    name: "{{ item.1.tags.Name }}"
    cidr_block: "{{ item.1.cidr_block }}"
  with_nested_dependents:
    - "{{ vpcs.results }}"
    - item.0.vpcs
  loop_control:
    label: >-
      {{ item.0.region }}:{{ item.1.cidr_block }}
  tags: ec2_vpcs

# That's it for any AWS resources we created for the cluster, all that's
# left is to clean up the cluster directory.

- name: Delete generated files for this cluster
  file:
    path: "{{ cluster_dir }}/{{ item }}"
    state: absent
    force: yes
  with_items:
    - inventory/ec2.py
    - inventory/ec2.ini
    - prehydrate-vars.yml
    - inventory/aws_ec2.yml
