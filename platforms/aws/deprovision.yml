---

# Decommission an already-provisioned AWS cluster:
#
#     ansible-playbook -i inventory/ec2.py platforms/aws/deprovision.yml \
#         --extra-vars cluster=/path/to/cluster
#
# XXX Doesn't delete elastic IPs or extra provisioned volumes.

- name: Deprovision EC2 cluster
  hosts: localhost
  tasks:
    - include: validate.yml
      tags: always

    - name: Require inventory group {{cluster_tag}} to be defined
      assert:
        msg: "No hosts found in group {{cluster_tag}}"
        that:
          - cluster_tag in groups
          - groups[cluster_tag] | length > 0
      tags: always

    # For each region, we build up a list of instance ids (by taking the
    # intersection of hosts in the cluster with all hosts in the region,
    # then extracting ec2_id from each one) and remove them.
    #
    # XXX: Note that terminating more than a few (e.g. 8) instances may
    # take a long time and then timeout, even though the instances can
    # be seen in the web UI to have been properly terminated. This may
    # be a bug; pending investigation, if this task takes more than a
    # couple of minutes, just interrupt it and rerun the playbook.

    - name: Terminate EC2 instances in each region
      ec2:
        state: absent
        region: "{{ item }}"
        instance_ids: "{{ groups[cluster_tag]|intersect(groups[item])|map('extract', hostvars, 'ec2_id')|list }}"
        wait: yes
      with_items: regions
      tags: ec2

    # Next, remove keypairs in each region by the same strategy, except
    # that ec2_key doesn't take a list directly, so we have to use the
    # custom with_nested_dependents plugin instead of with_items. Note
    # that we almost certainly have only a single cluster-wide keypair
    # in each region, but we can cope with any number of keys.

    - name: Remove keypairs in each region
      ec2_key:
        state: absent
        region: "{{ item.0 }}"
        name: "{{ item.1 }}"
        wait: yes
      with_nested_dependents:
        - regions
        - groups[cluster_tag]|intersect(groups[item.0])|map('extract', hostvars, 'ec2_key_name')|unique|list
      tags: ec2_keys

    # Before we can delete the VPCs in each region, we must delete the
    # subnets in each VPC. Strangely, we have to use the vpc_id with a
    # CIDR mask to identify a subnet, so we have to iterate over vpc_id
    # from hostvars and subnet masks from instances.
    #
    # This means we will try to remove every known subnet in a region
    # from every known VPC in the region, whether or not we ever created
    # a particular subnet in a particular VPC. But we probably have only
    # one subnet per VPC per region, so we don't waste too much effort.

    - name: Remove VPC subnets in each region
      ec2_vpc_subnet:
        state: absent
        region: "{{ item.0 }}"
        vpc_id: "{{ item.1 }}"
        cidr: "{{ item.2 }}"
      with_nested_dependents:
        - regions
        - groups[cluster_tag]|intersect(groups[item.0])|map('extract', hostvars, 'ec2_vpc_id')|unique|list
        - instances|selectattr('region', 'equalto', item.0)|map(attribute='subnet')|unique|list
      tags: ec2_vpcs

    # Next, we do the same for security groups within the region. Note
    # that 'ec2_security_group_names' is a comma-separated string, which
    # we split into a list in an extra step.

    - name: Remove security groups in each region
      ec2_group:
        state: absent
        region: "{{ item.0 }}"
        name: "{{ item.2 }}"
        description: ''
      with_nested_dependents:
        - regions
        - groups[cluster_tag]|intersect(groups[item.0])|map('extract', hostvars, 'ec2_security_group_names')|unique|list
        - item[1].split(',')
      tags: ec2_vpcs

    # Now we can finally delete each VPC in each region.

    - name: Terminate VPCs in each region
      ec2_vpc:
        state: absent
        region: "{{ item.0 }}"
        vpc_id: "{{ item.1 }}"
        resource_tags: {}
        wait: yes
      with_nested_dependents:
        - regions
        - groups[cluster_tag]|intersect(groups[item.0])|map('extract', hostvars, 'ec2_vpc_id')|unique|list
      tags: ec2_vpcs
