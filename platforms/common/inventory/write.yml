---

# Â© Copyright EnterpriseDB UK Limited 2015-2023 - All rights reserved.

- name: Ensure that the cluster's inventory directories exist
  file:
    path: "{{ cluster_dir }}/{{ item }}"
    state: directory
    mode: "0755"
  with_items:
    - inventory
    - inventory/host_vars
    - inventory/group_vars
  tags: always

- name: Write static inventory file
  template:
    src: inventory.j2
    dest: "{{ cluster_dir }}/inventory/00-{{ cluster_name }}"
    mode: "0644"

- name: Compose ansible_group_vars for cluster
  set_fact:
    ansible_group_vars:
      ansible_shell_executable: /bin/bash
      ansible_port: "{{ ansible_port }}"
      ansible_ssh_common_args: >-
        -o ServerAliveInterval=60 -o UserKnownHostsFile='known_hosts tpa_known_hosts'
        {% if not use_ssh_agent|default(False) %}-o IdentitiesOnly=yes{% endif %}
        {% if forward_ssh_agent is defined %}-o ForwardAgent=yes{% endif %}

- name: Add ssh_key_file to ansible_group_vars for cluster
  set_fact:
    ansible_group_vars: "{{ ansible_group_vars|combine({'ansible_ssh_private_key_file': ssh_key_file}) }}"
  when: not ansible_tower

- name: Compose cluster_group_vars
  set_fact:
    cluster_group_vars: "{{
        cluster_vars|combine({
          'cluster_tag': cluster_tag,
          'cluster_name': cluster_name,
          'tpa_version': tpa_version,
        }) }}"

- name: Add ssh_key_file to cluster_group_vars
  set_fact:
    cluster_group_vars: "{{
        cluster_group_vars|combine({'ssh_key_file': ssh_key_file})
      }}"
  when: not ansible_tower

- name: Create group_vars and host_vars subdirectories
  shell: >
    mkdir -p
    group_vars/hashes
    group_vars/{{ cluster_tag }}
    group_vars/{{ cluster_tag }}/secrets
    host_vars/{{ dirnames }}
  args:
    chdir: "{{ cluster_dir }}/inventory"
    executable: /bin/bash
  ignore_errors: true
  changed_when: false
  vars:
    hostlist: >
      {{ instance_vars|json_query('[*].Name')|list }}
    dirnames: >
      {{
        (hostlist|length == 1)|ternary(
          hostlist[0], '{'~ (hostlist|join(',')) ~'}'
        )
      }}

- name: Write group_vars/{{ cluster_tag }}/{{ file_name }}
  copy:
    content: |
      ansible_python_interpreter: '/usr/bin/{{ '{'+'{ ' }}python|default(preferred_python_version|default("python2.7")){{ ' }'+'}' }}'
      {{ group_vars|to_nice_yaml(indent=2) }}
    dest: "{{ group_dir }}/{{ file_name }}"
    mode: "0644"
    force: yes
  vars:
    file_name: "00-ansible.yml"
    group_dir: "{{ cluster_dir }}/inventory/group_vars/{{ cluster_tag }}"
    group_vars: "{{ ansible_group_vars }}"

- name: Write group_vars/{{ cluster_tag }}/{{ file_name }}
  copy:
    content: |
      {{ group_vars|to_nice_yaml(indent=2) }}
    dest: "{{ group_dir }}/{{ file_name }}"
    mode: "0644"
    force: yes
  vars:
    file_name: "01-{{ cluster_name }}.yml"
    group_dir: "{{ cluster_dir }}/inventory/group_vars/{{ cluster_tag }}"
    group_vars: "{{ cluster_group_vars}}"

- name: Write instance variables for hosts
  copy:
    content: |
      {{ host_vars|to_nice_yaml(indent=2) }}
    dest: "{{ host_dir }}/{{ file_name }}"
    mode: "0644"
    force: yes
  vars:
    file_name: "01-instance_vars.yml"
    host_dir: "{{ cluster_dir }}/inventory/host_vars/{{ item.Name }}"
    host_vars: "{{ item.vars }}"
  with_items: "{{ instance_vars }}"
  loop_control:
    label: >-
      {{ item.Name }}
  when: >
    item.vars is not empty

- name: Remove obsolete files from host_vars
  shell: >
    if [[ $({{ find_cmd }}| wc -l) != 0 ]]; then
    {{ find_cmd }} -exec rm {} ';'; exit 99;
    fi
  args:
    executable: /bin/bash
  vars:
    find_cmd: >-
      find "{{ cluster_dir }}"/inventory/host_vars
      '(' -name 02-topology.yml -o -name 03-volumes.yml ')'
  register: rm
  changed_when: rm.rc == 99
  failed_when: rm.rc not in [0, 99]

- name: Generate known_hosts file for the cluster
  template:
    src: known_hosts.j2
    dest: "{{ cluster_dir }}/tpa_known_hosts"
    mode: "0644"

- name: Generate ssh_config file for the cluster
  template:
    src: ssh_config.j2
    dest: "{{ cluster_dir }}/ssh_config"
    mode: "0644"

# Tower won't use our ansible wrapper script to invoke ansible inside
# its execution environment, so we generate a custom configuration file
# that sets the correct paths.

- name: Generate ansible.cfg for Tower
  template:
    src: tower_ansible.cfg.j2
    dest: "{{ cluster_dir }}/ansible.cfg"
    mode: "0644"
  when: ansible_tower

# Right now, we have no way to convey secrets generated during deploy
# back to the Ansible Tower inventory. Until we use the inventory API to
# persist such changes, we can work around the problem by pre-generating
# some secrets that we know we will need. For example, `enterprisedb_password`
# is required for EPAS installations.
#
# XXX This does not take into account any `postgres_users` settings.

- name: Generate secrets for this cluster
  include_role: name=secret
  vars:
    secret_name: "{{ item }}"
    lock_file: "{{ cluster_dir }}/vault/vault_pass.txt"
  with_items:
    - postgres_password
    - barman_password
    - streaming_barman_password
    - pgbouncer_auth_user_password
    - pgbouncer_password
    - repmgr_password
    - enterprisedb_password
  when: ansible_tower
