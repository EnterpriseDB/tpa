---

- name: Write static inventory file
  template:
    src: inventory.j2
    dest: "{{ cluster_dir }}/inventory/00-{{ cluster_name }}"

- name: Write ansible group_vars
  include_tasks: write-group-vars.yml
  vars:
    file_name: "00-ansible"
    group_name: "{{ cluster_tag }}"
    group_vars:
      ansible_user: "{{ ansible_user }}"
      ansible_port: "{{ ansible_port }}"
      ansible_python_interpreter: /usr/bin/python2.7
      ansible_ssh_private_key_file: "{{ ssh_key_file }}"
      ansible_ssh_common_args: "-o ServerAliveInterval=60 -o UserKnownHostsFile='known_hosts' -o IdentitiesOnly=yes"

- name: Write cluster group_vars
  include_tasks: write-group-vars.yml
  vars:
    file_name: "01-{{ cluster_name }}"
    group_name: "{{ cluster_tag }}"
    group_vars: "{{
      cluster_vars|combine({
        'cluster_tag': cluster_tag,
        'cluster_name': cluster_name,
        'tpa_version': lookup('file', tpa_dir+'/VERSION.md')
      })
    }}"

- name: Write general variables for hosts
  include_tasks: write-host-vars.yml
  vars:
    file_name: "01-instance_vars"
    host_name: "{{ item.Name }}"
    host_vars: "{{ item.vars }}"
  with_items: "{{ instance_vars }}"
  loop_control:
    label: >-
      {{ item.Name }}
  when: >
    item.vars|length > 0

- name: Write topology variables for hosts
  include_tasks: write-host-vars.yml
  vars:
    file_name: "02-topology"
    host_name: "{{ item.Name }}"
    host_vars: "{{
      {}
      |combine((item.role|ternary({'role': item.role|select('notequalto', 'postgres')|list}, {})))
      |combine((item.backup|ternary({'backup': item.backup}, {})))
      |combine((item.upstream|ternary({'upstream': item.upstream}, {})))
    }}"
  with_items: "{{ instance_vars }}"

# We start with an expanded list of volumes per instance (i.e., RAID
# devices will have multiple entries), which looks like this:
#
# volumes:
#   - raid_device: /dev/md0
#     device_name: /dev/xvdb
#     vars:
#       mountpoint: /var/lib/postgresql
#     …
#   - raid_device: /dev/md0
#     device_name: /dev/xvdc
#     vars:
#       mountpoint: /var/lib/postgresql
#     …
#   - device_name: /dev/xvdd
#     vars:
#       mountpoint: /var/lib/barman
#     …
#
# We run this through a custom filter to extract the device name that
# matters (raid_device if set, device_name otherwise) and remove any
# duplicates based on the device name. We end up with something like
# this:
#
# volumes:
#   - device: /dev/md0
#     mountpoint: /var/lib/postgresql
#   - device: /dev/xvdd
#     mountpoint: /var/lib/barman

- name: Write volume definitions for hosts
  include_tasks: write-host-vars.yml
  vars:
    file_name: "03-volumes"
    host_name: "{{ item.Name }}"
    host_vars:
      volumes: "{{ item.volumes|get_device_variables }}"
  with_items: "{{ instance_vars }}"

- name: Generate known_hosts file for the cluster
  template:
    src: known_hosts.j2
    dest: "{{ cluster_dir }}/known_hosts"

- name: Generate ssh_config file for the cluster
  template:
    src: ssh_config.j2
    dest: "{{ cluster_dir }}/ssh_config"
