---

# © Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

- name: Delete generated files for this cluster
  file:
    path: "{{ cluster_dir }}/{{ item }}"
    state: absent
    force: yes
  with_items:
    - tmp
    - keys
    - certs
    - vault
    - hostkeys
    - vars.json
    - ssh_config
    - ansible.log
    - tpa_known_hosts
    - id_{{ cluster_name|lower }}
    - id_{{ cluster_name|lower }}.pub
    - id_{{ cluster_name|lower }}.ppk
    - inventory/00-{{ cluster_name }}
    - inventory/group_vars/{{ cluster_tag }}/00-ansible.yml
    - inventory/group_vars/{{ cluster_tag }}/01-{{ cluster_name }}.yml
    - inventory/group_vars/{{ cluster_tag }}/secrets
    - inventory/group_vars/

# First, we delete any files we may have generated into host_vars.
# We really want something like «with_fileglob: host_vars/*» here,
# but with_fileglob is serious about the "file" glob part, and will
# not return directories matching a wildcard.

- name: Delete host_vars files generated for this cluster
  shell: >
    if [[ $({{ find_cmd }}| wc -l) != 0 ]]; then
    {{ find_cmd }} -exec rm {} ';'; exit 99;
    fi
  args:
    executable: /bin/bash
  vars:
    find_cmd: >-
      find "{{ cluster_dir }}"/inventory/host_vars
      '(' -name 01-instance_vars.yml -o -name 02-topology.yml -o -name 03-volumes.yml ')'
  register: rm
  changed_when: rm.rc == 99
  failed_when: rm.rc not in [0, 99]

# Now we try to remove as many empty directories as we can, up to
# and including the top-level inventory directory.

- name: Delete any empty inventory directories
  shell: >
    if [[ $({{ find_cmd }}| wc -l) != 0 ]]; then
    {{ find_cmd }} -exec rmdir {} ';'; exit 99;
    fi
  args:
    executable: /bin/bash
  vars:
    find_cmd: >-
      find "{{ cluster_dir }}"/inventory -depth -type d
  register: rmdir
  ignore_errors: true
  changed_when: >
    rmdir.rc == 99 and 'Directory not empty' not in rmdir.stderr
  failed_when: rmdir.rc not in [0, 99]

- name: Delete vault password (system)
  shell: >
    "{{ tpa_dir }}"/architectures/lib/delete-vault
    "{{ cluster_dir }}"
    "{{ keyring_backend }}"
    "{{ vault_name }}"
  args:
    executable: /bin/bash
  register: rmvault
  changed_when: rmvault.rc == 0
  failed_when: rmvault.rc not in [0, 2]
  when: keyring_backend is defined and keyring_backend == "system"