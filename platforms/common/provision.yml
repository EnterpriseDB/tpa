---

# © Copyright EnterpriseDB UK Limited 2015-2023 - All rights reserved.

- name: Ensure that the cluster's inventory directories exist
  file:
    path: "{{ cluster_dir }}/{{ item }}"
    state: directory
    mode: "0755"
  with_items:
    - vault
    - hostkeys
  tags: always

- import_tasks: ../common/read-provisioning-vars.yml
  tags: always

- name: Set ssh_key_file
  set_fact:
    default_ssh_key_file: >-
      {{ _default }}
    ssh_key_file: >-
      {{ ssh_key_file|default(_default) }}
  vars:
    _default: "id_{{ cluster_name|lower }}"
  tags: always

- name: Run ssh-keygen
  command: ssh-keygen -P "" -f "{{ ssh_key_file }}" -C 2ndQuadrant
  args:
    chdir: "{{ cluster_dir }}"
    creates: "{{ ssh_key_file }}"
  tags: [common, ssh, keygen]

- name: Convert ssh keys with puttygen (if available)
  command: >
    puttygen {{ ssh_key_file }} -o {{ ssh_key_file }}.ppk
  args:
    chdir: "{{ cluster_dir }}"
    creates: "{{ ssh_key_file }}.ppk"
  ignore_errors: true
  when: >
    lookup('pipe', 'command -v puttygen || true') != ''
    and ssh_key_file == default_ssh_key_file
  tags: [common, ssh, keygen]

- name: Generate RSA and ECDSA host keys
  command: ssh-keygen -t {{ item }} -N "" -C "{{ cluster_name }}" -f ssh_host_{{ item }}_key
  args:
    chdir: "{{ cluster_dir }}/hostkeys"
    creates: "ssh_host_{{ item }}_key"
  with_items:
    - rsa
    - ecdsa
  tags: [common, ssh, hostkeys]

# We generate a random vault passphrase and store it in a text file.
# This obviously needs improvement—we should GPG-encrypt it with the
# public keys of everyone who needs access to the secret.

- name: Generate the vault passphrase for this cluster
  shell: >
    "{{ tpa_dir }}"/architectures/lib/password > vault_pass.txt
  args:
    chdir: "{{ cluster_dir }}/vault"
    creates: vault_pass.txt
    executable: /bin/bash
  delegate_to: localhost
  tags: [common, vault]
