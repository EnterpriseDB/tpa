---

# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

# We load vars.json into provisioning_vars, and set its keys as
# top-level variables (unless they are already set, i.e., we give
# precedence to config.yml or explicit settings).

- name: Load provisioning variables
  include_vars:
    file: "{{ item }}"
    name: provisioning_vars
  with_fileglob:
    - "{{ cluster_dir }}/vars.json"
  when:
    use_cached_vars|default(false)|bool

- name: Set empty provisioning_vars if vars.json was not loaded
  set_fact:
    provisioning_vars: {}
  when:
    provisioning_vars is not defined

- name: Find provisioning_vars that will be overriden
  set_fact:
    overriden_keys:
      "{{ overriden_keys|default([])|union([item.key]) }}"
  when:
    item.key in vars
  with_dict: "{{ provisioning_vars }}"

- name: Remove overriden variables from provisioning_vars
  set_fact:
    provisioning_vars: "{{ provisioning_vars|remove_keys(overriden_keys) }}"
  when:
    overriden_keys|default({}) is not empty
  register: overriden

- include_tasks: write-provisioning-vars.yml
  when:
    not overriden is skipped

- name: Set facts from remaining provisioning_vars
  action: set_fact
  args:
    "{{ item.key }}": "{{ item.value }}"
  with_dict: "{{ provisioning_vars }}"
