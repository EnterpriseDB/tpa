---

# © Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

# For every instance that has a "backup: xxx" tag, there should be
# exactly one instance with "Name: xxx" and "role: …,barman,…" tags.

- name: Validate backup references
  assert:
    msg: >
      An instance with Name={{ item }} and 'barman' in role must exist,
      because of the 'backup: {{ item }}' setting on
      instance{{ (referring_instances|length == 1)|ternary('', 's') }}
      {{ referring_instances|join(', ') }}
    that:
      - instances|selectattr('Name','equalto',item)|
        selectattr('role','defined')|selectattr('role','contains','barman')|
        list|count == 1
  with_items:
    "{{ instances|selectattr('backup', 'defined')|map(attribute='backup')|list|flatten|unique }}"
  register: barman_references_result
  when:
    barman_references_result is not defined
    or barman_references_result is not failed
  vars:
    referring_instances:
      "{{ instances
          |selectattr('backup','defined')
          |selectattr('backup','contains',item)
          |map(attribute='Name')|list }}"

# Likewise, for every instance that has an "upstream: xxx" tag, there
# should be exactly one instance with a "Name: xxx" tag.

- name: Validate upstream references
  assert:
    msg: >
      An instance with Name={{ item }} must exist,
      because of the 'upstream: {{ item }}' setting on
      instance{{ (referring_instances|length == 1)|ternary('', 's') }}
      {{ referring_instances|join(', ') }}
    that:
      - instances|selectattr('Name','equalto',item)|list|count == 1
  with_items:
    "{{ instances|selectattr('upstream', 'defined')|map(attribute='upstream')|unique|list }}"
  register: upstream_references_result
  when:
    upstream_references_result is not defined
    or upstream_references_result is not failed
  vars:
    referring_instances:
      "{{ instances
          |selectattr('upstream','defined')
          |selectattr('upstream','equalto',item)
          |map(attribute='Name')|list }}"

- name: Ensure every witness node declares an upstream
  assert:
    msg: "Please define an upstream node for witness {{ item.Name }}"
    that:
      - item.upstream is defined
  with_items:
    "{{ instances
        |selectattr('role', 'defined')
        |selectattr('role','contains','witness')
        |rejectattr('role','contains','bdr')|list }}"

- name: Validate "bdr_node_camo_partner" references
  assert:
    msg: >
      {% if item.Name == camo_partner %}
      'bdr_node_camo_partner: {{ camo_partner }}'
      setting on "{{ item.Name }}" cannot point to the same node
      {% else %}
      An instance with Name={{ camo_partner }} must exist,
      because of the 'bdr_node_camo_partner: {{ camo_partner }}'
      setting on "{{ item.Name }}"
      {% endif %}
    that:
      - instances|selectattr('Name', 'equalto', camo_partner)|list|count == 1
      - item.Name != camo_partner
  when: camo_partner != ''
  with_items: "{{ instances }}"
  vars:
    camo_partner: "{{ item.get('vars', {}).get('bdr_node_camo_partner', '') }}"

- name: Convert cluster_network to cluster_networks
  set_fact:
    cluster_vars:
      "{{ cluster_vars
          |remove_keys(['cluster_network'])
          |combine({'cluster_networks': [n]}) }}"
  when:
    n is string and 'cluster_networks' not in cluster_vars
  vars:
    n: "{{ cluster_vars.get('cluster_network', []) }}"
