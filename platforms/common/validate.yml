---

# Â© Copyright EnterpriseDB UK Limited 2015-2022 - All rights reserved.

# If TPAexec was installed from an OS package (deb, rpm) then we should have the VERSION file in the
# root of the installation directory at `tpa_dir`.
# Otherwise, if the source code from git was cloned then we should be able to show the last tag
# Either of these two commands should provide output if we're in a valid installation source.

- name: Determine TPAexec version from installation source
  block:
    - assert:
        that: >
          tpa_file_version or tpa_git_version
        msg: >
          Unsupported installation method. Please install a TPAexec package from the
          EDB repository (https://techsupport.enterprisedb.com/software_subscriptions/add/products/tpa/),
          or run it from a clone of the source code repository
    - set_fact:
        tpa_version: "{{ tpa_file_version or tpa_git_version }}"
  vars:
    tpa_file_version: "{{ lookup('file', tpa_dir + '/VERSION', errors='ignore') }}"
    tpa_git_version: "{{ lookup('pipe', 'cd %s && git describe --always' % tpa_dir, errors='ignore') }}"

- assert:
    msg: "Ansible 2.9.x is required"
    that:
      - ansible_version.major == 2
      - ansible_version.minor == 9
  tags: prereqs

- import_tasks: validate-compat.yml

- name: Set default empty locations and cluster_vars
  set_fact:
    locations: "{{ locations|default([]) }}"
    cluster_vars: "{{ cluster_vars|default({}) }}"
    ansible_tower: "{{ ansible_tower|default({}) }}"

- name: Ensure cluster_name is specified
  assert:
    msg: "Please define cluster_name in {{ config_file }}"
    that:
      - cluster_name is defined
      - cluster_name != ''

- name: Ensure given cluster_name is valid
  assert:
    msg: "Invalid cluster_name='{{ cluster_name }}' defined in {{ config_file }} (may contain only letters, numbers, underscores, minus)"
    that:
      - cluster_name is matched_by('^[_a-zA-Z0-9-]+$')

- name: Set default cluster_tags (including Owner)
  set_fact:
    cluster_tags: "{{ default_tags|combine(cluster_tags|default({})) }}"
  vars:
    default_tags:
      Owner: >-
        {{ Owner|default(lookup('env', 'USER')) or lookup('pipe', 'id -u -n || true') }}

# It is not currently meaningful to set cluster_tags['Name'] to anything
# other than cluster_name. We only use the latter value, so it will only
# lead to confusion to allow the former to be set.

- name: Ensure that the cluster_name is set as a tag
  set_fact:
    cluster_tags: "{{ cluster_tags|combine(dict(Name=cluster_name)) }}"
    cluster_tag: "{{ cluster_tag|default('tag_Cluster_' + cluster_name) }}"

- name: Ensure that every location specifies a unique name
  assert:
    msg: "Please set a unique 'Name' for every location"
    that:
      - locations|selectattr('Name','defined')|map(attribute='Name')|unique|list|count == locations|count

- name: Ensure instances is correctly configured
  assert:
    msg: "Please define instances (an array of hashes, one per instance) in {{ config_file }}"
    that:
      - instances is defined
      - instances is sequence and instances is not string and instances is not mapping
      - instances is not empty

- name: Set defaults for instance definitions
  set_fact:
    instances: "{{
      instances|set_instance_defaults(cluster_name,
        compat_defaults|combine(instance_defaults|default({}), recursive=True),
        locations
      )|expand_instance_volumes
    }}"

- name: Ensure that every instance specifies a unique node id and Name
  assert:
    msg: "Please set a unique 'node' and 'Name' on every instance"
    that:
      - instances|selectattr('node','defined')|map(attribute='node')|unique|list|count == instances|count
      - instances|selectattr('Name','defined')|map(attribute='Name')|unique|list|count == instances|count

- name: Set valid instance keys
  set_fact:
    valid_instance_keys: "{{
      valid_instance_keys|default({})|combine({
        'common': instance_keys
      })
    }}"
  vars:
    instance_keys:
    - Name
    - node
    - role
    - platform
    - location
    - upstream
    - backup
    - tags
    - vars
    - volumes

- assert:
    msg: >-
      Replicas must specify the same postgres_tablespace volumes as
      their upstream instance: {{ mismatched_replicas|join(", ") }}
    that:
      mismatched_replicas is empty
  vars:
    mismatched_replicas: "{{
      instances|find_replica_tablespace_mismatches
    }}"
