---

# © Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

## Platform-independent validation
#
# Every config.yml needs to set cluster_name and follow certain other
# rules, which we verify here. We also derive the list of platforms
# mentioned by the cluster configuration.

- import_tasks: common/validate.yml

# We derive the list of platforms relevant to this cluster and separate
# instances[] into xxx_instances[] lists for each platform xxx.

- name: Collect list of platforms
  set_fact:
    cluster_platforms: "{{
        cluster_platforms|default([])|union([item.platform])
      }}"
  with_items: "{{ instances }}"
  loop_control:
    label: >-
      {{ item.Name }}

- name: Separate instances into platform-specific lists
  set_fact:
  args:
    "{{ item }}_instances": >
      {{ instances|selectattr('platform', 'equalto', item)|list }}
  with_items: "{{ cluster_platforms }}"

## Platform-specific validation
#
# We use a block here to propagate «tags: always» to the included tasks.

- block:
    - import_tasks: cloud/validate.yml
      when: >
        cluster_platforms|intersect(["aws", "azure"])
    - include_tasks: "{{ platform }}/validate.yml"
      with_items:
        "{{ cluster_platforms }}"
      loop_control:
        loop_var: platform
  tags: always

- name: Validate hostnames (lowercase, no underscores)
  assert:
    msg: "Please ensure instance Name '{{ item.Name }}' matches '{{ p }}'"
    that:
      - item.Name is matched_by(p)
  with_items: "{{ instances }}"
  loop_control:
    label: >-
      {{ item.Name }}
  vars:
    patterns: "{{ hostname_patterns|default({}) }}"
    p: "{{ patterns[item.platform]|default('^[a-z0-9][a-z0-9-]*[a-z0-9]$') }}"

- name: Ensure that every instance has only valid keys
  assert:
    msg: >-
      Unrecognised keys in the definition of instance
      {{ item.Name }}: {{ invalid_keys|join(', ') }}
      (should they be under `vars:`?)
    that:
      invalid_keys is empty
  with_items:
    "{{ instances }}"
  loop_control:
    label: >-
      {{ item.Name }}
  vars:
    valid_keys: >
      {{ valid_instance_keys['common']|union(valid_instance_keys[item.platform]) }}
    invalid_keys: >
      {{ item.keys()|difference(valid_keys) }}
  register: valid_keys_result
  when:
    valid_keys_result is not defined
    or valid_keys_result is not failed

## Final topology validation
#
# Once all the platform-specific validations have been run and given an
# opportunity to fix anything they can, we check the overall cluster
# topology and relationships between instances.

- import_tasks: common/validate-topology.yml
