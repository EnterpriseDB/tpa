#!/bin/bash
#
# Given a cluster and a comma-separated list of one or more instance
# names, "rehydrates" each instance as described below:
#
# 1. Ensures that all extra volumes attached to the instance are tagged
#    correctly and set to not be deleted on termination of the instance.
# 2. Terminates the instance and waits for the operation to complete.
# 3. Provisions a replacement for the instance.
# 4. Redeploys software on the new instance.
#
# Example: utils/rehydrate test/cluster instance[,instance2,â€¦]

IFS=
set -e -u

utils=$(dirname $0)

cluster=${1:?No cluster specified}
shift

instances=${1:?No instances specified}
shift

DESTROY=no
if [ "${1:-'NO_PLEASE_SAVE_MY_CLUSTER'}" = "I_REALLY_WANT_TO_DESTROY_MY_ENTIRE_CLUSTER=yes" ]; then
    DESTROY=yes
    shift
fi

cluster_dir=$cluster
if [[ ${cluster_dir:0:1} != '/' ]]; then
    clusters=$(realpath $utils/../clusters);
    cluster=$(echo $cluster|sed 's,^clusters/,,')
    cluster_dir="$clusters/$cluster"
fi

if [ ! -d $cluster_dir ]; then
    echo "Can't find directory $cluster_dir"
    exit
fi

# Terminate the old instances after performing sanity checks.

$utils/ansible-playbook \
    $utils/../platforms/aws/terminate-for-rehydration.yml \
    -e i_really_want_to_destroy_my_entire_cluster=$DESTROY \
    -i $cluster_dir/inventory \
    -e cluster=$cluster_dir \
    --limit "$instances"

# Provision a replacement for the terminated instances.

$utils/provision $cluster_dir \
    -e require_reattachment=yes \
    -e reattach_hosts="$instances"

# Redeploy to the new instances.
#
# If this fails for any reason, it's safe to rerun the command below by
# hand. Other than defining deploy_hosts, it's a normal deploy command.

$utils/deploy $cluster_dir -e deploy_hosts="$instances" "$@"
