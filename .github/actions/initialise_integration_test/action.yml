# Â© Copyright EnterpriseDB UK Limited 2015-2024 - All rights reserved.

name: Initialise Integration Test
description: Install requirements and run configure for integration test for the given architecture and platform

inputs:
  source_directory:
    description: "Directory where tpaexec source code is checked out on runner"
    required: true
  tpa_platform: # id of input
    description: "TPA platform"
    required: false
    default: docker
  tpa_architecture:
    required: false
    description: "TPA architecture"
    default: BDR-Always-ON
  tpa_enable_pgbouncer:
    description: "Enable pgbouncer"
    default: false
  tpa_layout:
    required: false
    description: "TPA BDR layout"
    default: bronze
  tpa_harp_consensus_protocol:
    required: false
    description: "TPA HARP consensus protocol"
    default: bdr
  tpa_os:
    required: false
    description: "Operating System to use with TPA (--os)"
    default: ""
  tpa_os_version:
    required: false
    description: "Operating System version to use with TPA (--os-version)"
    default: ""
  tpa_os_image:
    required: false
    description: "Image to use with TPA platform"
    default: ""
  tpa_postgres_flavour:
    required: false
    description: "TPA postgres type selection"
    default: ""
  tpa_postgres_version:
    required: false
    description: "Postgres version"
    default: ""
  tpa_package_cache:
    required: false
    description: "Enable local repo and reuse packages"
    default: "false"
  tpa_failover_manager:
    required: false
    description: "Failover manager (for M1 only)"
  tpa_location_names:
    required: false
    description: "Location names (for M1 only)"
    default: "l1 l2"
  tpa_data_nodes_per_location:
    required: false
    description: "Data nodes per location (for M1 only)"
    default: 2
  tpa_witness_only_location:
    required: false
    description: "Use a witness-only location (for M1 only)"
    default: false
  tpa_single_node_location:
    required: false
    description: "Use a single-node location (for M1 only)"
    default: false
  tpa_ansible_version:
    required: false
    description: "Ansible version to use with TPA"
  cluster:
    required: false
    description: "Name of the cluster directory"
    default: "cluster"

runs:
  using: "composite"

  steps:

    - uses: ./.github/actions/install-requirements
      with:
        platform: ${{ inputs.tpa_platform }}

    - uses: ./.github/actions/tpaexec-setup
      with:
        source_directory: ${{ inputs.source_directory }}
        tpa_ansible_version: ${{ inputs.tpa_ansible_version }}

    - name: Export EDB_REPO_CREDENTIALS_FILE to use EDB repositories
      run: |
        umask 066 && echo $EDB_REPO_CREDENTIALS > $EDB_REPO_CREDENTIALS_FILE
      shell: bash

    - name: Filter characters from cluster variable
      run: |
        CLUSTER="cluster-${GITHUB_RUN_NUMBER:-1}-${GITHUB_RUN_ATTEMPT:-0}${{ inputs.cluster }}"
        echo CLUSTER=${CLUSTER//[:\/.]/_} >>$GITHUB_ENV
      shell: bash

    - name: Generate an initial configuration for a simple cluster
      working-directory: ${{ inputs.source_directory }}
      run: |
        echo "::group::Configure"
        # Set an array to avoid joins
        declare -a CONFIGURE_OPTS
        declare -a OVERRIDE_FILES

        CONFIGURE_OPTS+=(--architecture "${{ inputs.tpa_architecture }}")
        CONFIGURE_OPTS+=(--platform "${{ inputs.tpa_platform }}")
        CONFIGURE_OPTS+=(--keyring-backend legacy)
        if [ "${{ inputs.tpa_architecture }}" == "BDR-Always-ON" ] ;then
          CONFIGURE_OPTS+=(
            --layout "${{ inputs.tpa_layout }}"
            --harp-consensus-protocol "${{ inputs.tpa_harp_consensus_protocol }}"
          )
        elif [ "${{ inputs.tpa_architecture }}" == "PGD-Always-ON" ]; then
          CONFIGURE_OPTS+=(
            --location-names a b c
            --data-nodes-per-location 2
            --add-witness-node-per-location
            --pgd-proxy-routing local
            --add-witness-only-location c
          )
        fi
        if [ -n "${{ inputs.tpa_os }}" ] ;then
          CONFIGURE_OPTS+=(--os "${{ inputs.tpa_os }}")
          IMAGE_OS="${{ inputs.tpa_os }}"
          IMAGE_OS="${IMAGE_OS,,}"
          IMAGE="tpa/${IMAGE_OS}"
        fi
        if [ -n "${{ inputs.tpa_os_version }}" ] ;then
          CONFIGURE_OPTS+=(--os-version "${{ inputs.tpa_os_version }}")
          IMAGE_VERSION="${{ inputs.tpa_os_version }}"
          IMAGE="${IMAGE:+${IMAGE}:${IMAGE_VERSION}}"
        fi
        if [ -n "${{ inputs.tpa_os_image }}" ] ;then
          CONFIGURE_OPTS+=(--os-image "${{ inputs.tpa_os_image }}")
          IMAGE="${{ inputs.tpa_os_image }}"
          IMAGE_OS="${IMAGE/:*}"
          IMAGE_OS="${IMAGE_OS/tpa\/}"
          IMAGE_VERSION="${IMAGE/*:}"
        fi
        if [ -n "${{ inputs.tpa_postgres_flavour }}" ] ;then
          CONFIGURE_OPTS+=(--postgres-flavour "${{ inputs.tpa_postgres_flavour }}")
        fi
        if [ -n "${{ inputs.tpa_postgres_version }}" ] ;then
          CONFIGURE_OPTS+=(--postgres-version "${{ inputs.tpa_postgres_version }}")
        fi

        # Disable pem for pgextended because of missing pgextendedNN-server-sslutils
        # dependency. We can remove this check when pgextendedNN-server-sslutils is
        # available
        if [[ "${{ inputs.tpa_postgres_flavour }}" != "pgextended"
              && "${{ inputs.tpa_postgres_flavour }}" != "edbpge"
              && "${{ inputs.tpa_architecture }}" != "M1" ]] ;then
          CONFIGURE_OPTS+=(--enable-pem)
        fi

        # enable redwood for epas.
        if [ "${{ inputs.tpa_postgres_flavour }}" == "epas" ] ;then
          CONFIGURE_OPTS+=(--redwood)
        fi
        # If package caching is enabled we enforce use of local repo
        if [ "${{ inputs.tpa_package_cache }}" == "true" ] ;then
          CONFIGURE_OPTS+=(--use-local-repo-only)
        fi

        if [ "${{ inputs.tpa_architecture }}" = "M1" ] ;then
          CONFIGURE_OPTS+=(--failover-manager "${{ inputs.tpa_failover_manager }}")

          if [ "${{ inputs.tpa_failover_manager }}" != "patroni" ] ;then
          #Architecture error: TPA does not support Patroni with multiple locations
            CONFIGURE_OPTS+=(--location-names ${{ inputs.tpa_location_names }})
            CONFIGURE_OPTS+=(--data-nodes-per-location "${{ inputs.tpa_data_nodes_per_location }}")
            if [[ "${{ inputs.tpa_witness_only_location }}" == 'true' ]] ;then
              WITNESS_ONLY_LOCATION=$(awk '{print $NF}' <<< "${{ inputs.tpa_location_names }}")
              CONFIGURE_OPTS+=(--witness-only-location $WITNESS_ONLY_LOCATION)
          fi

          if [ "${{ inputs.tpa_enable_pgbouncer }}" == "true" ] ;then
            CONFIGURE_OPTS+=(--enable-pgbouncer)
          fi
        fi

          if [[ "${{ inputs.tpa_single_node_location}}" == 'true' ]] ;then
            SINGLE_NODE_LOCATION=$(awk '{print $NF}' <<< "${{ inputs.tpa_location_names }}")
            CONFIGURE_OPTS+=(--single-node-location $SINGLE_NODE_LOCATION)
          fi
        fi

        # If we are going to use efm, override its network connectivity test
        if [[ "${{ inputs.tpa_platform }}" == "docker"
              && "${{ inputs.tpa_failover_manager }}" == "efm"
              && "${{ inputs.tpa_architecture }}" == "M1" ]] ;then
          # CONFIGURE_OPTS+=(--overrides-from "${{ github.action_path }}/efm_ping.yml")
          OVERRIDE_FILES+=(${{ github.action_path }}/efm_ping.yml)
        fi

        # Assume the default image is tpa/redhat if we're using docker as a platform
        # Otherwise we are not sure what should be used so exit
        if [[ "${{ inputs.tpa_platform }}" != "docker" && -z "$IMAGE" ]] ;then
          echo "Please set either TPA OS and Version or OS Image"
          exit 1
        fi
        IMAGE="${IMAGE:-tpa/redhat}"
        # Set a base os image name stripping the docker image tag
        image_os_base="${IMAGE/:*}"
        # Set a image version stripping the docker image name leaving the tag only if it's set
        [[ "${IMAGE}" =~ : ]] && image_ver="${IMAGE/*:}"
        # Set a default IMAGE_OS to be the base image name minus "tpa/"
        : "${IMAGE_OS:=${image_os_base/tpa\/}}"
        # Set a default IMAGE_OS_VERSION to be the docker image tag or "latest" if it's not set
        : "${IMAGE_VERSION:=${image_ver:-latest}}"

        # For M1, we must use an older barman package version because the barman
        # 3.10 in PGDG has incorrect dependency information
        if [[ "${{ inputs.tpa_architecture }}" == "M1"
              && "${IMAGE_OS}" == "redhat"
              && "${IMAGE_VERSION}" != "7" ]];then
          CONFIGURE_OPTS+=(--barman-package-version 3.9.0)
          # CONFIGURE_OPTS+=(--overrides-from "${{ github.action_path}}/barman_cli_pin.yml")
          OVERRIDE_FILES+=(${{ github.action_path }}/barman_cli_pin.yml)
        fi


        # Save the image info for reuse in actions/cache
        echo IMAGE="${IMAGE}" >>$GITHUB_ENV
        echo IMAGE_OS="${IMAGE_OS}" >>$GITHUB_ENV
        echo IMAGE_VERSION="${IMAGE_VERSION}" >>$GITHUB_ENV

        if [ ${#OVERRIDE_FILES[0]} -ne 0 ]; then
          CONFIGURE_OPTS+=(--overrides-from "${OVERRIDE_FILES[@]}")
        fi

        CONFIGURE_OPTS+=(--no-git)

        # Load extra arguments from calling workflows
        read -r -a CONFIGURE_EXTRA_ARGS <<<"$CONFIGURE_EXTRA_ARGS"
        CONFIGURE_OPTS+=("${CONFIGURE_EXTRA_ARGS[@]}")
        echo "::endgroup::"

        echo "Configure command: tpaexec configure $CLUSTER ${CONFIGURE_OPTS[@]}"

        echo "::group::Execute Configure"
        # Finally run configure with constructed options
        ./bin/tpaexec configure "$CLUSTER" "${CONFIGURE_OPTS[@]}"
        echo "::endgroup::"
        (echo "\`\`\`";
         echo "tpaexec configure $CLUSTER \\";
         echo "${CONFIGURE_OPTS[@]}"|fmt|sed -e 's/$/ \\/' -e '$s/ \\$//';
         echo "\`\`\`") >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Prepare package cache
      uses: actions/cache@v4
      with:
        path: ${{ inputs.cluster }}/local-repo
        key: local-repo-${{ env.IMAGE_OS }}-${{ env.IMAGE_VERSION }}-${{ github.ref_name }}-${{ github.sha }}
        restore-keys: |
          local-repo-${{ env.IMAGE_OS }}-${{ env.IMAGE_VERSION }}-${{ github.ref_name }}
          local-repo-${{ env.IMAGE_OS }}-${{ env.IMAGE_VERSION }}
      if: inputs.tpa_package_cache == 'true'

    - name: Populate the package cache
      working-directory: ${{ inputs.source_directory }}
      run: |
        echo "::group::Download packages"
        ./bin/tpaexec download-packages "$CLUSTER" --docker-image "$IMAGE" -vv &>"$CLUSTER"/download-packages
        status=$?
        find "$CLUSTER/local-repo" -ls
        if [[ $status != 0 ]]; then
          cat "$CLUSTER/download-packages"
        fi
        echo "::endgroup::"
        exit $status
      shell: bash {0}
      if: inputs.tpa_package_cache == 'true'
