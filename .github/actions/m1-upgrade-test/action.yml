# Â© Copyright EnterpriseDB UK Limited 2015-2025 - All rights reserved.

name: Upgrade M1 Cluster Integration Test
description: Run an integration test to upgrade an M1 cluster

inputs:
  source_directory:
    description: "Directory where tpaexec source code is checked out on runner"
    required: true
  tpa_platform: # id of input
    description: "TPA platform"
    required: false
    default: "docker"
  tpa_os:
    required: false
    description: "Operating System to use with TPA (--os)"
  tpa_os_version:
    required: false
    description: "Operating System version to use with TPA (--os-version)"
    default: ""
  tpa_os_image:
    required: false
    description: "Image to use with TPA platform"
    default: ""
  tpa_postgres_flavour:
    required: true
    description: "Postgres flavour"
  tpa_postgres_version:
    required: true
    description: "Postgres version"
    default: ""
  tpa_postgres_package_version:
    required: true
    description: "Postgres package version to upgrade from"
    default: ""
  tpa_failover_manager:
    required: true
    description: "Failover manager"
    default: "repmgr"
  tpa_package_cache:
    required: false
    description: "Enable local repo and reuse packages"
    default: "true"
  cluster:
    required: false
    description: "Unique name for this cluster"
    default: "cluster"


runs:
  using: "composite"

  steps:

    - name: Set extra arguments for pre-upgrade package version
      run: |
        CONFIGURE_EXTRA_ARGS+="--postgres-package-version ${{ inputs.tpa_postgres_package_version }}"
        echo CONFIGURE_EXTRA_ARGS="${CONFIGURE_EXTRA_ARGS}" >> $GITHUB_ENV
      shell: bash

    - uses: ./.github/actions/initialise_integration_test
      with:
        source_directory: ${{ inputs.source_directory }}
        tpa_platform: ${{ inputs.tpa_platform }}
        tpa_architecture: "M1"
        tpa_os: ${{ inputs.tpa_os }}
        tpa_os_version: ${{ inputs.tpa_os_version }}
        tpa_os_image: ${{ inputs.tpa_os_image }}
        tpa_postgres_flavour: ${{ inputs.tpa_postgres_flavour }}
        tpa_postgres_version: ${{ inputs.tpa_postgres_version }}
        tpa_failover_manager: ${{ inputs.tpa_failover_manager }}
        tpa_package_cache: ${{ inputs.tpa_package_cache }}
        cluster: ${{ inputs.cluster }}

    - name: Provision the cluster
      working-directory: ${{ inputs.source_directory }}
      run: ./bin/tpaexec provision "$CLUSTER" -vv
      shell: bash

    - name: Deploy the cluster
      working-directory: ${{ inputs.source_directory }}
      run: ./bin/tpaexec deploy "$CLUSTER" -vv
      shell: bash

    - name: Edit config.yml
      working-directory: ${{ inputs.source_directory }}
      run: |
        sed -i '/postgres_package_version/d' $CLUSTER/config.yml
      shell: bash

    - name: Provision the cluster with revised config.yml
      working-directory: ${{ inputs.source_directory }}
      run: ./bin/tpaexec provision "$CLUSTER" -vv
      shell: bash

    - name: Download newly needed packages
      working-directory: ${{ inputs.source_directory }}
      run: |
        echo "::group::Download upgrade packages"
        ./bin/tpaexec download-packages "$CLUSTER" --docker-image "$IMAGE" -vv &>"$CLUSTER"/download-upgrade-packages
        status=$?
        find "$CLUSTER/local-repo" -ls
        if [[ $status != 0 ]]; then
          cat "$CLUSTER/download-upgrade-packages"
        fi
        echo "::endgroup::"
        exit $status
      shell: bash {0}
      if: inputs.tpa_package_cache == 'true'

    - name: Upgrade the cluster
      working-directory: ${{ inputs.source_directory }}
      run: ./bin/tpaexec upgrade "$CLUSTER" -vv
      shell: bash

    - name: Test the cluster
      working-directory: ${{ inputs.source_directory }}
      run: |
        echo "::group::Test upgraded cluster"
        ./bin/tpaexec test "$CLUSTER" -vv --excluded_tasks=pgbench
        status=$?
        echo "::endgroup::"
        exit $status
      shell: bash

    - uses: ./.github/actions/finalise_integration_test
      with:
        source_directory: ${{ inputs.source_directory }}
        cluster: ${{ env.CLUSTER }}
      if: always()
