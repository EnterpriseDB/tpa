# Â© Copyright EnterpriseDB UK Limited 2015-2022 - All rights reserved.

name: Integration Test
description: Run an integration test for the given architecture and platform

inputs:
  tpa_platform: # id of input
    description: "TPA platform"
    required: false
    default: docker
  tpa_architecture:
    required: false
    description: "TPA architecture"
    default: BDR-Always-ON
  tpa_os:
    required: false
    description: "Operating System to use with TPA (--os)"
    default: ""
  tpa_os_version:
    required: false
    description: "Operating System version to use with TPA (--os-version)"
    default: ""
  tpa_os_image:
    required: false
    description: "Image to use with TPA platform"
    default: ""
  tpa_postgres_flavour:
    required: false
    description: "TPA postgres type selection"
    default: ""
  cluster:
    required: false
    description: "Name of the cluster directory"
    default: "cluster"

runs:
  using: "composite"

  steps:

    - uses: ./.github/actions/install-requirements
      with:
        platform: ${{ inputs.tpa_platform }}

    - uses: ./.github/actions/tpaexec-setup

    - name: Export EDB_REPO_CREDENTIALS_FILE to use EDB repositories
      run: |
        umask 066 && echo $EDB_REPO_CREDENTIALS > $EDB_REPO_CREDENTIALS_FILE
      shell: bash

    - name: Filter characters from cluster variable
      run: |
        CLUSTER="cluster-${GITHUB_RUN_NUMBER:-1}-${GITHUB_RUN_ATTEMPT:-0}${INPUTS_CLUSTER}"
        echo CLUSTER=${CLUSTER//[:\/]/_} >>$GITHUB_ENV
      shell: bash

    - name: Generate an initial configuration for a simple cluster
      run: |
        if [ "${{ matrix.tpa_architecture }}" == "BDR-Always-ON" ] ;then
          CONFIGURE_EXTRA_ARGS+=" --layout bronze"
        fi
        if [ -n "${{ inputs.tpa_os }}" ] ;then
          CONFIGURE_EXTRA_ARGS+=" --os ${{ inputs.tpa_os }}"
        fi
        if [ -n "${{ inputs.tpa_os_version }}" ] ;then
          CONFIGURE_EXTRA_ARGS+=" --os-version ${{ inputs.tpa_os_version }}"
        fi
        if [ -n "${{ inputs.tpa_os_image }}" ] ;then
          CONFIGURE_EXTRA_ARGS+=" --os-image ${{ inputs.tpa_os_image }}"
        fi
        if [ -n "${{ inputs.tpa_postgres_flavour }}" ] ;then
          CONFIGURE_EXTRA_ARGS+=" --postgres-flavour ${{ inputs.tpa_postgres_flavour }}"
        fi

        # Disable pem for pgextended because of missing pgextendedNN-server-sslutils
        # dependency. We can remove this check when pgextendedNN-server-sslutils is
        # available
        if [ "${{ inputs.tpa_postgres_flavour }}" != "2q" ] ;then
          CONFIGURE_EXTRA_ARGS+=" --enable-pem"
        fi

        ./bin/tpaexec configure "$CLUSTER" \
          --architecture ${{ inputs.tpa_architecture }} \
          --platform ${{ inputs.tpa_platform }} \
          ${CONFIGURE_EXTRA_ARGS}
      shell: bash

    - name: Provision the cluster
      # Until we can validate role assignment for service principals this is disabled
      run: ./bin/tpaexec provision "$CLUSTER" -vv
      shell: bash

    - name: Deploy the cluster
      run: ./bin/tpaexec deploy "$CLUSTER" -vv
      shell: bash

    - name: Test the cluster
      run: ./bin/tpaexec test "$CLUSTER" -vv
      shell: bash {0}

    - name: Archive the cluster logs
      run: ./bin/tpaexec archive-logs "$CLUSTER" -vv
      shell: bash
      if: always()

    - name: Archive the cluster directory
      run: tar cvzf "cluster-$CLUSTER.tar.gz" "$CLUSTER"
      shell: bash
      if: always()

    - name: Save cluster artifacts before deletion
      uses: actions/upload-artifact@v2
      with:
        name: cluster-${{ github.run_number }}-${{ github.run_attempt }}
        path: "cluster-*.tar.gz"
      if: always()

    - name: Deprovision the cluster
      run: ./bin/tpaexec deprovision "$CLUSTER" -vv
      shell: bash {0}
      if: always()

    - name: Remove cluster directory
      run: rm -rf "$CLUSTER"
      shell: bash
      if: always()

outputs: { }
