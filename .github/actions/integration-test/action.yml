# Â© Copyright EnterpriseDB UK Limited 2015-2023 - All rights reserved.

name: Integration Test
description: Run an integration test for the given architecture and platform

inputs:
  tpa_platform: # id of input
    description: "TPA platform"
    required: false
    default: docker
  tpa_architecture:
    required: false
    description: "TPA architecture"
    default: BDR-Always-ON
  tpa_os:
    required: false
    description: "Operating System to use with TPA (--os)"
    default: ""
  tpa_os_version:
    required: false
    description: "Operating System version to use with TPA (--os-version)"
    default: ""
  tpa_os_image:
    required: false
    description: "Image to use with TPA platform"
    default: ""
  tpa_postgres_flavour:
    required: false
    description: "TPA postgres type selection"
    default: ""
  tpa_postgres_version:
    required: false
    description: "Postgres version"
    default: ""
  tpa_package_cache:
    required: false
    description: "Enable local repo and reuse packages"
    default: "true"
  cluster:
    required: false
    description: "Name of the cluster directory"
    default: "cluster"

runs:
  using: "composite"

  steps:

    - uses: ./.github/actions/initialise_integration_test
      with:
        tpa_platform: ${{ inputs.tpa_platform }}
        tpa_architecture: ${{ inputs.tpa_architecture }}
        tpa_os: ${{ inputs.tpa_os }}
        tpa_os_version: ${{ inputs.tpa_os_version }}
        tpa_os_image: ${{ inputs.tpa_os_image }}
        tpa_postgres_flavour: ${{ inputs.tpa_postgres_flavour }}
        tpa_postgres_version: ${{ inputs.tpa_postgres_version }}
        tpa_package_cache: "true"
        cluster: ${{ inputs.cluster }}

    - name: Provision the cluster
      run: |
        echo "::group::tpaexec provision -vv"
        ./bin/tpaexec provision "$CLUSTER" -vv &>/tmp/tpaexec-provision
        status=$?
        cat /tmp/tpaexec-provision
        echo "::endgroup::"
        sed -n '/PLAY RECAP/,$p' /tmp/tpaexec-provision|egrep -v '(ResourceWarning|cli.run)' > /tmp/provision-recap;
        cat /tmp/provision-recap
        (echo -e "\`tpaexec provision $CLUSTER\`:";
         echo -e "\`\`\`";
         cat /tmp/provision-recap;
         echo -e "\`\`\`") >> $GITHUB_STEP_SUMMARY
        exit $status
      shell: bash

    - name: Deploy the cluster
      run: |
        echo "::group::tpaexec deploy -vv"
        ./bin/tpaexec deploy "$CLUSTER" -vv &>/tmp/tpaexec-deploy
        status=$?
        cat /tmp/tpaexec-deploy
        echo "::endgroup::"
        sed -n '/PLAY RECAP/,$p' /tmp/tpaexec-deploy|egrep -v '(ResourceWarning|cli.run)' > /tmp/deploy-recap;
        cat /tmp/deploy-recap
        (echo -e "\`tpaexec deploy $CLUSTER\`:";
         echo -e "\`\`\`";
         cat /tmp/deploy-recap;
         echo -e "\`\`\`") >> $GITHUB_STEP_SUMMARY
        exit $status
      shell: bash

    - name: Test the cluster
      run: |
        echo "::group::tpaexec test -vv"
        ./bin/tpaexec test "$CLUSTER" -vv &>/tmp/tpaexec-test
        cat /tmp/tpaexec-test
        echo "::endgroup::"
        sed -n '/PLAY RECAP/,$p' /tmp/tpaexec-test|egrep -v '(ResourceWarning|cli.run)' > /tmp/test-recap;
        cat /tmp/test-recap
        (echo -e "\`tpaexec test $CLUSTER\`:";
         echo -e "\`\`\`";
         cat /tmp/test-recap;
         echo -e "\`\`\`") >> $GITHUB_STEP_SUMMARY
      shell: bash

    - uses: ./.github/actions/finalise_integration_test
      with:
        cluster: ${{ env.CLUSTER }}
      if: always()

outputs: { }
