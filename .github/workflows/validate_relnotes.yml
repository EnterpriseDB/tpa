# When a PR event is triggered, check if the PR adds or modifies the release notes.
#
# This is not supposed to block the merging of a PR. There are PRs which should not have
# release notes, so we contain ourselves to sending information or warning messages as
# comments in the PR. The developer/review need to evaluate and proceed accordingly.
#
# This workflow would only fail if the spec of the release notes is invalid, in which
# case a parser error is thrown, or if non release notes files are found in the folder.
#
# This workflow requires the user to set up a GitHub Actions variable named
# `RELNOTES_DIRECTORY`, which should contain the name of the release notes directory
# inside the source code repository.
name: Validate release notes on PRs

on:
  pull_request:
    branches:
      - main

env:
  SOURCE_REPO_PATH: source_repo
  RELNOTES_DIRECTORY: ${{ vars.RELNOTES_DIRECTORY }}
  GITHUB_TOKEN: ${{ secrets.GH_SLONIK }}

jobs:
  validate_release_notes:
    name: Check if release notes exist and are valid
    runs-on: ubuntu-latest

    steps:
      # We use depth 2 because on PR events the `actions/checkout` action is a detached
      # head which simulates the merge of the PR into the target branch.
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          path: ${{ env.SOURCE_REPO_PATH }}

      - name: Checkout repo-actions
        uses: actions/checkout@v4
        with:
          repository: EnterpriseDB/repo-actions
          token: ${{ env.GITHUB_TOKEN }}
          ref: v1
          path: ./.github/repo-actions

      - name: Validate release notes files introduced/modified by this PR
        id: validate-relnotes
        run: |
          import os
          import subprocess

          import yaml

          from relnotes.base import RelNote

          relnotes_directory = os.environ["RELNOTES_DIRECTORY"]

          # Get list of files which were added or modified by this PR.
          file_list = subprocess.check_output(
              [
                  "git",
                  "diff",
                  "--name-only",
                  "-r",
                  "--diff-filter=AM",
                  "HEAD^1",
                  "HEAD"
              ]
          ).decode().strip().split("\n")

          release_notes_files = []
          non_release_notes_files = []
          invalid_release_notes_files = []

          for file in file_list:
              # We are only interested in YAML files from the release notes directory.
              if not file.startswith(relnotes_directory):
                  continue

              if not file.lower().endswith((".yml", ".yaml")):
                  non_release_notes_files.append(file)
                  continue

              with open(file, "r") as fd:
                  try:
                      relnote_specs = yaml.safe_load(fd)

                      for relnote_spec in relnote_specs:
                          RelNote(**relnote_spec)
                  except Exception as exc:
                      invalid_release_notes_files.append(
                          f"{file}: {str(exc)}"
                      )

                      continue

              release_notes_files.append(file)

          exit_code = 0
          comments = []

          if len(release_notes_files) > 0:
              # If the PR contains release notes we should be fine
              comments.append(
                  "✅ This PR adds or modifies release notes!"
              )
          else:
              # If the PR does not contain release notes, we might be fine. Maybe it
              # refers to a non-customer facing change?
              comments.append(
                  "❌ This PR is missing to add or modify release notes!"
              )

          if len(non_release_notes_files) > 0:
              # If we find anything other than YAML files under the release notes
              # folder, that's an issue that should be addressed
              exit_code = 1
              comments.append(
                  "❗ This PR contains unexpected files under the release notes folder:"
              )
              comments.append(
                  "\n".join(non_release_notes_files)
              )

          if len(invalid_release_notes_files) > 0:
              # If we are not able to parse any of the release notes files, that's an
              # issue that should be addressed
              exit_code = 1
              comments.append(
                  "❗ This PR contains invalid files under the release notes folder:"
              )
              comments.append(
                  "\n".join(invalid_release_notes_files)
              )

          with open(os.environ["GITHUB_OUTPUT"], "a") as fd:
              # We need to "encode" line-breaks as literal "\n" values when writing to
              # GITHUB_OUTPUT so we avoid "Invalid format" errors in Actions
              comments = '\n\n'.join(comments).replace("\n", r"\n")
              fd.write(f"comments={comments}\n")
              fd.write(f"exit_code={exit_code}\n")
        shell: python
        working-directory: ${{ env.SOURCE_REPO_PATH }}
        env:
          PYTHONPATH: ".github/workflows/relnotes"

      - name: Create or update comment about release notes validation
        uses: ./.github/repo-actions/create-or-update-comment
        with:
          token: ${{ env.GITHUB_TOKEN }}
          repo: ${{ github.repository }}
          issue-number: ${{ github.event.pull_request.number }}
          comment: '# Release Notes Status\n\n${{ steps.validate-relnotes.outputs.comments }}'
          matches: '^# Release Notes Status\n\n'

      - name: Exit with exit code reported by release notes validation
        run: |
          # shellcheck disable=SC2242
          exit ${{ steps.validate-relnotes.outputs.exit_code }}
